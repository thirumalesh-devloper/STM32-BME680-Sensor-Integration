
bme680.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b778  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800b938  0800b938  0000c938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee4  0800bee4  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bee4  0800bee4  0000cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beec  0800beec  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beec  0800beec  0000ceec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bef0  0800bef0  0000cef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20040000  0800bef4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200401d4  0800c0c8  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004057c  0800c0c8  0000d57c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152cf  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a7f  00000000  00000000  000224d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00024f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc8  00000000  00000000  000260e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a8b  00000000  00000000  00026eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f9f  00000000  00000000  0005993b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012ac3e  00000000  00000000  0006f8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a518  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b5c  00000000  00000000  0019a55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001a00b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200401d4 	.word	0x200401d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b920 	.word	0x0800b920

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200401d8 	.word	0x200401d8
 80001fc:	0800b920 	.word	0x0800b920

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_ldivmod>:
 8000bd8:	b97b      	cbnz	r3, 8000bfa <__aeabi_ldivmod+0x22>
 8000bda:	b972      	cbnz	r2, 8000bfa <__aeabi_ldivmod+0x22>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bfbe      	ittt	lt
 8000be0:	2000      	movlt	r0, #0
 8000be2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000be6:	e006      	blt.n	8000bf6 <__aeabi_ldivmod+0x1e>
 8000be8:	bf08      	it	eq
 8000bea:	2800      	cmpeq	r0, #0
 8000bec:	bf1c      	itt	ne
 8000bee:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bf2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf6:	f000 b9d3 	b.w	8000fa0 <__aeabi_idiv0>
 8000bfa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c02:	2900      	cmp	r1, #0
 8000c04:	db09      	blt.n	8000c1a <__aeabi_ldivmod+0x42>
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db1a      	blt.n	8000c40 <__aeabi_ldivmod+0x68>
 8000c0a:	f000 f84d 	bl	8000ca8 <__udivmoddi4>
 8000c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c16:	b004      	add	sp, #16
 8000c18:	4770      	bx	lr
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db1b      	blt.n	8000c5c <__aeabi_ldivmod+0x84>
 8000c24:	f000 f840 	bl	8000ca8 <__udivmoddi4>
 8000c28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c30:	b004      	add	sp, #16
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	4252      	negs	r2, r2
 8000c3a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c3e:	4770      	bx	lr
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	f000 f82f 	bl	8000ca8 <__udivmoddi4>
 8000c4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c52:	b004      	add	sp, #16
 8000c54:	4240      	negs	r0, r0
 8000c56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5a:	4770      	bx	lr
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	f000 f821 	bl	8000ca8 <__udivmoddi4>
 8000c66:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6e:	b004      	add	sp, #16
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f001 fa6e 	bl	800248e <null_ptr_check>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d120      	bne.n	8001000 <bme680_init+0x5c>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f8ec 	bl	800119c <bme680_soft_reset>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d117      	bne.n	8001000 <bme680_init+0x5c>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	20d0      	movs	r0, #208	@ 0xd0
 8000fd8:	f000 f818 	bl	800100c <bme680_get_regs>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10b      	bne.n	8001000 <bme680_init+0x5c>
				if (dev->chip_id == BME680_CHIP_ID) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b61      	cmp	r3, #97	@ 0x61
 8000fee:	d105      	bne.n	8000ffc <bme680_init+0x58>
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fbd3 	bl	800179c <get_calib_data>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e001      	b.n	8001000 <bme680_init+0x5c>
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 8000ffc:	23fd      	movs	r3, #253	@ 0xfd
 8000ffe:	73fb      	strb	r3, [r7, #15]
				}
			}
		}
	}

	return rslt;
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	4613      	mov	r3, r2
 800101c:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f001 fa35 	bl	800248e <null_ptr_check>
 8001024:	4603      	mov	r3, r0
 8001026:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME680_OK) {
 8001028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d126      	bne.n	800107e <bme680_get_regs+0x72>
		if (dev->intf == BME680_SPI_INTF) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	789b      	ldrb	r3, [r3, #2]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10e      	bne.n	8001056 <bme680_get_regs+0x4a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f001 f957 	bl	80022f0 <set_mem_page>
 8001042:	4603      	mov	r3, r0
 8001044:	75fb      	strb	r3, [r7, #23]
			if (rslt == BME680_OK)
 8001046:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <bme680_get_regs+0x4a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001054:	73fb      	strb	r3, [r7, #15]
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7858      	ldrb	r0, [r3, #1]
 800105e:	89bb      	ldrh	r3, [r7, #12]
 8001060:	7bf9      	ldrb	r1, [r7, #15]
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	47a0      	blx	r4
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		if (dev->com_rslt != 0)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <bme680_get_regs+0x72>
			rslt = BME680_E_COM_FAIL;
 800107a:	23fe      	movs	r3, #254	@ 0xfe
 800107c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800107e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001082:	4618      	mov	r0, r3
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}

0800108a <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 800108a:	b5b0      	push	{r4, r5, r7, lr}
 800108c:	b090      	sub	sp, #64	@ 0x40
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4613      	mov	r3, r2
 8001098:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2228      	movs	r2, #40	@ 0x28
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f008 fb6d 	bl	8009782 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010a8:	6838      	ldr	r0, [r7, #0]
 80010aa:	f001 f9f0 	bl	800248e <null_ptr_check>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (rslt == BME680_OK) {
 80010b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d169      	bne.n	8001190 <bme680_set_regs+0x106>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d061      	beq.n	8001186 <bme680_set_regs+0xfc>
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	2b13      	cmp	r3, #19
 80010c6:	d85e      	bhi.n	8001186 <bme680_set_regs+0xfc>
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80010cc:	e034      	b.n	8001138 <bme680_set_regs+0xae>
				if (dev->intf == BME680_SPI_INTF) {
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	789b      	ldrb	r3, [r3, #2]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d118      	bne.n	8001108 <bme680_set_regs+0x7e>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80010d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 f905 	bl	80022f0 <set_mem_page>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80010ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	781a      	ldrb	r2, [r3, #0]
 80010f4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	3340      	adds	r3, #64	@ 0x40
 8001100:	443b      	add	r3, r7
 8001102:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8001106:	e009      	b.n	800111c <bme680_set_regs+0x92>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8001108:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	441a      	add	r2, r3
 800110e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	7812      	ldrb	r2, [r2, #0]
 8001114:	3340      	adds	r3, #64	@ 0x40
 8001116:	443b      	add	r3, r7
 8001118:	f803 2c2c 	strb.w	r2, [r3, #-44]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 800111c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	441a      	add	r2, r3
 8001122:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	3301      	adds	r3, #1
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	3340      	adds	r3, #64	@ 0x40
 800112c:	443b      	add	r3, r7
 800112e:	f803 2c2c 	strb.w	r2, [r3, #-44]
			for (index = 0; index < len; index++) {
 8001132:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001134:	3301      	adds	r3, #1
 8001136:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	b29b      	uxth	r3, r3
 800113c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800113e:	429a      	cmp	r2, r3
 8001140:	d3c5      	bcc.n	80010ce <bme680_set_regs+0x44>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8001142:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001146:	2b00      	cmp	r3, #0
 8001148:	d121      	bne.n	800118e <bme680_set_regs+0x104>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	7858      	ldrb	r0, [r3, #1]
 8001152:	7d39      	ldrb	r1, [r7, #20]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	b29b      	uxth	r3, r3
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b01      	subs	r3, #1
 800115e:	b29d      	uxth	r5, r3
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	462b      	mov	r3, r5
 8001168:	47a0      	blx	r4
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
				if (dev->com_rslt != 0)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <bme680_set_regs+0x104>
					rslt = BME680_E_COM_FAIL;
 800117e:	23fe      	movs	r3, #254	@ 0xfe
 8001180:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			if (rslt == BME680_OK) {
 8001184:	e003      	b.n	800118e <bme680_set_regs+0x104>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8001186:	23fc      	movs	r3, #252	@ 0xfc
 8001188:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800118c:	e000      	b.n	8001190 <bme680_set_regs+0x106>
			if (rslt == BME680_OK) {
 800118e:	bf00      	nop
		}
	}

	return rslt;
 8001190:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001194:	4618      	mov	r0, r3
 8001196:	3740      	adds	r7, #64	@ 0x40
 8001198:	46bd      	mov	sp, r7
 800119a:	bdb0      	pop	{r4, r5, r7, pc}

0800119c <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 80011a4:	23e0      	movs	r3, #224	@ 0xe0
 80011a6:	73bb      	strb	r3, [r7, #14]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 80011a8:	23b6      	movs	r3, #182	@ 0xb6
 80011aa:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f001 f96e 	bl	800248e <null_ptr_check>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d127      	bne.n	800120e <bme680_soft_reset+0x72>
		if (dev->intf == BME680_SPI_INTF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	789b      	ldrb	r3, [r3, #2]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d104      	bne.n	80011d0 <bme680_soft_reset+0x34>
			rslt = get_mem_page(dev);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 f8f7 	bl	80023ba <get_mem_page>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]

		/* Reset the device */
		if (rslt == BME680_OK) {
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d11a      	bne.n	800120e <bme680_soft_reset+0x72>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011d8:	f107 010d 	add.w	r1, r7, #13
 80011dc:	f107 000e 	add.w	r0, r7, #14
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f7ff ff51 	bl	800108a <bme680_set_regs>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011f0:	200a      	movs	r0, #10
 80011f2:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80011f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d108      	bne.n	800120e <bme680_soft_reset+0x72>
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d104      	bne.n	800120e <bme680_soft_reset+0x72>
					rslt = get_mem_page(dev);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f001 f8d8 	bl	80023ba <get_mem_page>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b088      	sub	sp, #32
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	6039      	str	r1, [r7, #0]
 8001224:	80fb      	strh	r3, [r7, #6]
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	76fb      	strb	r3, [r7, #27]
	uint8_t count = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	77bb      	strb	r3, [r7, #30]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	809a      	strh	r2, [r3, #4]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	809a      	strh	r2, [r3, #4]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001248:	777b      	strb	r3, [r7, #29]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f001 f91f 	bl	800248e <null_ptr_check>
 8001250:	4603      	mov	r3, r0
 8001252:	77fb      	strb	r3, [r7, #31]
	if (rslt == BME680_OK) {
 8001254:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f040 81a6 	bne.w	80015aa <bme680_set_sensor_settings+0x390>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <bme680_set_sensor_settings+0x58>
			rslt = set_gas_config(dev);
 8001268:	6838      	ldr	r0, [r7, #0]
 800126a:	f000 fbcc 	bl	8001a06 <set_gas_config>
 800126e:	4603      	mov	r3, r0
 8001270:	77fb      	strb	r3, [r7, #31]

		dev->power_mode = BME680_SLEEP_MODE;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		if (rslt == BME680_OK)
 800127a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d104      	bne.n	800128c <bme680_set_sensor_settings+0x72>
			rslt = bme680_set_sensor_mode(dev);
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f000 f997 	bl	80015b6 <bme680_set_sensor_mode>
 8001288:	4603      	mov	r3, r0
 800128a:	77fb      	strb	r3, [r7, #31]

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03e      	beq.n	8001314 <bme680_set_sensor_settings+0xfa>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f103 003b 	add.w	r0, r3, #59	@ 0x3b
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2207      	movs	r2, #7
 80012a0:	2100      	movs	r1, #0
 80012a2:	f001 f8b9 	bl	8002418 <boundary_check>
 80012a6:	4603      	mov	r3, r0
 80012a8:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_ODR_FILT_ADDR;
 80012aa:	2375      	movs	r3, #117	@ 0x75
 80012ac:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80012ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d108      	bne.n	80012c8 <bme680_set_sensor_settings+0xae>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80012b6:	f107 011b 	add.w	r1, r7, #27
 80012ba:	7f38      	ldrb	r0, [r7, #28]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2201      	movs	r2, #1
 80012c0:	f7ff fea4 	bl	800100c <bme680_get_regs>
 80012c4:	4603      	mov	r3, r0
 80012c6:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_FILTER_SEL)
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d011      	beq.n	80012f6 <bme680_set_sensor_settings+0xdc>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80012d2:	7efb      	ldrb	r3, [r7, #27]
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	f023 031c 	bic.w	r3, r3, #28
 80012da:	b25a      	sxtb	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	f003 031c 	and.w	r3, r3, #28
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 80012f6:	7fbb      	ldrb	r3, [r7, #30]
 80012f8:	3320      	adds	r3, #32
 80012fa:	443b      	add	r3, r7
 80012fc:	7f3a      	ldrb	r2, [r7, #28]
 80012fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001302:	7fbb      	ldrb	r3, [r7, #30]
 8001304:	7efa      	ldrb	r2, [r7, #27]
 8001306:	3320      	adds	r3, #32
 8001308:	443b      	add	r3, r7
 800130a:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 800130e:	7fbb      	ldrb	r3, [r7, #30]
 8001310:	3301      	adds	r3, #1
 8001312:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b00      	cmp	r3, #0
 800131c:	d037      	beq.n	800138e <bme680_set_sensor_settings+0x174>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	f103 003d 	add.w	r0, r3, #61	@ 0x3d
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2208      	movs	r2, #8
 8001328:	2100      	movs	r1, #0
 800132a:	f001 f875 	bl	8002418 <boundary_check>
 800132e:	4603      	mov	r3, r0
 8001330:	77fb      	strb	r3, [r7, #31]
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;
 8001332:	2370      	movs	r3, #112	@ 0x70
 8001334:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001336:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d108      	bne.n	8001350 <bme680_set_sensor_settings+0x136>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800133e:	f107 011b 	add.w	r1, r7, #27
 8001342:	7f38      	ldrb	r0, [r7, #28]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2201      	movs	r2, #1
 8001348:	f7ff fe60 	bl	800100c <bme680_get_regs>
 800134c:	4603      	mov	r3, r0
 800134e:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8001350:	7efb      	ldrb	r3, [r7, #27]
 8001352:	b25b      	sxtb	r3, r3
 8001354:	f023 0308 	bic.w	r3, r3, #8
 8001358:	b25a      	sxtb	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001360:	b25b      	sxtb	r3, r3
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	b25b      	sxtb	r3, r3
 8001368:	4313      	orrs	r3, r2
 800136a:	b25b      	sxtb	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001370:	7fbb      	ldrb	r3, [r7, #30]
 8001372:	3320      	adds	r3, #32
 8001374:	443b      	add	r3, r7
 8001376:	7f3a      	ldrb	r2, [r7, #28]
 8001378:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800137c:	7fbb      	ldrb	r3, [r7, #30]
 800137e:	7efa      	ldrb	r2, [r7, #27]
 8001380:	3320      	adds	r3, #32
 8001382:	443b      	add	r3, r7
 8001384:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001388:	7fbb      	ldrb	r3, [r7, #30]
 800138a:	3301      	adds	r3, #1
 800138c:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d052      	beq.n	800143e <bme680_set_sensor_settings+0x224>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f103 0039 	add.w	r0, r3, #57	@ 0x39
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2205      	movs	r2, #5
 80013a2:	2100      	movs	r1, #0
 80013a4:	f001 f838 	bl	8002418 <boundary_check>
 80013a8:	4603      	mov	r3, r0
 80013aa:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80013ac:	2374      	movs	r3, #116	@ 0x74
 80013ae:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80013b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d108      	bne.n	80013ca <bme680_set_sensor_settings+0x1b0>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80013b8:	f107 011b 	add.w	r1, r7, #27
 80013bc:	7f38      	ldrb	r0, [r7, #28]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f7ff fe23 	bl	800100c <bme680_get_regs>
 80013c6:	4603      	mov	r3, r0
 80013c8:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_OST_SEL)
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00e      	beq.n	80013f2 <bme680_set_sensor_settings+0x1d8>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80013d4:	7efb      	ldrb	r3, [r7, #27]
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	015b      	lsls	r3, r3, #5
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_OSP_SEL)
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d011      	beq.n	8001420 <bme680_set_sensor_settings+0x206>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80013fc:	7efb      	ldrb	r3, [r7, #27]
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	f023 031c 	bic.w	r3, r3, #28
 8001404:	b25a      	sxtb	r2, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800140c:	b25b      	sxtb	r3, r3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	f003 031c 	and.w	r3, r3, #28
 8001416:	b25b      	sxtb	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b25b      	sxtb	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr;
 8001420:	7fbb      	ldrb	r3, [r7, #30]
 8001422:	3320      	adds	r3, #32
 8001424:	443b      	add	r3, r7
 8001426:	7f3a      	ldrb	r2, [r7, #28]
 8001428:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 800142c:	7fbb      	ldrb	r3, [r7, #30]
 800142e:	7efa      	ldrb	r2, [r7, #27]
 8001430:	3320      	adds	r3, #32
 8001432:	443b      	add	r3, r7
 8001434:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001438:	7fbb      	ldrb	r3, [r7, #30]
 800143a:	3301      	adds	r3, #1
 800143c:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d037      	beq.n	80014b8 <bme680_set_sensor_settings+0x29e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2205      	movs	r2, #5
 8001452:	2100      	movs	r1, #0
 8001454:	f000 ffe0 	bl	8002418 <boundary_check>
 8001458:	4603      	mov	r3, r0
 800145a:	77fb      	strb	r3, [r7, #31]
			reg_addr = BME680_CONF_OS_H_ADDR;
 800145c:	2372      	movs	r3, #114	@ 0x72
 800145e:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 8001460:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d108      	bne.n	800147a <bme680_set_sensor_settings+0x260>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8001468:	f107 011b 	add.w	r1, r7, #27
 800146c:	7f38      	ldrb	r0, [r7, #28]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2201      	movs	r2, #1
 8001472:	f7ff fdcb 	bl	800100c <bme680_get_regs>
 8001476:	4603      	mov	r3, r0
 8001478:	77fb      	strb	r3, [r7, #31]
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 800147a:	7efb      	ldrb	r3, [r7, #27]
 800147c:	b25b      	sxtb	r3, r3
 800147e:	f023 0307 	bic.w	r3, r3, #7
 8001482:	b25a      	sxtb	r2, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800148a:	b25b      	sxtb	r3, r3
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	b25b      	sxtb	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b25b      	sxtb	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 800149a:	7fbb      	ldrb	r3, [r7, #30]
 800149c:	3320      	adds	r3, #32
 800149e:	443b      	add	r3, r7
 80014a0:	7f3a      	ldrb	r2, [r7, #28]
 80014a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 80014a6:	7fbb      	ldrb	r3, [r7, #30]
 80014a8:	7efa      	ldrb	r2, [r7, #27]
 80014aa:	3320      	adds	r3, #32
 80014ac:	443b      	add	r3, r7
 80014ae:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 80014b2:	7fbb      	ldrb	r3, [r7, #30]
 80014b4:	3301      	adds	r3, #1
 80014b6:	77bb      	strb	r3, [r7, #30]
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d061      	beq.n	8001586 <bme680_set_sensor_settings+0x36c>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f103 003e 	add.w	r0, r3, #62	@ 0x3e
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	2100      	movs	r1, #0
 80014ce:	f000 ffa3 	bl	8002418 <boundary_check>
 80014d2:	4603      	mov	r3, r0
 80014d4:	77fb      	strb	r3, [r7, #31]
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 80014d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d109      	bne.n	80014f2 <bme680_set_sensor_settings+0x2d8>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	220a      	movs	r2, #10
 80014e8:	2100      	movs	r1, #0
 80014ea:	f000 ff95 	bl	8002418 <boundary_check>
 80014ee:	4603      	mov	r3, r0
 80014f0:	77fb      	strb	r3, [r7, #31]
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;
 80014f2:	2371      	movs	r3, #113	@ 0x71
 80014f4:	773b      	strb	r3, [r7, #28]

			if (rslt == BME680_OK)
 80014f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d108      	bne.n	8001510 <bme680_set_sensor_settings+0x2f6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80014fe:	f107 011b 	add.w	r1, r7, #27
 8001502:	7f38      	ldrb	r0, [r7, #28]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2201      	movs	r2, #1
 8001508:	f7ff fd80 	bl	800100c <bme680_get_regs>
 800150c:	4603      	mov	r3, r0
 800150e:	77fb      	strb	r3, [r7, #31]

			if (desired_settings & BME680_RUN_GAS_SEL)
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d011      	beq.n	800153e <bme680_set_sensor_settings+0x324>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 800151a:	7efb      	ldrb	r3, [r7, #27]
 800151c:	b25b      	sxtb	r3, r3
 800151e:	f023 0310 	bic.w	r3, r3, #16
 8001522:	b25a      	sxtb	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800152a:	b25b      	sxtb	r3, r3
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	b25b      	sxtb	r3, r3
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	b25b      	sxtb	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b25b      	sxtb	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	76fb      	strb	r3, [r7, #27]

			if (desired_settings & BME680_NBCONV_SEL)
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00f      	beq.n	8001568 <bme680_set_sensor_settings+0x34e>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8001548:	7efb      	ldrb	r3, [r7, #27]
 800154a:	b25b      	sxtb	r3, r3
 800154c:	f023 030f 	bic.w	r3, r3, #15
 8001550:	b25a      	sxtb	r2, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001558:	b25b      	sxtb	r3, r3
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	b25b      	sxtb	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b25b      	sxtb	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	76fb      	strb	r3, [r7, #27]

			reg_array[count] = reg_addr; /* Append configuration */
 8001568:	7fbb      	ldrb	r3, [r7, #30]
 800156a:	3320      	adds	r3, #32
 800156c:	443b      	add	r3, r7
 800156e:	7f3a      	ldrb	r2, [r7, #28]
 8001570:	f803 2c0c 	strb.w	r2, [r3, #-12]
			data_array[count] = data;
 8001574:	7fbb      	ldrb	r3, [r7, #30]
 8001576:	7efa      	ldrb	r2, [r7, #27]
 8001578:	3320      	adds	r3, #32
 800157a:	443b      	add	r3, r7
 800157c:	f803 2c14 	strb.w	r2, [r3, #-20]
			count++;
 8001580:	7fbb      	ldrb	r3, [r7, #30]
 8001582:	3301      	adds	r3, #1
 8001584:	77bb      	strb	r3, [r7, #30]
		}

		if (rslt == BME680_OK)
 8001586:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <bme680_set_sensor_settings+0x388>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 800158e:	7fba      	ldrb	r2, [r7, #30]
 8001590:	f107 010c 	add.w	r1, r7, #12
 8001594:	f107 0014 	add.w	r0, r7, #20
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f7ff fd76 	bl	800108a <bme680_set_regs>
 800159e:	4603      	mov	r3, r0
 80015a0:	77fb      	strb	r3, [r7, #31]

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	7f7a      	ldrb	r2, [r7, #29]
 80015a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}

	return rslt;
 80015aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	73bb      	strb	r3, [r7, #14]
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80015c2:	2374      	movs	r3, #116	@ 0x74
 80015c4:	733b      	strb	r3, [r7, #12]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 ff61 	bl	800248e <null_ptr_check>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d14c      	bne.n	8001672 <bme680_set_sensor_mode+0xbc>
		/* Call repeatedly until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80015d8:	f107 010d 	add.w	r1, r7, #13
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	2074      	movs	r0, #116	@ 0x74
 80015e2:	f7ff fd13 	bl	800100c <bme680_get_regs>
 80015e6:	4603      	mov	r3, r0
 80015e8:	73fb      	strb	r3, [r7, #15]
			if (rslt == BME680_OK) {
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d119      	bne.n	8001626 <bme680_set_sensor_mode+0x70>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80015f2:	7b7b      	ldrb	r3, [r7, #13]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	73bb      	strb	r3, [r7, #14]

				if (pow_mode != BME680_SLEEP_MODE) {
 80015fa:	7bbb      	ldrb	r3, [r7, #14]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d012      	beq.n	8001626 <bme680_set_sensor_mode+0x70>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	f023 0303 	bic.w	r3, r3, #3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	737b      	strb	r3, [r7, #13]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800160a:	f107 010d 	add.w	r1, r7, #13
 800160e:	f107 000c 	add.w	r0, r7, #12
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f7ff fd38 	bl	800108a <bme680_set_regs>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001622:	200a      	movs	r0, #10
 8001624:	4798      	blx	r3
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8001626:	7bbb      	ldrb	r3, [r7, #14]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1d5      	bne.n	80015d8 <bme680_set_sensor_mode+0x22>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01d      	beq.n	8001672 <bme680_set_sensor_mode+0xbc>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8001636:	7b7b      	ldrb	r3, [r7, #13]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	b25a      	sxtb	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001646:	b25b      	sxtb	r3, r3
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	b25b      	sxtb	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b25b      	sxtb	r3, r3
 8001652:	b2db      	uxtb	r3, r3
 8001654:	737b      	strb	r3, [r7, #13]
			if (rslt == BME680_OK)
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d109      	bne.n	8001672 <bme680_set_sensor_mode+0xbc>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800165e:	f107 010d 	add.w	r1, r7, #13
 8001662:	f107 000c 	add.w	r0, r7, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f7ff fd0e 	bl	800108a <bme680_set_regs>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 800168a:	4a2c      	ldr	r2, [pc, #176]	@ (800173c <bme680_get_profile_dur+0xbc>)
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001694:	6018      	str	r0, [r3, #0]
 8001696:	3304      	adds	r3, #4
 8001698:	8019      	strh	r1, [r3, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80016a0:	3318      	adds	r3, #24
 80016a2:	443b      	add	r3, r7
 80016a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016a8:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80016b0:	3318      	adds	r3, #24
 80016b2:	443b      	add	r3, r7
 80016b4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016b8:	461a      	mov	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	4413      	add	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016c6:	3318      	adds	r3, #24
 80016c8:	443b      	add	r3, r7
 80016ca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016ce:	461a      	mov	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	4413      	add	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 80016e8:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 80016f0:	613b      	str	r3, [r7, #16]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80016f8:	613b      	str	r3, [r7, #16]
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <bme680_get_profile_dur+0xc0>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	099b      	lsrs	r3, r3, #6
 8001704:	613b      	str	r3, [r7, #16]

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	3301      	adds	r3, #1
 800170a:	613b      	str	r3, [r7, #16]

	*duration = (uint16_t) tph_dur;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	b29a      	uxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	801a      	strh	r2, [r3, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <bme680_get_profile_dur+0xb0>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	881a      	ldrh	r2, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001728:	4413      	add	r3, r2
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	801a      	strh	r2, [r3, #0]
	}
}
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	0800b938 	.word	0x0800b938
 8001740:	10624dd3 	.word	0x10624dd3

08001744 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800174e:	6838      	ldr	r0, [r7, #0]
 8001750:	f000 fe9d 	bl	800248e <null_ptr_check>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d117      	bne.n	8001790 <bme680_get_sensor_data+0x4c>
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fd0f 	bl	8002186 <read_field_data>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME680_OK) {
 800176c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10d      	bne.n	8001790 <bme680_get_sensor_data+0x4c>
			if (data->status & BME680_NEW_DATA_MSK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	da04      	bge.n	8001788 <bme680_get_sensor_data+0x44>
				dev->new_fields = 1;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001786:	e003      	b.n	8001790 <bme680_get_sensor_data+0x4c>
			else
				dev->new_fields = 0;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
		}
	}

	return rslt;
 8001790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <get_calib_data>:

/*!
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08e      	sub	sp, #56	@ 0x38
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2229      	movs	r2, #41	@ 0x29
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f007 ffe8 	bl	8009782 <memset>
	uint8_t temp_var = 0; /* Temporary variable */
 80017b2:	2300      	movs	r3, #0
 80017b4:	72fb      	strb	r3, [r7, #11]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fe69 	bl	800248e <null_ptr_check>
 80017bc:	4603      	mov	r3, r0
 80017be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (rslt == BME680_OK) {
 80017c2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 8117 	bne.w	80019fa <get_calib_data+0x25e>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 80017cc:	f107 010c 	add.w	r1, r7, #12
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2219      	movs	r2, #25
 80017d4:	2089      	movs	r0, #137	@ 0x89
 80017d6:	f7ff fc19 	bl	800100c <bme680_get_regs>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 80017e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10b      	bne.n	8001800 <get_calib_data+0x64>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	f103 0119 	add.w	r1, r3, #25
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2210      	movs	r2, #16
 80017f4:	20e1      	movs	r0, #225	@ 0xe1
 80017f6:	f7ff fc09 	bl	800100c <bme680_get_regs>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8001800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001804:	b21b      	sxth	r3, r3
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	b21a      	sxth	r2, r3
 800180a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800180e:	b21b      	sxth	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	b21b      	sxth	r3, r3
 8001814:	b29a      	uxth	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	82da      	strh	r2, [r3, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 800181a:	7bbb      	ldrb	r3, [r7, #14]
 800181c:	b21b      	sxth	r3, r3
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	b21a      	sxth	r2, r3
 8001822:	7b7b      	ldrb	r3, [r7, #13]
 8001824:	b21b      	sxth	r3, r3
 8001826:	4313      	orrs	r3, r2
 8001828:	b21a      	sxth	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	831a      	strh	r2, [r3, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	b25a      	sxtb	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	769a      	strb	r2, [r3, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8001836:	7cbb      	ldrb	r3, [r7, #18]
 8001838:	b21b      	sxth	r3, r3
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	b21a      	sxth	r2, r3
 800183e:	7c7b      	ldrb	r3, [r7, #17]
 8001840:	b21b      	sxth	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b21b      	sxth	r3, r3
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	839a      	strh	r2, [r3, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 800184c:	7d3b      	ldrb	r3, [r7, #20]
 800184e:	b21b      	sxth	r3, r3
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	7cfb      	ldrb	r3, [r7, #19]
 8001856:	b21b      	sxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	b21a      	sxth	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	83da      	strh	r2, [r3, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8001860:	7d7b      	ldrb	r3, [r7, #21]
 8001862:	b25a      	sxtb	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f883 2020 	strb.w	r2, [r3, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 800186a:	7e3b      	ldrb	r3, [r7, #24]
 800186c:	b21b      	sxth	r3, r3
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21a      	sxth	r2, r3
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	b21b      	sxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	b21a      	sxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	845a      	strh	r2, [r3, #34]	@ 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 800187e:	7ebb      	ldrb	r3, [r7, #26]
 8001880:	b21b      	sxth	r3, r3
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	b21a      	sxth	r2, r3
 8001886:	7e7b      	ldrb	r3, [r7, #25]
 8001888:	b21b      	sxth	r3, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	b21a      	sxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	849a      	strh	r2, [r3, #36]	@ 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8001892:	7f3b      	ldrb	r3, [r7, #28]
 8001894:	b25a      	sxtb	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 800189c:	7efb      	ldrb	r3, [r7, #27]
 800189e:	b25a      	sxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80018a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	7ffb      	ldrb	r3, [r7, #31]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	851a      	strh	r2, [r3, #40]	@ 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80018bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80018d4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b21b      	sxth	r3, r3
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	811a      	strh	r2, [r3, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80018fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8001902:	b21b      	sxth	r3, r3
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	b21a      	sxth	r2, r3
 8001908:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	b2db      	uxtb	r3, r3
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21b      	sxth	r3, r3
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8001916:	b29a      	uxth	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	815a      	strh	r2, [r3, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 800191c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001920:	b25a      	sxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	731a      	strb	r2, [r3, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8001926:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800192a:	b25a      	sxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	735a      	strb	r2, [r3, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8001930:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001934:	b25a      	sxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	739a      	strb	r2, [r3, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 800193a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	73da      	strb	r2, [r3, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8001942:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001946:	b25a      	sxtb	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	741a      	strb	r2, [r3, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 800194c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001950:	b25a      	sxtb	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	745a      	strb	r2, [r3, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8001956:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800195a:	b21b      	sxth	r3, r3
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21a      	sxth	r2, r3
 8001960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001964:	b21b      	sxth	r3, r3
 8001966:	4313      	orrs	r3, r2
 8001968:	b21a      	sxth	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	825a      	strh	r2, [r3, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 800196e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001972:	b25a      	sxtb	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	751a      	strb	r2, [r3, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 8001978:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800197c:	2b00      	cmp	r3, #0
 800197e:	d135      	bne.n	80019ec <get_calib_data+0x250>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8001980:	f107 010b 	add.w	r1, r7, #11
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	2002      	movs	r0, #2
 800198a:	f7ff fb3f 	bl	800100c <bme680_get_regs>
 800198e:	4603      	mov	r3, r0
 8001990:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8001994:	7afb      	ldrb	r3, [r7, #11]
 8001996:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800199a:	2b00      	cmp	r3, #0
 800199c:	da00      	bge.n	80019a0 <get_calib_data+0x204>
 800199e:	330f      	adds	r3, #15
 80019a0:	111b      	asrs	r3, r3, #4
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if (rslt == BME680_OK) {
 80019aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d11c      	bne.n	80019ec <get_calib_data+0x250>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 80019b2:	f107 010b 	add.w	r1, r7, #11
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff fb26 	bl	800100c <bme680_get_regs>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				dev->calib.res_heat_val = (int8_t) temp_var;
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	b25a      	sxtb	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				if (rslt == BME680_OK)
 80019d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <get_calib_data+0x250>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 80019d8:	f107 010b 	add.w	r1, r7, #11
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	2004      	movs	r0, #4
 80019e2:	f7ff fb13 	bl	800100c <bme680_get_regs>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 80019ec:	7afb      	ldrb	r3, [r7, #11]
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	111b      	asrs	r3, r3, #4
 80019f2:	b25a      	sxtb	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	}

	return rslt;
 80019fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3738      	adds	r7, #56	@ 0x38
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <set_gas_config>:

/*!
 * @brief This internal API is used to set the gas configuration of the sensor.
 */
static int8_t set_gas_config(struct bme680_dev *dev)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fd3d 	bl	800248e <null_ptr_check>
 8001a14:	4603      	mov	r3, r0
 8001a16:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d132      	bne.n	8001a86 <set_gas_config+0x80>

		uint8_t reg_addr[2] = {0};
 8001a20:	2300      	movs	r3, #0
 8001a22:	81bb      	strh	r3, [r7, #12]
		uint8_t reg_data[2] = {0};
 8001a24:	2300      	movs	r3, #0
 8001a26:	813b      	strh	r3, [r7, #8]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d119      	bne.n	8001a66 <set_gas_config+0x60>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8001a32:	235a      	movs	r3, #90	@ 0x5a
 8001a34:	733b      	strb	r3, [r7, #12]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fb00 	bl	8002044 <calc_heater_res>
 8001a44:	4603      	mov	r3, r0
 8001a46:	723b      	strb	r3, [r7, #8]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8001a48:	2364      	movs	r3, #100	@ 0x64
 8001a4a:	737b      	strb	r3, [r7, #13]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fb72 	bl	800213c <calc_heater_dur>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	727b      	strb	r3, [r7, #9]
			dev->gas_sett.nb_conv = 0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001a64:	e001      	b.n	8001a6a <set_gas_config+0x64>
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
 8001a66:	2301      	movs	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
		}
		if (rslt == BME680_OK)
 8001a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <set_gas_config+0x80>
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8001a72:	f107 0108 	add.w	r1, r7, #8
 8001a76:	f107 000c 	add.w	r0, r7, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	f7ff fb04 	bl	800108a <bme680_set_regs>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 8001a92:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a96:	b091      	sub	sp, #68	@ 0x44
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	61f8      	str	r0, [r7, #28]
 8001a9c:	61b9      	str	r1, [r7, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	10da      	asrs	r2, r3, #3
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	8adb      	ldrh	r3, [r3, #22]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ab4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	17da      	asrs	r2, r3, #31
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	617a      	str	r2, [r7, #20]
 8001ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001acc:	460a      	mov	r2, r1
 8001ace:	fb02 f203 	mul.w	r2, r2, r3
 8001ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ad4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001ad8:	4601      	mov	r1, r0
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ae2:	6939      	ldr	r1, [r7, #16]
 8001ae4:	fba2 4501 	umull	r4, r5, r2, r1
 8001ae8:	442b      	add	r3, r5
 8001aea:	461d      	mov	r5, r3
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	0ae2      	lsrs	r2, r4, #11
 8001af6:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8001afa:	12eb      	asrs	r3, r5, #11
 8001afc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8001b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b04:	f04f 0000 	mov.w	r0, #0
 8001b08:	f04f 0100 	mov.w	r1, #0
 8001b0c:	0850      	lsrs	r0, r2, #1
 8001b0e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8001b12:	1059      	asrs	r1, r3, #1
 8001b14:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	0862      	lsrs	r2, r4, #1
 8001b22:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8001b26:	106b      	asrs	r3, r5, #1
 8001b28:	fb02 f501 	mul.w	r5, r2, r1
 8001b2c:	fb00 f403 	mul.w	r4, r0, r3
 8001b30:	442c      	add	r4, r5
 8001b32:	fba0 ab02 	umull	sl, fp, r0, r2
 8001b36:	eb04 030b 	add.w	r3, r4, fp
 8001b3a:	469b      	mov	fp, r3
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	ea4f 321a 	mov.w	r2, sl, lsr #12
 8001b48:	ea42 520b 	orr.w	r2, r2, fp, lsl #20
 8001b4c:	ea4f 332b 	mov.w	r3, fp, asr #12
 8001b50:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	17da      	asrs	r2, r3, #31
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	60fa      	str	r2, [r7, #12]
 8001b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b64:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b68:	462a      	mov	r2, r5
 8001b6a:	fb02 f203 	mul.w	r2, r2, r3
 8001b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b70:	4621      	mov	r1, r4
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	fba2 8901 	umull	r8, r9, r2, r1
 8001b80:	444b      	add	r3, r9
 8001b82:	4699      	mov	r9, r3
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	ea4f 3298 	mov.w	r2, r8, lsr #14
 8001b90:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 8001b94:	ea4f 33a9 	mov.w	r3, r9, asr #14
 8001b98:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8001b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba0:	4413      	add	r3, r2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	631a      	str	r2, [r3, #48]	@ 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3380      	adds	r3, #128	@ 0x80
 8001bb4:	121b      	asrs	r3, r3, #8
 8001bb6:	84fb      	strh	r3, [r7, #38]	@ 0x26

	return calc_temp;
 8001bb8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3744      	adds	r7, #68	@ 0x44
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001bc6:	4770      	bx	lr

08001bc8 <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t var3;
	int32_t pressure_comp;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	105b      	asrs	r3, r3, #1
 8001bd8:	f5a3 437a 	sub.w	r3, r3, #64000	@ 0xfa00
 8001bdc:	613b      	str	r3, [r7, #16]
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	109b      	asrs	r3, r3, #2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	1092      	asrs	r2, r2, #2
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	12db      	asrs	r3, r3, #11
		(int32_t)dev->calib.par_p6) >> 2;
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	f992 2026 	ldrsb.w	r2, [r2, #38]	@ 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	109b      	asrs	r3, r3, #2
 8001bf8:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001c00:	461a      	mov	r2, r3
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	109a      	asrs	r2, r3, #2
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001c1a:	041b      	lsls	r3, r3, #16
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	109b      	asrs	r3, r3, #2
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	1092      	asrs	r2, r2, #2
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	135b      	asrs	r3, r3, #13
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	f992 2020 	ldrsb.w	r2, [r2, #32]
 8001c34:	0152      	lsls	r2, r2, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8001c3a:	10da      	asrs	r2, r3, #3
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c42:	4619      	mov	r1, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	105b      	asrs	r3, r3, #1
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8001c4c:	4413      	add	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
	var1 = var1 >> 18;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	149b      	asrs	r3, r3, #18
 8001c54:	613b      	str	r3, [r7, #16]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	8b92      	ldrh	r2, [r2, #28]
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	13db      	asrs	r3, r3, #15
 8001c66:	613b      	str	r3, [r7, #16]
	pressure_comp = 1048576 - pres_adc;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001c6e:	617b      	str	r3, [r7, #20]
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	131b      	asrs	r3, r3, #12
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f640 4335 	movw	r3, #3125	@ 0xc35
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
	if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8a:	db06      	blt.n	8001c9a <calc_pressure+0xd2>
		pressure_comp = ((pressure_comp / var1) << 1);
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e005      	b.n	8001ca6 <calc_pressure+0xde>
	else
		pressure_comp = ((pressure_comp << 1) / var1);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	005a      	lsls	r2, r3, #1
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001cac:	4619      	mov	r1, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	10db      	asrs	r3, r3, #3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	10d2      	asrs	r2, r2, #3
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001cb6:	fb02 f303 	mul.w	r3, r2, r3
		(pressure_comp >> 3)) >> 13)) >> 12;
 8001cba:	135b      	asrs	r3, r3, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	131b      	asrs	r3, r3, #12
 8001cc2:	613b      	str	r3, [r7, #16]
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	109b      	asrs	r3, r3, #2
		(int32_t)dev->calib.par_p8) >> 13;
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	@ 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	135b      	asrs	r3, r3, #13
 8001cd4:	60fb      	str	r3, [r7, #12]
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	121b      	asrs	r3, r3, #8
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	1212      	asrs	r2, r2, #8
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)(pressure_comp >> 8) *
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	1212      	asrs	r2, r2, #8
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
		(int32_t)dev->calib.par_p10) >> 17;
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
		(int32_t)(pressure_comp >> 8) *
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8001cf4:	145b      	asrs	r3, r3, #17
 8001cf6:	60bb      	str	r3, [r7, #8]

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	441a      	add	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	441a      	add	r2, r3
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f993 3027 	ldrsb.w	r3, [r3, #39]	@ 0x27
 8001d08:	01db      	lsls	r3, r3, #7
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001d0a:	4413      	add	r3, r2
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8001d0c:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	4413      	add	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]

	return (uint32_t)pressure_comp;
 8001d14:	697b      	ldr	r3, [r7, #20]

}
 8001d16:	4618      	mov	r0, r3
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 8001d24:	b490      	push	{r4, r7}
 8001d26:	b08a      	sub	sp, #40	@ 0x28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6039      	str	r1, [r7, #0]
 8001d2e:	80fb      	strh	r3, [r7, #6]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3380      	adds	r3, #128	@ 0x80
 8001d3c:	121b      	asrs	r3, r3, #8
 8001d3e:	623b      	str	r3, [r7, #32]
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001d40:	88fa      	ldrh	r2, [r7, #6]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	891b      	ldrh	r3, [r3, #8]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	1ad2      	subs	r2, r2, r3
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001d50:	4619      	mov	r1, r3
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	493d      	ldr	r1, [pc, #244]	@ (8001e50 <calc_humidity+0x12c>)
 8001d5a:	fb81 0103 	smull	r0, r1, r1, r3
 8001d5e:	1149      	asrs	r1, r1, #5
 8001d60:	17db      	asrs	r3, r3, #31
 8001d62:	1acb      	subs	r3, r1, r3
 8001d64:	105b      	asrs	r3, r3, #1
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	61fb      	str	r3, [r7, #28]
	var2 = ((int32_t) dev->calib.par_h2
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	895b      	ldrh	r3, [r3, #10]
 8001d6e:	4618      	mov	r0, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8001d76:	461a      	mov	r2, r3
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	4a34      	ldr	r2, [pc, #208]	@ (8001e50 <calc_humidity+0x12c>)
 8001d80:	fb82 1203 	smull	r1, r2, r2, r3
 8001d84:	1152      	asrs	r2, r2, #5
 8001d86:	17db      	asrs	r3, r3, #31
 8001d88:	1ad2      	subs	r2, r2, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001d90:	4619      	mov	r1, r3
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	492d      	ldr	r1, [pc, #180]	@ (8001e50 <calc_humidity+0x12c>)
 8001d9a:	fb81 4103 	smull	r4, r1, r1, r3
 8001d9e:	1149      	asrs	r1, r1, #5
 8001da0:	17db      	asrs	r3, r3, #31
 8001da2:	1acb      	subs	r3, r1, r3
 8001da4:	6a39      	ldr	r1, [r7, #32]
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	119b      	asrs	r3, r3, #6
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001dac:	4928      	ldr	r1, [pc, #160]	@ (8001e50 <calc_humidity+0x12c>)
 8001dae:	fb81 4103 	smull	r4, r1, r1, r3
 8001db2:	1149      	asrs	r1, r1, #5
 8001db4:	17db      	asrs	r3, r3, #31
 8001db6:	1acb      	subs	r3, r1, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8001db8:	4413      	add	r3, r2
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8001dba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8001dbe:	fb00 f303 	mul.w	r3, r0, r3
	var2 = ((int32_t) dev->calib.par_h2
 8001dc2:	129b      	asrs	r3, r3, #10
 8001dc4:	61bb      	str	r3, [r7, #24]
	var3 = var1 * var2;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	7bdb      	ldrb	r3, [r3, #15]
 8001dd4:	01db      	lsls	r3, r3, #7
 8001dd6:	613b      	str	r3, [r7, #16]
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8001dde:	461a      	mov	r2, r3
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e50 <calc_humidity+0x12c>)
 8001de8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dec:	1152      	asrs	r2, r2, #5
 8001dee:	17db      	asrs	r3, r3, #31
 8001df0:	1ad2      	subs	r2, r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	111b      	asrs	r3, r3, #4
 8001df8:	613b      	str	r3, [r7, #16]
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	139b      	asrs	r3, r3, #14
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	1392      	asrs	r2, r2, #14
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	129b      	asrs	r3, r3, #10
 8001e08:	60fb      	str	r3, [r7, #12]
	var6 = (var4 * var5) >> 1;
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
 8001e12:	105b      	asrs	r3, r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	129b      	asrs	r3, r3, #10
 8001e1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	131b      	asrs	r3, r3, #12
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24

	if (calc_hum > 100000) /* Cap at 100%rH */
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	4a09      	ldr	r2, [pc, #36]	@ (8001e54 <calc_humidity+0x130>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	dd02      	ble.n	8001e38 <calc_humidity+0x114>
		calc_hum = 100000;
 8001e32:	4b08      	ldr	r3, [pc, #32]	@ (8001e54 <calc_humidity+0x130>)
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e36:	e004      	b.n	8001e42 <calc_humidity+0x11e>
	else if (calc_hum < 0)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	da01      	bge.n	8001e42 <calc_humidity+0x11e>
		calc_hum = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24

	return (uint32_t) calc_hum;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3728      	adds	r7, #40	@ 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc90      	pop	{r4, r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	51eb851f 	.word	0x51eb851f
 8001e54:	000186a0 	.word	0x000186a0

08001e58 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8001e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e5c:	b0bc      	sub	sp, #240	@ 0xf0
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001e64:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001e68:	460b      	mov	r3, r1
 8001e6a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;
	/**Look up table 1 for the possible gas range values */
	uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 8001e6e:	4b73      	ldr	r3, [pc, #460]	@ (800203c <calc_gas_resistance+0x1e4>)
 8001e70:	f107 0594 	add.w	r5, r7, #148	@ 0x94
 8001e74:	461c      	mov	r4, r3
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e86:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
		UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
		UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
	/**Look up table 2 for the possible gas range values */
	uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 8001e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002040 <calc_gas_resistance+0x1e8>)
 8001e8c:	f107 0554 	add.w	r5, r7, #84	@ 0x54
 8001e90:	461c      	mov	r4, r3
 8001e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ea2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
		UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
		UINT32_C(250000), UINT32_C(125000) };

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ea8:	f993 3036 	ldrsb.w	r3, [r3, #54]	@ 0x36
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	17da      	asrs	r2, r3, #31
 8001eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001eb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001eb4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001eb8:	4622      	mov	r2, r4
 8001eba:	462b      	mov	r3, r5
 8001ebc:	f04f 0000 	mov.w	r0, #0
 8001ec0:	f04f 0100 	mov.w	r1, #0
 8001ec4:	0099      	lsls	r1, r3, #2
 8001ec6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001eca:	0090      	lsls	r0, r2, #2
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	1851      	adds	r1, r2, r1
 8001ed4:	6339      	str	r1, [r7, #48]	@ 0x30
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	eb43 0101 	adc.w	r1, r3, r1
 8001edc:	6379      	str	r1, [r7, #52]	@ 0x34
 8001ede:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001ee2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	18d3      	adds	r3, r2, r3
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eec:	460b      	mov	r3, r1
 8001eee:	f143 0300 	adc.w	r3, r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		((int64_t) lookupTable1[gas_range])) >> 16;
 8001ef4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	33a8      	adds	r3, #168	@ 0xa8
 8001efc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001f00:	4413      	add	r3, r2
 8001f02:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001f06:	2200      	movs	r2, #0
 8001f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f0a:	647a      	str	r2, [r7, #68]	@ 0x44
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8001f0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001f16:	4622      	mov	r2, r4
 8001f18:	fb02 f203 	mul.w	r2, r2, r3
 8001f1c:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
 8001f20:	462b      	mov	r3, r5
 8001f22:	4604      	mov	r4, r0
 8001f24:	460d      	mov	r5, r1
 8001f26:	4621      	mov	r1, r4
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4622      	mov	r2, r4
 8001f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f32:	fba2 8901 	umull	r8, r9, r2, r1
 8001f36:	444b      	add	r3, r9
 8001f38:	4699      	mov	r9, r3
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001f46:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001f4a:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001f4e:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8001f52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f56:	2200      	movs	r2, #0
 8001f58:	623b      	str	r3, [r7, #32]
 8001f5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f68:	4629      	mov	r1, r5
 8001f6a:	03cb      	lsls	r3, r1, #15
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	ea43 4351 	orr.w	r3, r3, r1, lsr #17
 8001f72:	4621      	mov	r1, r4
 8001f74:	03ca      	lsls	r2, r1, #15
 8001f76:	f112 417f 	adds.w	r1, r2, #4278190080	@ 0xff000000
 8001f7a:	61b9      	str	r1, [r7, #24]
 8001f7c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8001f86:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	1889      	adds	r1, r1, r2
 8001f8e:	6139      	str	r1, [r7, #16]
 8001f90:	4629      	mov	r1, r5
 8001f92:	eb43 0101 	adc.w	r1, r3, r1
 8001f96:	6179      	str	r1, [r7, #20]
 8001f98:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f9c:	e9c7 3438 	strd	r3, r4, [r7, #224]	@ 0xe0
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8001fa0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	33a8      	adds	r3, #168	@ 0xa8
 8001fa8:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001fac:	4413      	add	r3, r2
 8001fae:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	60fa      	str	r2, [r7, #12]
 8001fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001fbc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fc0:	462a      	mov	r2, r5
 8001fc2:	fb02 f203 	mul.w	r2, r2, r3
 8001fc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001fca:	4621      	mov	r1, r4
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	fba2 ab01 	umull	sl, fp, r2, r1
 8001fdc:	445b      	add	r3, fp
 8001fde:	469b      	mov	fp, r3
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	ea4f 225a 	mov.w	r2, sl, lsr #9
 8001fec:	ea42 52cb 	orr.w	r2, r2, fp, lsl #23
 8001ff0:	ea4f 236b 	mov.w	r3, fp, asr #9
 8001ff4:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8001ff8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	0842      	lsrs	r2, r0, #1
 8002006:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800200a:	104b      	asrs	r3, r1, #1
 800200c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8002010:	1814      	adds	r4, r2, r0
 8002012:	603c      	str	r4, [r7, #0]
 8002014:	414b      	adcs	r3, r1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800201c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002020:	f7fe fdda 	bl	8000bd8 <__aeabi_ldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4613      	mov	r3, r2
 800202a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

	return calc_gas_res;
 800202e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
}
 8002032:	4618      	mov	r0, r3
 8002034:	37f0      	adds	r7, #240	@ 0xf0
 8002036:	46bd      	mov	sp, r7
 8002038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800203c:	0800b940 	.word	0x0800b940
 8002040:	0800b980 	.word	0x0800b980

08002044 <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	@ 0x2c
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	80fb      	strh	r3, [r7, #6]
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp > 400) /* Cap temperature */
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002056:	d902      	bls.n	800205e <calc_heater_res+0x1a>
		temp = 400;
 8002058:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800205c:	80fb      	strh	r3, [r7, #6]

	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002064:	461a      	mov	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	4a2f      	ldr	r2, [pc, #188]	@ (8002130 <calc_heater_res+0xec>)
 8002072:	fb82 1203 	smull	r1, r2, r2, r3
 8002076:	1192      	asrs	r2, r2, #6
 8002078:	17db      	asrs	r3, r3, #31
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8002086:	f503 7244 	add.w	r2, r3, #784	@ 0x310
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002090:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8002094:	f203 1399 	addw	r3, r3, #409	@ 0x199
 8002098:	88f9      	ldrh	r1, [r7, #6]
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4925      	ldr	r1, [pc, #148]	@ (8002134 <calc_heater_res+0xf0>)
 80020a0:	fb81 0103 	smull	r0, r1, r1, r3
 80020a4:	10c9      	asrs	r1, r1, #3
 80020a6:	17db      	asrs	r3, r3, #31
 80020a8:	1acb      	subs	r3, r1, r3
 80020aa:	f503 1348 	add.w	r3, r3, #3276800	@ 0x320000
 80020ae:	4921      	ldr	r1, [pc, #132]	@ (8002134 <calc_heater_res+0xf0>)
 80020b0:	fb81 0103 	smull	r0, r1, r1, r3
 80020b4:	1089      	asrs	r1, r1, #2
 80020b6:	17db      	asrs	r3, r3, #31
 80020b8:	1acb      	subs	r3, r1, r3
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	623b      	str	r3, [r7, #32]
	var3 = var1 + (var2 / 2);
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	0fda      	lsrs	r2, r3, #31
 80020c4:	4413      	add	r3, r2
 80020c6:	105b      	asrs	r3, r3, #1
 80020c8:	461a      	mov	r2, r3
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	4413      	add	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020d6:	3304      	adds	r3, #4
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	fb92 f3f3 	sdiv	r3, r2, r3
 80020de:	61bb      	str	r3, [r7, #24]
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	f993 3035 	ldrsb.w	r3, [r3, #53]	@ 0x35
 80020e6:	461a      	mov	r2, r3
 80020e8:	4613      	mov	r3, r2
 80020ea:	019b      	lsls	r3, r3, #6
 80020ec:	4413      	add	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80020f6:	617b      	str	r3, [r7, #20]
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002100:	f1a3 02fa 	sub.w	r2, r3, #250	@ 0xfa
 8002104:	4613      	mov	r3, r2
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	4413      	add	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	613b      	str	r3, [r7, #16]
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	3332      	adds	r3, #50	@ 0x32
 8002112:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <calc_heater_res+0xf4>)
 8002114:	fb82 1203 	smull	r1, r2, r2, r3
 8002118:	1152      	asrs	r2, r2, #5
 800211a:	17db      	asrs	r3, r3, #31
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	73fb      	strb	r3, [r7, #15]

	return heatr_res;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	372c      	adds	r7, #44	@ 0x2c
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	10624dd3 	.word	0x10624dd3
 8002134:	66666667 	.word	0x66666667
 8002138:	51eb851f 	.word	0x51eb851f

0800213c <calc_heater_dur>:

/*!
 * @brief This internal API is used to calculate the Heat duration value.
 */
static uint8_t calc_heater_dur(uint16_t dur)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
	uint8_t factor = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
	uint8_t durval;

	if (dur >= 0xfc0) {
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8002150:	d308      	bcc.n	8002164 <calc_heater_dur+0x28>
		durval = 0xff; /* Max duration*/
 8002152:	23ff      	movs	r3, #255	@ 0xff
 8002154:	73bb      	strb	r3, [r7, #14]
 8002156:	e00f      	b.n	8002178 <calc_heater_dur+0x3c>
	} else {
		while (dur > 0x3F) {
			dur = dur / 4;
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	80fb      	strh	r3, [r7, #6]
			factor += 1;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	3301      	adds	r3, #1
 8002162:	73fb      	strb	r3, [r7, #15]
		while (dur > 0x3F) {
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	2b3f      	cmp	r3, #63	@ 0x3f
 8002168:	d8f6      	bhi.n	8002158 <calc_heater_dur+0x1c>
		}
		durval = (uint8_t) (dur + (factor * 64));
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	019b      	lsls	r3, r3, #6
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	73bb      	strb	r3, [r7, #14]
	}

	return durval;
 8002178:	7bbb      	ldrb	r3, [r7, #14]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <read_field_data>:

/*!
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b08a      	sub	sp, #40	@ 0x28
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	f8c3 200b 	str.w	r2, [r3, #11]
	uint8_t gas_range;
	uint32_t adc_temp;
	uint32_t adc_pres;
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;
 80021a0:	230a      	movs	r3, #10
 80021a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80021a6:	6838      	ldr	r0, [r7, #0]
 80021a8:	f000 f971 	bl	800248e <null_ptr_check>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	do {
		if (rslt == BME680_OK) {
 80021b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8083 	bne.w	80022c2 <read_field_data+0x13c>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80021bc:	f107 0108 	add.w	r1, r7, #8
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	220f      	movs	r2, #15
 80021c4:	201d      	movs	r0, #29
 80021c6:	f7fe ff21 	bl	800100c <bme680_get_regs>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80021d0:	7a3b      	ldrb	r3, [r7, #8]
 80021d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	701a      	strb	r2, [r3, #0]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80021dc:	7a3b      	ldrb	r3, [r7, #8]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	705a      	strb	r2, [r3, #1]
			data->meas_index = buff[1];
 80021e8:	7a7a      	ldrb	r2, [r7, #9]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	709a      	strb	r2, [r3, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80021ee:	7abb      	ldrb	r3, [r7, #10]
 80021f0:	031a      	lsls	r2, r3, #12
 80021f2:	7afb      	ldrb	r3, [r7, #11]
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4313      	orrs	r3, r2
				| ((uint32_t) buff[4] / 16));
 80021f8:	7b3a      	ldrb	r2, [r7, #12]
 80021fa:	0912      	lsrs	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80021fe:	4313      	orrs	r3, r2
 8002200:	623b      	str	r3, [r7, #32]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8002202:	7b7b      	ldrb	r3, [r7, #13]
 8002204:	031a      	lsls	r2, r3, #12
 8002206:	7bbb      	ldrb	r3, [r7, #14]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4313      	orrs	r3, r2
				| ((uint32_t) buff[7] / 16));
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	0912      	lsrs	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8002212:	4313      	orrs	r3, r2
 8002214:	61fb      	str	r3, [r7, #28]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8002216:	7c3b      	ldrb	r3, [r7, #16]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	b29b      	uxth	r3, r3
 800221c:	7c7a      	ldrb	r2, [r7, #17]
 800221e:	4313      	orrs	r3, r2
 8002220:	837b      	strh	r3, [r7, #26]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8002222:	7d7b      	ldrb	r3, [r7, #21]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	b29b      	uxth	r3, r3
 8002228:	7dba      	ldrb	r2, [r7, #22]
 800222a:	0992      	lsrs	r2, r2, #6
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	4313      	orrs	r3, r2
 8002230:	833b      	strh	r3, [r7, #24]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8002232:	7dbb      	ldrb	r3, [r7, #22]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	75fb      	strb	r3, [r7, #23]

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	b25a      	sxtb	r2, r3
 8002240:	7dbb      	ldrb	r3, [r7, #22]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	b25b      	sxtb	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b25b      	sxtb	r3, r3
 800224e:	b2da      	uxtb	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	701a      	strb	r2, [r3, #0]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b25a      	sxtb	r2, r3
 800225a:	7dbb      	ldrb	r3, [r7, #22]
 800225c:	b25b      	sxtb	r3, r3
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	b25b      	sxtb	r3, r3
 8002264:	4313      	orrs	r3, r2
 8002266:	b25b      	sxtb	r3, r3
 8002268:	b2da      	uxtb	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	701a      	strb	r2, [r3, #0]

			if (data->status & BME680_NEW_DATA_MSK) {
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b25b      	sxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	da20      	bge.n	80022ba <read_field_data+0x134>
				data->temperature = calc_temperature(adc_temp, dev);
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	69f8      	ldr	r0, [r7, #28]
 800227c:	f7ff fc09 	bl	8001a92 <calc_temperature>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	809a      	strh	r2, [r3, #4]
				data->pressure = calc_pressure(adc_pres, dev);
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	6a38      	ldr	r0, [r7, #32]
 800228c:	f7ff fc9c 	bl	8001bc8 <calc_pressure>
 8002290:	4602      	mov	r2, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	609a      	str	r2, [r3, #8]
				data->humidity = calc_humidity(adc_hum, dev);
 8002296:	8b7b      	ldrh	r3, [r7, #26]
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fd42 	bl	8001d24 <calc_humidity>
 80022a0:	4602      	mov	r2, r0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60da      	str	r2, [r3, #12]
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80022a6:	7df9      	ldrb	r1, [r7, #23]
 80022a8:	8b3b      	ldrh	r3, [r7, #24]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fdd3 	bl	8001e58 <calc_gas_resistance>
 80022b2:	4602      	mov	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	611a      	str	r2, [r3, #16]
				break;
 80022b8:	e00d      	b.n	80022d6 <read_field_data+0x150>
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022be:	200a      	movs	r0, #10
 80022c0:	4798      	blx	r3
		}
		tries--;
 80022c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	} while (tries);
 80022cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f47f af6e 	bne.w	80021b2 <read_field_data+0x2c>

	if (!tries)
 80022d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <read_field_data+0x15e>
		rslt = BME680_W_NO_NEW_DATA;
 80022de:	2302      	movs	r3, #2
 80022e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	return rslt;
 80022e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3728      	adds	r7, #40	@ 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80022fc:	6838      	ldr	r0, [r7, #0]
 80022fe:	f000 f8c6 	bl	800248e <null_ptr_check>
 8002302:	4603      	mov	r3, r0
 8002304:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 8002306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d14f      	bne.n	80023ae <set_mem_page+0xbe>
		if (reg_addr > 0x7f)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	2b00      	cmp	r3, #0
 8002314:	da02      	bge.n	800231c <set_mem_page+0x2c>
			mem_page = BME680_MEM_PAGE1;
 8002316:	2300      	movs	r3, #0
 8002318:	73bb      	strb	r3, [r7, #14]
 800231a:	e001      	b.n	8002320 <set_mem_page+0x30>
		else
			mem_page = BME680_MEM_PAGE0;
 800231c:	2310      	movs	r3, #16
 800231e:	73bb      	strb	r3, [r7, #14]

		if (mem_page != dev->mem_page) {
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	78db      	ldrb	r3, [r3, #3]
 8002324:	7bba      	ldrb	r2, [r7, #14]
 8002326:	429a      	cmp	r2, r3
 8002328:	d041      	beq.n	80023ae <set_mem_page+0xbe>
			dev->mem_page = mem_page;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7bba      	ldrb	r2, [r7, #14]
 800232e:	70da      	strb	r2, [r3, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	7858      	ldrb	r0, [r3, #1]
 8002338:	f107 020d 	add.w	r2, r7, #13
 800233c:	2301      	movs	r3, #1
 800233e:	21f3      	movs	r1, #243	@ 0xf3
 8002340:	47a0      	blx	r4
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			if (dev->com_rslt != 0)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <set_mem_page+0x6a>
				rslt = BME680_E_COM_FAIL;
 8002356:	23fe      	movs	r3, #254	@ 0xfe
 8002358:	73fb      	strb	r3, [r7, #15]

			if (rslt == BME680_OK) {
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d125      	bne.n	80023ae <set_mem_page+0xbe>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8002362:	7b7b      	ldrb	r3, [r7, #13]
 8002364:	f023 0310 	bic.w	r3, r3, #16
 8002368:	b2db      	uxtb	r3, r3
 800236a:	737b      	strb	r3, [r7, #13]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	78db      	ldrb	r3, [r3, #3]
 8002370:	b25b      	sxtb	r3, r3
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	b25a      	sxtb	r2, r3
 8002378:	7b7b      	ldrb	r3, [r7, #13]
 800237a:	b25b      	sxtb	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b25b      	sxtb	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	737b      	strb	r3, [r7, #13]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	7858      	ldrb	r0, [r3, #1]
 800238c:	f107 020d 	add.w	r2, r7, #13
 8002390:	2301      	movs	r3, #1
 8002392:	2173      	movs	r1, #115	@ 0x73
 8002394:	47a0      	blx	r4
 8002396:	4603      	mov	r3, r0
 8002398:	461a      	mov	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <set_mem_page+0xbe>
					rslt = BME680_E_COM_FAIL;
 80023aa:	23fe      	movs	r3, #254	@ 0xfe
 80023ac:	73fb      	strb	r3, [r7, #15]
			}
		}
	}

	return rslt;
 80023ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}

080023ba <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 80023ba:	b590      	push	{r4, r7, lr}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f863 	bl	800248e <null_ptr_check>
 80023c8:	4603      	mov	r3, r0
 80023ca:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME680_OK) {
 80023cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11b      	bne.n	800240c <get_mem_page+0x52>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7858      	ldrb	r0, [r3, #1]
 80023dc:	f107 020e 	add.w	r2, r7, #14
 80023e0:	2301      	movs	r3, #1
 80023e2:	21f3      	movs	r1, #243	@ 0xf3
 80023e4:	47a0      	blx	r4
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
		if (dev->com_rslt != 0)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f993 3054 	ldrsb.w	r3, [r3, #84]	@ 0x54
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <get_mem_page+0x46>
			rslt = BME680_E_COM_FAIL;
 80023fa:	23fe      	movs	r3, #254	@ 0xfe
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e005      	b.n	800240c <get_mem_page+0x52>
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8002400:	7bbb      	ldrb	r3, [r7, #14]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	b2da      	uxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	70da      	strb	r2, [r3, #3]
	}

	return rslt;
 800240c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}

08002418 <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	72fb      	strb	r3, [r7, #11]
 8002426:	4613      	mov	r3, r2
 8002428:	72bb      	strb	r3, [r7, #10]
	int8_t rslt = BME680_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]

	if (value != NULL) {
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d022      	beq.n	800247a <boundary_check+0x62>
		/* Check if value is below minimum value */
		if (*value < min) {
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	7afa      	ldrb	r2, [r7, #11]
 800243a:	429a      	cmp	r2, r3
 800243c:	d90b      	bls.n	8002456 <boundary_check+0x3e>
			/* Auto correct the invalid value to minimum value */
			*value = min;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	7afa      	ldrb	r2, [r7, #11]
 8002442:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MIN_CORRECTION;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	7aba      	ldrb	r2, [r7, #10]
 800245c:	429a      	cmp	r2, r3
 800245e:	d20e      	bcs.n	800247e <boundary_check+0x66>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	7aba      	ldrb	r2, [r7, #10]
 8002464:	701a      	strb	r2, [r3, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	b2da      	uxtb	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002478:	e001      	b.n	800247e <boundary_check+0x66>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 800247a:	23ff      	movs	r3, #255	@ 0xff
 800247c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800247e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002482:	4618      	mov	r0, r3
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00b      	beq.n	80024b4 <null_ptr_check+0x26>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <null_ptr_check+0x26>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <null_ptr_check+0x26>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80024b4:	23ff      	movs	r3, #255	@ 0xff
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e001      	b.n	80024be <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME680_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <main>:

// Global variables
I2C_HandleTypeDef hi2c3;
UART_HandleTypeDef huart2;
int main(void)
{
 80024d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	b0b8      	sub	sp, #224	@ 0xe0
 80024d6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d8:	f001 f9cf 	bl	800387a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024dc:	f000 f9a0 	bl	8002820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024e0:	f000 fb4a 	bl	8002b78 <MX_GPIO_Init>
  MX_FMC_Init();
 80024e4:	f000 fae2 	bl	8002aac <MX_FMC_Init>
  MX_SAI1_Init();
 80024e8:	f000 fa2c 	bl	8002944 <MX_SAI1_Init>
  MX_USART2_UART_Init();
 80024ec:	f000 fa92 	bl	8002a14 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80024f0:	f000 f9e8 	bl	80028c4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(10000); // Delay for 1 second
 80024f4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80024f8:	f001 fa34 	bl	8003964 <HAL_Delay>
  I2C_Scan();
 80024fc:	f000 fe4c 	bl	8003198 <I2C_Scan>
  char init_msg[] = "Initializing BME680...\r\n";
 8002500:	4bb9      	ldr	r3, [pc, #740]	@ (80027e8 <main+0x318>)
 8002502:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 8002506:	461d      	mov	r5, r3
 8002508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800250a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800250c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002510:	c403      	stmia	r4!, {r0, r1}
 8002512:	7022      	strb	r2, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)init_msg, sizeof(init_msg) - 1, HAL_MAX_DELAY);
 8002514:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	2218      	movs	r2, #24
 800251e:	48b3      	ldr	r0, [pc, #716]	@ (80027ec <main+0x31c>)
 8002520:	f005 fbe6 	bl	8007cf0 <HAL_UART_Transmit>

  struct bme680_dev gas_sensor;
  gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY; // 0x76
 8002524:	2376      	movs	r3, #118	@ 0x76
 8002526:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
  gas_sensor.intf = BME680_I2C_INTF;
 800252a:	2301      	movs	r3, #1
 800252c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
  gas_sensor.read = user_i2c_read;
 8002530:	4baf      	ldr	r3, [pc, #700]	@ (80027f0 <main+0x320>)
 8002532:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  gas_sensor.write = user_i2c_write;
 8002536:	4baf      	ldr	r3, [pc, #700]	@ (80027f4 <main+0x324>)
 8002538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  gas_sensor.delay_ms = user_delay_ms;
 800253c:	4bae      	ldr	r3, [pc, #696]	@ (80027f8 <main+0x328>)
 800253e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  gas_sensor.amb_temp = 25;
 8002542:	2319      	movs	r3, #25
 8002544:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

  int8_t rslt = BME680_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  int8_t rslt_secondary = BME680_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
  int attempt_count = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

  // Try initializing with primary I2C address
  while (attempt_count < 5)
 800255a:	e028      	b.n	80025ae <main+0xde>
  {
      rslt = bme680_init(&gas_sensor);
 800255c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe fd1f 	bl	8000fa4 <bme680_init>
 8002566:	4603      	mov	r3, r0
 8002568:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
      char buf[50];
      sprintf(buf, "Init attempt %d: result %d\r\n", attempt_count + 1, rslt);
 800256c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8002576:	4638      	mov	r0, r7
 8002578:	49a0      	ldr	r1, [pc, #640]	@ (80027fc <main+0x32c>)
 800257a:	f007 f89d 	bl	80096b8 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800257e:	463b      	mov	r3, r7
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd fe8d 	bl	80002a0 <strlen>
 8002586:	4603      	mov	r3, r0
 8002588:	b29a      	uxth	r2, r3
 800258a:	4639      	mov	r1, r7
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
 8002590:	4896      	ldr	r0, [pc, #600]	@ (80027ec <main+0x31c>)
 8002592:	f005 fbad 	bl	8007cf0 <HAL_UART_Transmit>

      if (rslt == BME680_OK)
 8002596:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <main+0xe8>
      {
          break;
      }
      attempt_count++;
 800259e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025a2:	3301      	adds	r3, #1
 80025a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      HAL_Delay(200);
 80025a8:	20c8      	movs	r0, #200	@ 0xc8
 80025aa:	f001 f9db 	bl	8003964 <HAL_Delay>
  while (attempt_count < 5)
 80025ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	ddd2      	ble.n	800255c <main+0x8c>
 80025b6:	e000      	b.n	80025ba <main+0xea>
          break;
 80025b8:	bf00      	nop
  }

  // If primary address fails, try secondary I2C address
  if (rslt != BME680_OK)
 80025ba:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d035      	beq.n	800262e <main+0x15e>
  {
      gas_sensor.dev_id = BME680_I2C_ADDR_SECONDARY; // 0x77
 80025c2:	2377      	movs	r3, #119	@ 0x77
 80025c4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
      attempt_count = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      while (attempt_count < 5)
 80025ce:	e028      	b.n	8002622 <main+0x152>
      {
          rslt_secondary = bme680_init(&gas_sensor);
 80025d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fce5 	bl	8000fa4 <bme680_init>
 80025da:	4603      	mov	r3, r0
 80025dc:	f887 30c6 	strb.w	r3, [r7, #198]	@ 0xc6
          char buf[50];
          sprintf(buf, "Secondary Init attempt %d: result %d\r\n", attempt_count + 1, rslt_secondary);
 80025e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	f997 30c6 	ldrsb.w	r3, [r7, #198]	@ 0xc6
 80025ea:	4638      	mov	r0, r7
 80025ec:	4984      	ldr	r1, [pc, #528]	@ (8002800 <main+0x330>)
 80025ee:	f007 f863 	bl	80096b8 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80025f2:	463b      	mov	r3, r7
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd fe53 	bl	80002a0 <strlen>
 80025fa:	4603      	mov	r3, r0
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4639      	mov	r1, r7
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	4879      	ldr	r0, [pc, #484]	@ (80027ec <main+0x31c>)
 8002606:	f005 fb73 	bl	8007cf0 <HAL_UART_Transmit>

          if (rslt_secondary == BME680_OK)
 800260a:	f997 30c6 	ldrsb.w	r3, [r7, #198]	@ 0xc6
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <main+0x15c>
          {
              break;
          }
          attempt_count++;
 8002612:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002616:	3301      	adds	r3, #1
 8002618:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
          HAL_Delay(200);
 800261c:	20c8      	movs	r0, #200	@ 0xc8
 800261e:	f001 f9a1 	bl	8003964 <HAL_Delay>
      while (attempt_count < 5)
 8002622:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002626:	2b04      	cmp	r3, #4
 8002628:	ddd2      	ble.n	80025d0 <main+0x100>
 800262a:	e000      	b.n	800262e <main+0x15e>
              break;
 800262c:	bf00      	nop
      }
  }

  if (rslt == BME680_OK || rslt_secondary == BME680_OK)
 800262e:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <main+0x16e>
 8002636:	f997 30c6 	ldrsb.w	r3, [r7, #198]	@ 0xc6
 800263a:	2b00      	cmp	r3, #0
 800263c:	d140      	bne.n	80026c0 <main+0x1f0>
  {
      char success_msg[] = "BME680 initialized successfully!\r\n";
 800263e:	4b71      	ldr	r3, [pc, #452]	@ (8002804 <main+0x334>)
 8002640:	463c      	mov	r4, r7
 8002642:	461d      	mov	r5, r3
 8002644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800264a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264c:	682b      	ldr	r3, [r5, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	8022      	strh	r2, [r4, #0]
 8002652:	3402      	adds	r4, #2
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)success_msg, sizeof(success_msg) - 1, HAL_MAX_DELAY);
 8002658:	4639      	mov	r1, r7
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	2222      	movs	r2, #34	@ 0x22
 8002660:	4862      	ldr	r0, [pc, #392]	@ (80027ec <main+0x31c>)
 8002662:	f005 fb45 	bl	8007cf0 <HAL_UART_Transmit>
  {
 8002666:	bf00      	nop
  {
      char error_msg[] = "BME680 initialization failed!\r\n";
      HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, sizeof(error_msg) - 1, HAL_MAX_DELAY);
      while (1); // Halt execution
  }
  gas_sensor.tph_sett.os_hum = BME680_OS_2X; //BME680_OS_16X for maximum 16 average samplings
 8002668:	2302      	movs	r3, #2
 800266a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
  gas_sensor.tph_sett.os_pres = BME680_OS_4X; //BME680_OS_16X for maximum 16 average samplings
 800266e:	2303      	movs	r3, #3
 8002670:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
  gas_sensor.tph_sett.os_temp = BME680_OS_8X; //BME680_OS_16X for maximum 16 average samplings
 8002674:	2304      	movs	r3, #4
 8002676:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3; //BME680_FILTER_SIZE_127 max IIR filter setting
 800267a:	2302      	movs	r3, #2
 800267c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

  gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS; //BME680_DISABLE_GAS_MEAS to disabled GAS measurements (to save power)
 8002680:	2301      	movs	r3, #1
 8002682:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  gas_sensor.gas_sett.heatr_temp = 320; // Target temperature in degrees Celsius
 8002686:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800268a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  gas_sensor.gas_sett.heatr_dur = 150; // Heating duration in milliseconds
 800268e:	2396      	movs	r3, #150	@ 0x96
 8002690:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

  gas_sensor.power_mode = BME680_FORCED_MODE; //BME680_SLEEP_MODE
 8002694:	2301      	movs	r3, #1
 8002696:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

  // Define desired settings
  uint16_t desired_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL | BME680_GAS_SENSOR_SEL;
 800269a:	23df      	movs	r3, #223	@ 0xdf
 800269c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe

  rslt = bme680_set_sensor_settings(desired_settings, &gas_sensor);
 80026a0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80026a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fdb5 	bl	800121a <bme680_set_sensor_settings>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  if (rslt != BME680_OK) {
 80026b6:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d022      	beq.n	8002704 <main+0x234>
 80026be:	e011      	b.n	80026e4 <main+0x214>
      char error_msg[] = "BME680 initialization failed!\r\n";
 80026c0:	4b51      	ldr	r3, [pc, #324]	@ (8002808 <main+0x338>)
 80026c2:	463c      	mov	r4, r7
 80026c4:	461d      	mov	r5, r3
 80026c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, sizeof(error_msg) - 1, HAL_MAX_DELAY);
 80026d2:	4639      	mov	r1, r7
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
 80026d8:	221f      	movs	r2, #31
 80026da:	4844      	ldr	r0, [pc, #272]	@ (80027ec <main+0x31c>)
 80026dc:	f005 fb08 	bl	8007cf0 <HAL_UART_Transmit>
      while (1); // Halt execution
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <main+0x210>
      char error_msg[] = "Failed to set sensor settings!\r\n";
 80026e4:	4b49      	ldr	r3, [pc, #292]	@ (800280c <main+0x33c>)
 80026e6:	463c      	mov	r4, r7
 80026e8:	461d      	mov	r5, r3
 80026ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f2:	682b      	ldr	r3, [r5, #0]
 80026f4:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, sizeof(error_msg) - 1, HAL_MAX_DELAY);
 80026f6:	4639      	mov	r1, r7
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295
 80026fc:	2220      	movs	r2, #32
 80026fe:	483b      	ldr	r0, [pc, #236]	@ (80027ec <main+0x31c>)
 8002700:	f005 faf6 	bl	8007cf0 <HAL_UART_Transmit>
  }
  uint16_t meas_period;
      bme680_get_profile_dur(&meas_period, &gas_sensor);
 8002704:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002708:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe ffb6 	bl	8001680 <bme680_get_profile_dur>

      struct bme680_field_data data;
      while (1)
      {
          rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8002714:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002718:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff f810 	bl	8001744 <bme680_get_sensor_data>
 8002724:	4603      	mov	r3, r0
 8002726:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
          if (rslt == BME680_OK)
 800272a:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 800272e:	2b00      	cmp	r3, #0
 8002730:	d149      	bne.n	80027c6 <main+0x2f6>
          {
              sprintf(uart_buf, "Temperature: %.1f °C, Pressure: %.1f hPa, Humidity: %.1f %%, Gas: %.1f kOhms\r\n",
                      data.temperature / 100.0, data.pressure / 100.0, data.humidity / 1000.0, data.gas_resistance / 1000.0);
 8002732:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
              sprintf(uart_buf, "Temperature: %.1f °C, Pressure: %.1f hPa, Humidity: %.1f %%, Gas: %.1f kOhms\r\n",
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd ff0c 	bl	8000554 <__aeabi_i2d>
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b33      	ldr	r3, [pc, #204]	@ (8002810 <main+0x340>)
 8002742:	f7fe f89b 	bl	800087c <__aeabi_ddiv>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4692      	mov	sl, r2
 800274c:	469b      	mov	fp, r3
                      data.temperature / 100.0, data.pressure / 100.0, data.humidity / 1000.0, data.gas_resistance / 1000.0);
 800274e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
              sprintf(uart_buf, "Temperature: %.1f °C, Pressure: %.1f hPa, Humidity: %.1f %%, Gas: %.1f kOhms\r\n",
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd feef 	bl	8000534 <__aeabi_ui2d>
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <main+0x340>)
 800275c:	f7fe f88e 	bl	800087c <__aeabi_ddiv>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4614      	mov	r4, r2
 8002766:	461d      	mov	r5, r3
                      data.temperature / 100.0, data.pressure / 100.0, data.humidity / 1000.0, data.gas_resistance / 1000.0);
 8002768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
              sprintf(uart_buf, "Temperature: %.1f °C, Pressure: %.1f hPa, Humidity: %.1f %%, Gas: %.1f kOhms\r\n",
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fee2 	bl	8000534 <__aeabi_ui2d>
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	4b27      	ldr	r3, [pc, #156]	@ (8002814 <main+0x344>)
 8002776:	f7fe f881 	bl	800087c <__aeabi_ddiv>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4690      	mov	r8, r2
 8002780:	4699      	mov	r9, r3
                      data.temperature / 100.0, data.pressure / 100.0, data.humidity / 1000.0, data.gas_resistance / 1000.0);
 8002782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
              sprintf(uart_buf, "Temperature: %.1f °C, Pressure: %.1f hPa, Humidity: %.1f %%, Gas: %.1f kOhms\r\n",
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd fed5 	bl	8000534 <__aeabi_ui2d>
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	4b21      	ldr	r3, [pc, #132]	@ (8002814 <main+0x344>)
 8002790:	f7fe f874 	bl	800087c <__aeabi_ddiv>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800279c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80027a0:	e9cd 4500 	strd	r4, r5, [sp]
 80027a4:	4652      	mov	r2, sl
 80027a6:	465b      	mov	r3, fp
 80027a8:	491b      	ldr	r1, [pc, #108]	@ (8002818 <main+0x348>)
 80027aa:	481c      	ldr	r0, [pc, #112]	@ (800281c <main+0x34c>)
 80027ac:	f006 ff84 	bl	80096b8 <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80027b0:	481a      	ldr	r0, [pc, #104]	@ (800281c <main+0x34c>)
 80027b2:	f7fd fd75 	bl	80002a0 <strlen>
 80027b6:	4603      	mov	r3, r0
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	4917      	ldr	r1, [pc, #92]	@ (800281c <main+0x34c>)
 80027c0:	480a      	ldr	r0, [pc, #40]	@ (80027ec <main+0x31c>)
 80027c2:	f005 fa95 	bl	8007cf0 <HAL_UART_Transmit>
          }

          if (gas_sensor.power_mode == BME680_FORCED_MODE)
 80027c6:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <main+0x30e>
          {
              rslt = bme680_set_sensor_mode(&gas_sensor);
 80027ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe feef 	bl	80015b6 <bme680_set_sensor_mode>
 80027d8:	4603      	mov	r3, r0
 80027da:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
          }

          HAL_Delay(1000); // Delay for 1 second
 80027de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027e2:	f001 f8bf 	bl	8003964 <HAL_Delay>
          rslt = bme680_get_sensor_data(&data, &gas_sensor);
 80027e6:	e795      	b.n	8002714 <main+0x244>
 80027e8:	0800ba58 	.word	0x0800ba58
 80027ec:	200402d8 	.word	0x200402d8
 80027f0:	080030f1 	.word	0x080030f1
 80027f4:	08003139 	.word	0x08003139
 80027f8:	08003181 	.word	0x08003181
 80027fc:	0800b9c0 	.word	0x0800b9c0
 8002800:	0800b9e0 	.word	0x0800b9e0
 8002804:	0800ba74 	.word	0x0800ba74
 8002808:	0800ba98 	.word	0x0800ba98
 800280c:	0800bab8 	.word	0x0800bab8
 8002810:	40590000 	.word	0x40590000
 8002814:	408f4000 	.word	0x408f4000
 8002818:	0800ba08 	.word	0x0800ba08
 800281c:	200403bc 	.word	0x200403bc

08002820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b096      	sub	sp, #88	@ 0x58
 8002824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	2244      	movs	r2, #68	@ 0x44
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f006 ffa7 	bl	8009782 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002834:	463b      	mov	r3, r7
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002842:	2000      	movs	r0, #0
 8002844:	f002 fa72 	bl	8004d2c <HAL_PWREx_ControlVoltageScaling>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800284e:	f000 fc49 	bl	80030e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002852:	2310      	movs	r3, #16
 8002854:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002856:	2301      	movs	r3, #1
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800285e:	2360      	movs	r3, #96	@ 0x60
 8002860:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002862:	2302      	movs	r3, #2
 8002864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002866:	2301      	movs	r3, #1
 8002868:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800286e:	233c      	movs	r3, #60	@ 0x3c
 8002870:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8002872:	2305      	movs	r3, #5
 8002874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002876:	2302      	movs	r3, #2
 8002878:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800287a:	2302      	movs	r3, #2
 800287c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4618      	mov	r0, r3
 8002884:	f002 fb06 	bl	8004e94 <HAL_RCC_OscConfig>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800288e:	f000 fc29 	bl	80030e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002892:	230f      	movs	r3, #15
 8002894:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002896:	2303      	movs	r3, #3
 8002898:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028a6:	463b      	mov	r3, r7
 80028a8:	2105      	movs	r1, #5
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 ff0c 	bl	80056c8 <HAL_RCC_ClockConfig>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80028b6:	f000 fc15 	bl	80030e4 <Error_Handler>
  }
}
 80028ba:	bf00      	nop
 80028bc:	3758      	adds	r7, #88	@ 0x58
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <MX_I2C3_Init+0x74>)
 80028ca:	4a1c      	ldr	r2, [pc, #112]	@ (800293c <MX_I2C3_Init+0x78>)
 80028cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30A175AB;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <MX_I2C3_Init+0x74>)
 80028d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002940 <MX_I2C3_Init+0x7c>)
 80028d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80028d4:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <MX_I2C3_Init+0x74>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028da:	4b17      	ldr	r3, [pc, #92]	@ (8002938 <MX_I2C3_Init+0x74>)
 80028dc:	2201      	movs	r2, #1
 80028de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e0:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <MX_I2C3_Init+0x74>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80028e6:	4b14      	ldr	r3, [pc, #80]	@ (8002938 <MX_I2C3_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <MX_I2C3_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028f2:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <MX_I2C3_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <MX_I2C3_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028fe:	480e      	ldr	r0, [pc, #56]	@ (8002938 <MX_I2C3_Init+0x74>)
 8002900:	f001 fae4 	bl	8003ecc <HAL_I2C_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800290a:	f000 fbeb 	bl	80030e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800290e:	2100      	movs	r1, #0
 8002910:	4809      	ldr	r0, [pc, #36]	@ (8002938 <MX_I2C3_Init+0x74>)
 8002912:	f002 f953 	bl	8004bbc <HAL_I2CEx_ConfigAnalogFilter>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800291c:	f000 fbe2 	bl	80030e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002920:	2100      	movs	r1, #0
 8002922:	4805      	ldr	r0, [pc, #20]	@ (8002938 <MX_I2C3_Init+0x74>)
 8002924:	f002 f995 	bl	8004c52 <HAL_I2CEx_ConfigDigitalFilter>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800292e:	f000 fbd9 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200401f0 	.word	0x200401f0
 800293c:	40005c00 	.word	0x40005c00
 8002940:	30a175ab 	.word	0x30a175ab

08002944 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002948:	4b2f      	ldr	r3, [pc, #188]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 800294a:	4a30      	ldr	r2, [pc, #192]	@ (8002a0c <MX_SAI1_Init+0xc8>)
 800294c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800294e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 8002950:	2200      	movs	r2, #0
 8002952:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002954:	4b2c      	ldr	r3, [pc, #176]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 8002956:	2200      	movs	r2, #0
 8002958:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800295a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 800295c:	2240      	movs	r2, #64	@ 0x40
 800295e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002960:	4b29      	ldr	r3, [pc, #164]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 8002962:	2200      	movs	r2, #0
 8002964:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002966:	4b28      	ldr	r3, [pc, #160]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 8002968:	2200      	movs	r2, #0
 800296a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800296c:	4b26      	ldr	r3, [pc, #152]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002972:	4b25      	ldr	r3, [pc, #148]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002978:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 800297a:	2200      	movs	r2, #0
 800297c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800297e:	4b22      	ldr	r3, [pc, #136]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 8002980:	2200      	movs	r2, #0
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002984:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800298a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 800298c:	4a20      	ldr	r2, [pc, #128]	@ (8002a10 <MX_SAI1_Init+0xcc>)
 800298e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002990:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002996:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 8002998:	2200      	movs	r2, #0
 800299a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800299c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80029a2:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80029a8:	4b17      	ldr	r3, [pc, #92]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80029b0:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80029b6:	4b14      	ldr	r3, [pc, #80]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80029be:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029c0:	2208      	movs	r2, #8
 80029c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80029c4:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80029ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80029d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80029d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80029dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029de:	2200      	movs	r2, #0
 80029e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80029e2:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80029e8:	4b07      	ldr	r3, [pc, #28]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80029f4:	4804      	ldr	r0, [pc, #16]	@ (8002a08 <MX_SAI1_Init+0xc4>)
 80029f6:	f004 fecb 	bl	8007790 <HAL_SAI_Init>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8002a00:	f000 fb70 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20040244 	.word	0x20040244
 8002a0c:	40015404 	.word	0x40015404
 8002a10:	0002ee00 	.word	0x0002ee00

08002a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a18:	4b22      	ldr	r3, [pc, #136]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a1a:	4a23      	ldr	r2, [pc, #140]	@ (8002aa8 <MX_USART2_UART_Init+0x94>)
 8002a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a1e:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a32:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a38:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3e:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a44:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4a:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a50:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a5c:	4811      	ldr	r0, [pc, #68]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a5e:	f005 f8f7 	bl	8007c50 <HAL_UART_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a68:	f000 fb3c 	bl	80030e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	480d      	ldr	r0, [pc, #52]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a70:	f005 ff20 	bl	80088b4 <HAL_UARTEx_SetTxFifoThreshold>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a7a:	f000 fb33 	bl	80030e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4808      	ldr	r0, [pc, #32]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a82:	f005 ff55 	bl	8008930 <HAL_UARTEx_SetRxFifoThreshold>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a8c:	f000 fb2a 	bl	80030e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a90:	4804      	ldr	r0, [pc, #16]	@ (8002aa4 <MX_USART2_UART_Init+0x90>)
 8002a92:	f005 fed6 	bl	8008842 <HAL_UARTEx_DisableFifoMode>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a9c:	f000 fb22 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200402d8 	.word	0x200402d8
 8002aa8:	40004400 	.word	0x40004400

08002aac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f006 fe62 	bl	8009782 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002abe:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002ac0:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8002ac4:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b74 <MX_FMC_Init+0xc8>)
 8002aca:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002acc:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002ad2:	4b27      	ldr	r3, [pc, #156]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8002ad8:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002ada:	2204      	movs	r2, #4
 8002adc:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002ade:	4b24      	ldr	r3, [pc, #144]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 8002ae4:	4b22      	ldr	r3, [pc, #136]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002aec:	4b20      	ldr	r3, [pc, #128]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002af2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8002afe:	4b1c      	ldr	r3, [pc, #112]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002b00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002b0c:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8002b12:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002b14:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002b18:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8002b20:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8002b26:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002b2c:	4b10      	ldr	r3, [pc, #64]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002b32:	230f      	movs	r3, #15
 8002b34:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8002b36:	230f      	movs	r3, #15
 8002b38:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8002b3a:	23ff      	movs	r3, #255	@ 0xff
 8002b3c:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002b42:	230f      	movs	r3, #15
 8002b44:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002b46:	2310      	movs	r3, #16
 8002b48:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002b52:	463b      	mov	r3, r7
 8002b54:	2200      	movs	r2, #0
 8002b56:	4619      	mov	r1, r3
 8002b58:	4805      	ldr	r0, [pc, #20]	@ (8002b70 <MX_FMC_Init+0xc4>)
 8002b5a:	f005 f831 	bl	8007bc0 <HAL_SRAM_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8002b64:	f000 fabe 	bl	80030e4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	2004036c 	.word	0x2004036c
 8002b74:	a0000104 	.word	0xa0000104

08002b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08e      	sub	sp, #56	@ 0x38
 8002b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
 8002b8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b8e:	4bb1      	ldr	r3, [pc, #708]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b92:	4ab0      	ldr	r2, [pc, #704]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b9a:	4bae      	ldr	r3, [pc, #696]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ba6:	4bab      	ldr	r3, [pc, #684]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	4aaa      	ldr	r2, [pc, #680]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bb2:	4ba8      	ldr	r3, [pc, #672]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bbe:	4ba5      	ldr	r3, [pc, #660]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	4aa4      	ldr	r2, [pc, #656]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bc4:	f043 0310 	orr.w	r3, r3, #16
 8002bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bca:	4ba2      	ldr	r3, [pc, #648]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	4a9e      	ldr	r2, [pc, #632]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bdc:	f043 0302 	orr.w	r3, r3, #2
 8002be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be2:	4b9c      	ldr	r3, [pc, #624]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	4b99      	ldr	r3, [pc, #612]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	4a98      	ldr	r2, [pc, #608]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bfa:	4b96      	ldr	r3, [pc, #600]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c06:	4b93      	ldr	r3, [pc, #588]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0a:	4a92      	ldr	r2, [pc, #584]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c12:	4b90      	ldr	r3, [pc, #576]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8002c1e:	f002 f929 	bl	8004e74 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c22:	4b8c      	ldr	r3, [pc, #560]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c26:	4a8b      	ldr	r2, [pc, #556]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c28:	f043 0308 	orr.w	r3, r3, #8
 8002c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c2e:	4b89      	ldr	r3, [pc, #548]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	4b86      	ldr	r3, [pc, #536]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3e:	4a85      	ldr	r2, [pc, #532]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c40:	f043 0304 	orr.w	r3, r3, #4
 8002c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c46:	4b83      	ldr	r3, [pc, #524]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c52:	4b80      	ldr	r3, [pc, #512]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	4a7f      	ldr	r2, [pc, #508]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c58:	f043 0320 	orr.w	r3, r3, #32
 8002c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e54 <MX_GPIO_Init+0x2dc>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin, GPIO_PIN_RESET);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f244 0104 	movw	r1, #16388	@ 0x4004
 8002c70:	4879      	ldr	r0, [pc, #484]	@ (8002e58 <MX_GPIO_Init+0x2e0>)
 8002c72:	f001 f913 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c7c:	4877      	ldr	r0, [pc, #476]	@ (8002e5c <MX_GPIO_Init+0x2e4>)
 8002c7e:	f001 f90d 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2140      	movs	r1, #64	@ 0x40
 8002c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c8a:	f001 f907 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2104      	movs	r1, #4
 8002c92:	4873      	ldr	r0, [pc, #460]	@ (8002e60 <MX_GPIO_Init+0x2e8>)
 8002c94:	f001 f902 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8002c98:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8002caa:	2305      	movs	r3, #5
 8002cac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	486b      	ldr	r0, [pc, #428]	@ (8002e64 <MX_GPIO_Init+0x2ec>)
 8002cb6:	f000 ff5f 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin;
 8002cba:	f244 0304 	movw	r3, #16388	@ 0x4004
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4861      	ldr	r0, [pc, #388]	@ (8002e58 <MX_GPIO_Init+0x2e0>)
 8002cd4:	f000 ff50 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002cd8:	2310      	movs	r3, #16
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	485b      	ldr	r0, [pc, #364]	@ (8002e60 <MX_GPIO_Init+0x2e8>)
 8002cf4:	f000 ff40 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART3_RTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8002cf8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d0a:	2307      	movs	r3, #7
 8002d0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8002d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d18:	f000 ff2e 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_10_Pin */
  GPIO_InitStruct.Pin = ARD_10_Pin;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d2c:	2305      	movs	r3, #5
 8002d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8002d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d34:	4619      	mov	r1, r3
 8002d36:	484b      	ldr	r0, [pc, #300]	@ (8002e64 <MX_GPIO_Init+0x2ec>)
 8002d38:	f000 ff1e 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8002d3c:	23b0      	movs	r3, #176	@ 0xb0
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002d4c:	230a      	movs	r3, #10
 8002d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d54:	4619      	mov	r1, r3
 8002d56:	4843      	ldr	r0, [pc, #268]	@ (8002e64 <MX_GPIO_Init+0x2ec>)
 8002d58:	f000 ff0e 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8002d5c:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8002d6e:	2305      	movs	r3, #5
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d76:	4619      	mov	r1, r3
 8002d78:	483b      	ldr	r0, [pc, #236]	@ (8002e68 <MX_GPIO_Init+0x2f0>)
 8002d7a:	f000 fefd 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d82:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d90:	4619      	mov	r1, r3
 8002d92:	4834      	ldr	r0, [pc, #208]	@ (8002e64 <MX_GPIO_Init+0x2ec>)
 8002d94:	f000 fef0 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8002d98:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8002daa:	230a      	movs	r3, #10
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002db2:	4619      	mov	r1, r3
 8002db4:	4828      	ldr	r0, [pc, #160]	@ (8002e58 <MX_GPIO_Init+0x2e0>)
 8002db6:	f000 fedf 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SCL_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8002dba:	2340      	movs	r3, #64	@ 0x40
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dbe:	2312      	movs	r3, #18
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dca:	2304      	movs	r3, #4
 8002dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8002dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4822      	ldr	r0, [pc, #136]	@ (8002e60 <MX_GPIO_Init+0x2e8>)
 8002dd6:	f000 fecf 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8002dda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de8:	2300      	movs	r3, #0
 8002dea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dec:	2303      	movs	r3, #3
 8002dee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8002df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df4:	4619      	mov	r1, r3
 8002df6:	4818      	ldr	r0, [pc, #96]	@ (8002e58 <MX_GPIO_Init+0x2e0>)
 8002df8:	f000 febe 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8002dfc:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8002e0e:	2305      	movs	r3, #5
 8002e10:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	480f      	ldr	r0, [pc, #60]	@ (8002e58 <MX_GPIO_Init+0x2e0>)
 8002e1a:	f000 fead 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002e1e:	2304      	movs	r3, #4
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e2e:	230c      	movs	r3, #12
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e36:	4619      	mov	r1, r3
 8002e38:	480c      	ldr	r0, [pc, #48]	@ (8002e6c <MX_GPIO_Init+0x2f4>)
 8002e3a:	f000 fe9d 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D2_Pin uSD_D3_Pin uSD_CLK_Pin uSD_D0_Pin
                           uSD_D1_Pin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8002e3e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
                          |uSD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002e50:	230c      	movs	r3, #12
 8002e52:	e00d      	b.n	8002e70 <MX_GPIO_Init+0x2f8>
 8002e54:	40021000 	.word	0x40021000
 8002e58:	48001c00 	.word	0x48001c00
 8002e5c:	48000800 	.word	0x48000800
 8002e60:	48000400 	.word	0x48000400
 8002e64:	48002000 	.word	0x48002000
 8002e68:	48001800 	.word	0x48001800
 8002e6c:	48000c00 	.word	0x48000c00
 8002e70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e76:	4619      	mov	r1, r3
 8002e78:	4896      	ldr	r0, [pc, #600]	@ (80030d4 <MX_GPIO_Init+0x55c>)
 8002e7a:	f000 fe7d 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTGFS_ID_Pin USB_OTG_FS_DP_Pin USB_OTGFS_DM_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 8002e7e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e90:	230a      	movs	r3, #10
 8002e92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e9e:	f000 fe6b 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8002ea2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8002eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4886      	ldr	r0, [pc, #536]	@ (80030d4 <MX_GPIO_Init+0x55c>)
 8002ebc:	f000 fe5c 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 8002ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ed8:	f000 fe4e 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8002edc:	2340      	movs	r3, #64	@ 0x40
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ee0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8002eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4878      	ldr	r0, [pc, #480]	@ (80030d4 <MX_GPIO_Init+0x55c>)
 8002ef2:	f000 fe41 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8002ef6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002efc:	2312      	movs	r3, #18
 8002efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f08:	2304      	movs	r3, #4
 8002f0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8002f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f10:	4619      	mov	r1, r3
 8002f12:	4871      	ldr	r0, [pc, #452]	@ (80030d8 <MX_GPIO_Init+0x560>)
 8002f14:	f000 fe30 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8002f18:	2384      	movs	r3, #132	@ 0x84
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002f28:	2306      	movs	r3, #6
 8002f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f30:	4619      	mov	r1, r3
 8002f32:	4868      	ldr	r0, [pc, #416]	@ (80030d4 <MX_GPIO_Init+0x55c>)
 8002f34:	f000 fe20 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8002f38:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	2303      	movs	r3, #3
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f4a:	2307      	movs	r3, #7
 8002f4c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f52:	4619      	mov	r1, r3
 8002f54:	4861      	ldr	r0, [pc, #388]	@ (80030dc <MX_GPIO_Init+0x564>)
 8002f56:	f000 fe0f 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f62:	2300      	movs	r3, #0
 8002f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f66:	2303      	movs	r3, #3
 8002f68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f72:	4619      	mov	r1, r3
 8002f74:	4857      	ldr	r0, [pc, #348]	@ (80030d4 <MX_GPIO_Init+0x55c>)
 8002f76:	f000 fdff 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8002f7a:	2318      	movs	r3, #24
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f7e:	230b      	movs	r3, #11
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4851      	ldr	r0, [pc, #324]	@ (80030d4 <MX_GPIO_Init+0x55c>)
 8002f8e:	f000 fdf3 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8002f92:	2381      	movs	r3, #129	@ 0x81
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f96:	230b      	movs	r3, #11
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa8:	f000 fde6 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8002fac:	2320      	movs	r3, #32
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8002fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fca:	f000 fdd5 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002fce:	2340      	movs	r3, #64	@ 0x40
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fe8:	f000 fdc6 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_MOSI_Pin SPI2_MISO_Pin SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8002fec:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ffe:	2305      	movs	r3, #5
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003006:	4619      	mov	r1, r3
 8003008:	4834      	ldr	r0, [pc, #208]	@ (80030dc <MX_GPIO_Init+0x564>)
 800300a:	f000 fdb5 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800300e:	2302      	movs	r3, #2
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301a:	2300      	movs	r3, #0
 800301c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800301e:	2302      	movs	r3, #2
 8003020:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8003022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003026:	4619      	mov	r1, r3
 8003028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800302c:	f000 fda4 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8003030:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8003042:	230b      	movs	r3, #11
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8003046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800304a:	4619      	mov	r1, r3
 800304c:	4824      	ldr	r0, [pc, #144]	@ (80030e0 <MX_GPIO_Init+0x568>)
 800304e:	f000 fd93 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8003052:	2310      	movs	r3, #16
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	2302      	movs	r3, #2
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305e:	2300      	movs	r3, #0
 8003060:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8003062:	230a      	movs	r3, #10
 8003064:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8003066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800306a:	4619      	mov	r1, r3
 800306c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003070:	f000 fd82 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8003074:	2301      	movs	r3, #1
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003078:	230b      	movs	r3, #11
 800307a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8003080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003084:	4619      	mov	r1, r3
 8003086:	4815      	ldr	r0, [pc, #84]	@ (80030dc <MX_GPIO_Init+0x564>)
 8003088:	f000 fd76 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800308c:	2304      	movs	r3, #4
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003090:	2301      	movs	r3, #1
 8003092:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003098:	2300      	movs	r3, #0
 800309a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800309c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030a0:	4619      	mov	r1, r3
 80030a2:	480e      	ldr	r0, [pc, #56]	@ (80030dc <MX_GPIO_Init+0x564>)
 80030a4:	f000 fd68 	bl	8003b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80030a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	2300      	movs	r3, #0
 80030b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80030ba:	2306      	movs	r3, #6
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80030be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030c2:	4619      	mov	r1, r3
 80030c4:	4805      	ldr	r0, [pc, #20]	@ (80030dc <MX_GPIO_Init+0x564>)
 80030c6:	f000 fd57 	bl	8003b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80030ca:	bf00      	nop
 80030cc:	3738      	adds	r7, #56	@ 0x38
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	48000800 	.word	0x48000800
 80030d8:	48001800 	.word	0x48001800
 80030dc:	48000400 	.word	0x48000400
 80030e0:	48001400 	.word	0x48001400

080030e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <Error_Handler+0x8>

080030f0 <user_i2c_read>:
  }
  /* USER CODE END Error_Handler_Debug */
}
// Implement user_i2c_read, user_i2c_write, and user_delay_ms functions
int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	603a      	str	r2, [r7, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	460b      	mov	r3, r1
 8003100:	71bb      	strb	r3, [r7, #6]
 8003102:	4613      	mov	r3, r2
 8003104:	80bb      	strh	r3, [r7, #4]
    // Implement I2C read function
    return HAL_I2C_Mem_Read(&hi2c3, dev_id << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	b29b      	uxth	r3, r3
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	b299      	uxth	r1, r3
 800310e:	79bb      	ldrb	r3, [r7, #6]
 8003110:	b29a      	uxth	r2, r3
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	9302      	str	r3, [sp, #8]
 8003118:	88bb      	ldrh	r3, [r7, #4]
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2301      	movs	r3, #1
 8003122:	4804      	ldr	r0, [pc, #16]	@ (8003134 <user_i2c_read+0x44>)
 8003124:	f001 f882 	bl	800422c <HAL_I2C_Mem_Read>
 8003128:	4603      	mov	r3, r0
 800312a:	b25b      	sxtb	r3, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	200401f0 	.word	0x200401f0

08003138 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af04      	add	r7, sp, #16
 800313e:	603a      	str	r2, [r7, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
 8003146:	460b      	mov	r3, r1
 8003148:	71bb      	strb	r3, [r7, #6]
 800314a:	4613      	mov	r3, r2
 800314c:	80bb      	strh	r3, [r7, #4]
    // Implement I2C write function
    return HAL_I2C_Mem_Write(&hi2c3, dev_id << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	b29b      	uxth	r3, r3
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	b299      	uxth	r1, r3
 8003156:	79bb      	ldrb	r3, [r7, #6]
 8003158:	b29a      	uxth	r2, r3
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	9302      	str	r3, [sp, #8]
 8003160:	88bb      	ldrh	r3, [r7, #4]
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2301      	movs	r3, #1
 800316a:	4804      	ldr	r0, [pc, #16]	@ (800317c <user_i2c_write+0x44>)
 800316c:	f000 ff4a 	bl	8004004 <HAL_I2C_Mem_Write>
 8003170:	4603      	mov	r3, r0
 8003172:	b25b      	sxtb	r3, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	200401f0 	.word	0x200401f0

08003180 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
    HAL_Delay(period);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fbeb 	bl	8003964 <HAL_Delay>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <I2C_Scan>:
void I2C_Scan(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	@ 0x28
 800319c:	af00      	add	r7, sp, #0
    char buffer[25];
    int buffer_len;
    HAL_StatusTypeDef result;
    uint8_t i;
    buffer_len = sprintf(buffer, "Scanning I2C bus:\r\n");
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	4925      	ldr	r1, [pc, #148]	@ (8003238 <I2C_Scan+0xa0>)
 80031a2:	4618      	mov	r0, r3
 80031a4:	f006 fa88 	bl	80096b8 <siprintf>
 80031a8:	6238      	str	r0, [r7, #32]
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, buffer_len, 1000);
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	1d39      	adds	r1, r7, #4
 80031b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031b4:	4821      	ldr	r0, [pc, #132]	@ (800323c <I2C_Scan+0xa4>)
 80031b6:	f004 fd9b 	bl	8007cf0 <HAL_UART_Transmit>

    for (i = 1; i < 128; i++)
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80031c0:	e023      	b.n	800320a <I2C_Scan+0x72>
    {
        result = HAL_I2C_IsDeviceReady(&hi2c3, (uint16_t)(i << 1), 2, 2);
 80031c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	b299      	uxth	r1, r3
 80031cc:	2302      	movs	r3, #2
 80031ce:	2202      	movs	r2, #2
 80031d0:	481b      	ldr	r0, [pc, #108]	@ (8003240 <I2C_Scan+0xa8>)
 80031d2:	f001 f945 	bl	8004460 <HAL_I2C_IsDeviceReady>
 80031d6:	4603      	mov	r3, r0
 80031d8:	77fb      	strb	r3, [r7, #31]
        if (result == HAL_OK)
 80031da:	7ffb      	ldrb	r3, [r7, #31]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10f      	bne.n	8003200 <I2C_Scan+0x68>
        {
            buffer_len = sprintf(buffer, "0x%02X ", i);
 80031e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	4917      	ldr	r1, [pc, #92]	@ (8003244 <I2C_Scan+0xac>)
 80031e8:	4618      	mov	r0, r3
 80031ea:	f006 fa65 	bl	80096b8 <siprintf>
 80031ee:	6238      	str	r0, [r7, #32]
            HAL_UART_Transmit(&huart2, (uint8_t*)buffer, buffer_len, 1000);
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	1d39      	adds	r1, r7, #4
 80031f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031fa:	4810      	ldr	r0, [pc, #64]	@ (800323c <I2C_Scan+0xa4>)
 80031fc:	f004 fd78 	bl	8007cf0 <HAL_UART_Transmit>
    for (i = 1; i < 128; i++)
 8003200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003204:	3301      	adds	r3, #1
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800320a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800320e:	2b00      	cmp	r3, #0
 8003210:	dad7      	bge.n	80031c2 <I2C_Scan+0x2a>
        }
    }
    buffer_len = sprintf(buffer, "\r\n");
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	490c      	ldr	r1, [pc, #48]	@ (8003248 <I2C_Scan+0xb0>)
 8003216:	4618      	mov	r0, r3
 8003218:	f006 fa4e 	bl	80096b8 <siprintf>
 800321c:	6238      	str	r0, [r7, #32]
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, buffer_len, 1000);
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	b29a      	uxth	r2, r3
 8003222:	1d39      	adds	r1, r7, #4
 8003224:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003228:	4804      	ldr	r0, [pc, #16]	@ (800323c <I2C_Scan+0xa4>)
 800322a:	f004 fd61 	bl	8007cf0 <HAL_UART_Transmit>
}
 800322e:	bf00      	nop
 8003230:	3728      	adds	r7, #40	@ 0x28
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	0800badc 	.word	0x0800badc
 800323c:	200402d8 	.word	0x200402d8
 8003240:	200401f0 	.word	0x200401f0
 8003244:	0800baf0 	.word	0x0800baf0
 8003248:	0800baf8 	.word	0x0800baf8

0800324c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <HAL_MspInit+0x44>)
 8003254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003256:	4a0e      	ldr	r2, [pc, #56]	@ (8003290 <HAL_MspInit+0x44>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6613      	str	r3, [r2, #96]	@ 0x60
 800325e:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <HAL_MspInit+0x44>)
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <HAL_MspInit+0x44>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	4a08      	ldr	r2, [pc, #32]	@ (8003290 <HAL_MspInit+0x44>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6593      	str	r3, [r2, #88]	@ 0x58
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_MspInit+0x44>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b0b0      	sub	sp, #192	@ 0xc0
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	229c      	movs	r2, #156	@ 0x9c
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f006 fa64 	bl	8009782 <memset>
  if(hi2c->Instance==I2C3)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a23      	ldr	r2, [pc, #140]	@ (800334c <HAL_I2C_MspInit+0xb8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d13e      	bne.n	8003342 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80032c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80032ca:	2300      	movs	r3, #0
 80032cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ce:	f107 0310 	add.w	r3, r7, #16
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fcb2 	bl	8005c3c <HAL_RCCEx_PeriphCLKConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80032de:	f7ff ff01 	bl	80030e4 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003350 <HAL_I2C_MspInit+0xbc>)
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003350 <HAL_I2C_MspInit+0xbc>)
 80032e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032ee:	4b18      	ldr	r3, [pc, #96]	@ (8003350 <HAL_I2C_MspInit+0xbc>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80032fa:	f001 fdbb 	bl	8004e74 <HAL_PWREx_EnableVddIO2>
    /**I2C3 GPIO Configuration
    PG8     ------> I2C3_SDA
    PG7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 80032fe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003302:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003306:	2312      	movs	r3, #18
 8003308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003312:	2303      	movs	r3, #3
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003318:	2304      	movs	r3, #4
 800331a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800331e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003322:	4619      	mov	r1, r3
 8003324:	480b      	ldr	r0, [pc, #44]	@ (8003354 <HAL_I2C_MspInit+0xc0>)
 8003326:	f000 fc27 	bl	8003b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800332a:	4b09      	ldr	r3, [pc, #36]	@ (8003350 <HAL_I2C_MspInit+0xbc>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332e:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <HAL_I2C_MspInit+0xbc>)
 8003330:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003334:	6593      	str	r3, [r2, #88]	@ 0x58
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_I2C_MspInit+0xbc>)
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003342:	bf00      	nop
 8003344:	37c0      	adds	r7, #192	@ 0xc0
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40005c00 	.word	0x40005c00
 8003350:	40021000 	.word	0x40021000
 8003354:	48001800 	.word	0x48001800

08003358 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b0b0      	sub	sp, #192	@ 0xc0
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	229c      	movs	r2, #156	@ 0x9c
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f006 fa02 	bl	8009782 <memset>
  if(huart->Instance==USART2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a21      	ldr	r2, [pc, #132]	@ (8003408 <HAL_UART_MspInit+0xb0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d13b      	bne.n	8003400 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003388:	2302      	movs	r3, #2
 800338a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800338c:	2300      	movs	r3, #0
 800338e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003390:	f107 0310 	add.w	r3, r7, #16
 8003394:	4618      	mov	r0, r3
 8003396:	f002 fc51 	bl	8005c3c <HAL_RCCEx_PeriphCLKConfig>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033a0:	f7ff fea0 	bl	80030e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_UART_MspInit+0xb4>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a8:	4a18      	ldr	r2, [pc, #96]	@ (800340c <HAL_UART_MspInit+0xb4>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b0:	4b16      	ldr	r3, [pc, #88]	@ (800340c <HAL_UART_MspInit+0xb4>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033bc:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_UART_MspInit+0xb4>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c0:	4a12      	ldr	r2, [pc, #72]	@ (800340c <HAL_UART_MspInit+0xb4>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033c8:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_UART_MspInit+0xb4>)
 80033ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80033d4:	230c      	movs	r3, #12
 80033d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033da:	2302      	movs	r3, #2
 80033dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e6:	2303      	movs	r3, #3
 80033e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033ec:	2307      	movs	r3, #7
 80033ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80033f6:	4619      	mov	r1, r3
 80033f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033fc:	f000 fbbc 	bl	8003b78 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003400:	bf00      	nop
 8003402:	37c0      	adds	r7, #192	@ 0xc0
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40004400 	.word	0x40004400
 800340c:	40021000 	.word	0x40021000

08003410 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003424:	4b32      	ldr	r3, [pc, #200]	@ (80034f0 <HAL_FMC_MspInit+0xe0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d15d      	bne.n	80034e8 <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 800342c:	4b30      	ldr	r3, [pc, #192]	@ (80034f0 <HAL_FMC_MspInit+0xe0>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003432:	4b30      	ldr	r3, [pc, #192]	@ (80034f4 <HAL_FMC_MspInit+0xe4>)
 8003434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003436:	4a2f      	ldr	r2, [pc, #188]	@ (80034f4 <HAL_FMC_MspInit+0xe4>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6513      	str	r3, [r2, #80]	@ 0x50
 800343e:	4b2d      	ldr	r3, [pc, #180]	@ (80034f4 <HAL_FMC_MspInit+0xe4>)
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 800344a:	f64f 739b 	movw	r3, #65435	@ 0xff9b
 800344e:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003458:	2303      	movs	r3, #3
 800345a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800345c:	230c      	movs	r3, #12
 800345e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	4619      	mov	r1, r3
 8003464:	4824      	ldr	r0, [pc, #144]	@ (80034f8 <HAL_FMC_MspInit+0xe8>)
 8003466:	f000 fb87 	bl	8003b78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800346a:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 800346e:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2302      	movs	r3, #2
 8003472:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003478:	2303      	movs	r3, #3
 800347a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800347c:	230c      	movs	r3, #12
 800347e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	4619      	mov	r1, r3
 8003484:	481d      	ldr	r0, [pc, #116]	@ (80034fc <HAL_FMC_MspInit+0xec>)
 8003486:	f000 fb77 	bl	8003b78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2302      	movs	r3, #2
 8003490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003496:	2303      	movs	r3, #3
 8003498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800349a:	230c      	movs	r3, #12
 800349c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4817      	ldr	r0, [pc, #92]	@ (8003500 <HAL_FMC_MspInit+0xf0>)
 80034a4:	f000 fb68 	bl	8003b78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80034a8:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 80034ac:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	2302      	movs	r3, #2
 80034b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b6:	2303      	movs	r3, #3
 80034b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034ba:	230c      	movs	r3, #12
 80034bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4810      	ldr	r0, [pc, #64]	@ (8003504 <HAL_FMC_MspInit+0xf4>)
 80034c4:	f000 fb58 	bl	8003b78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80034c8:	233f      	movs	r3, #63	@ 0x3f
 80034ca:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d4:	2303      	movs	r3, #3
 80034d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034d8:	230c      	movs	r3, #12
 80034da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	4619      	mov	r1, r3
 80034e0:	4809      	ldr	r0, [pc, #36]	@ (8003508 <HAL_FMC_MspInit+0xf8>)
 80034e2:	f000 fb49 	bl	8003b78 <HAL_GPIO_Init>
 80034e6:	e000      	b.n	80034ea <HAL_FMC_MspInit+0xda>
    return;
 80034e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20040420 	.word	0x20040420
 80034f4:	40021000 	.word	0x40021000
 80034f8:	48001000 	.word	0x48001000
 80034fc:	48000c00 	.word	0x48000c00
 8003500:	48000400 	.word	0x48000400
 8003504:	48001400 	.word	0x48001400
 8003508:	48001800 	.word	0x48001800

0800350c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003514:	f7ff ff7c 	bl	8003410 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0b0      	sub	sp, #192	@ 0xc0
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003528:	f107 0310 	add.w	r3, r7, #16
 800352c:	229c      	movs	r2, #156	@ 0x9c
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f006 f926 	bl	8009782 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a32      	ldr	r2, [pc, #200]	@ (8003604 <HAL_SAI_MspInit+0xe4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d15d      	bne.n	80035fc <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8003540:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003544:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8003546:	2300      	movs	r3, #0
 8003548:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800354a:	2301      	movs	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003552:	2310      	movs	r3, #16
 8003554:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8003556:	2302      	movs	r3, #2
 8003558:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800355a:	2302      	movs	r3, #2
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800355e:	2302      	movs	r3, #2
 8003560:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8003562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003568:	f107 0310 	add.w	r3, r7, #16
 800356c:	4618      	mov	r0, r3
 800356e:	f002 fb65 	bl	8005c3c <HAL_RCCEx_PeriphCLKConfig>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8003578:	f7ff fdb4 	bl	80030e4 <Error_Handler>
    }

    if (SAI1_client == 0)
 800357c:	4b22      	ldr	r3, [pc, #136]	@ (8003608 <HAL_SAI_MspInit+0xe8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003584:	4b21      	ldr	r3, [pc, #132]	@ (800360c <HAL_SAI_MspInit+0xec>)
 8003586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003588:	4a20      	ldr	r2, [pc, #128]	@ (800360c <HAL_SAI_MspInit+0xec>)
 800358a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800358e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003590:	4b1e      	ldr	r3, [pc, #120]	@ (800360c <HAL_SAI_MspInit+0xec>)
 8003592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800359c:	4b1a      	ldr	r3, [pc, #104]	@ (8003608 <HAL_SAI_MspInit+0xe8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a19      	ldr	r2, [pc, #100]	@ (8003608 <HAL_SAI_MspInit+0xe8>)
 80035a4:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 80035a6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80035aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80035c0:	230d      	movs	r3, #13
 80035c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80035ca:	4619      	mov	r1, r3
 80035cc:	4810      	ldr	r0, [pc, #64]	@ (8003610 <HAL_SAI_MspInit+0xf0>)
 80035ce:	f000 fad3 	bl	8003b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 80035d2:	2364      	movs	r3, #100	@ 0x64
 80035d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80035ea:	230d      	movs	r3, #13
 80035ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80035f4:	4619      	mov	r1, r3
 80035f6:	4807      	ldr	r0, [pc, #28]	@ (8003614 <HAL_SAI_MspInit+0xf4>)
 80035f8:	f000 fabe 	bl	8003b78 <HAL_GPIO_Init>

    }
}
 80035fc:	bf00      	nop
 80035fe:	37c0      	adds	r7, #192	@ 0xc0
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40015404 	.word	0x40015404
 8003608:	20040424 	.word	0x20040424
 800360c:	40021000 	.word	0x40021000
 8003610:	48000400 	.word	0x48000400
 8003614:	48001000 	.word	0x48001000

08003618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <NMI_Handler+0x4>

08003620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <HardFault_Handler+0x4>

08003628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <MemManage_Handler+0x4>

08003630 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <BusFault_Handler+0x4>

08003638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <UsageFault_Handler+0x4>

08003640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800366e:	f000 f959 	bl	8003924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}

08003676 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003676:	b480      	push	{r7}
 8003678:	af00      	add	r7, sp, #0
  return 1;
 800367a:	2301      	movs	r3, #1
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <_kill>:

int _kill(int pid, int sig)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003690:	f006 f8ca 	bl	8009828 <__errno>
 8003694:	4603      	mov	r3, r0
 8003696:	2216      	movs	r2, #22
 8003698:	601a      	str	r2, [r3, #0]
  return -1;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <_exit>:

void _exit (int status)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036ae:	f04f 31ff 	mov.w	r1, #4294967295
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff ffe7 	bl	8003686 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <_exit+0x12>

080036bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	e00a      	b.n	80036e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036ce:	f3af 8000 	nop.w
 80036d2:	4601      	mov	r1, r0
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	60ba      	str	r2, [r7, #8]
 80036da:	b2ca      	uxtb	r2, r1
 80036dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	3301      	adds	r3, #1
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	dbf0      	blt.n	80036ce <_read+0x12>
  }

  return len;
 80036ec:	687b      	ldr	r3, [r7, #4]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	e009      	b.n	800371c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	60ba      	str	r2, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	dbf1      	blt.n	8003708 <_write+0x12>
  }
  return len;
 8003724:	687b      	ldr	r3, [r7, #4]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <_close>:

int _close(int file)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003756:	605a      	str	r2, [r3, #4]
  return 0;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <_isatty>:

int _isatty(int file)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800376e:	2301      	movs	r3, #1
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a0:	4a14      	ldr	r2, [pc, #80]	@ (80037f4 <_sbrk+0x5c>)
 80037a2:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <_sbrk+0x60>)
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037ac:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <_sbrk+0x64>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b4:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <_sbrk+0x64>)
 80037b6:	4a12      	ldr	r2, [pc, #72]	@ (8003800 <_sbrk+0x68>)
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ba:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <_sbrk+0x64>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d207      	bcs.n	80037d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c8:	f006 f82e 	bl	8009828 <__errno>
 80037cc:	4603      	mov	r3, r0
 80037ce:	220c      	movs	r2, #12
 80037d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	e009      	b.n	80037ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <_sbrk+0x64>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037de:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	4a05      	ldr	r2, [pc, #20]	@ (80037fc <_sbrk+0x64>)
 80037e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ea:	68fb      	ldr	r3, [r7, #12]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200a0000 	.word	0x200a0000
 80037f8:	00000400 	.word	0x00000400
 80037fc:	20040428 	.word	0x20040428
 8003800:	20040580 	.word	0x20040580

08003804 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003808:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <SystemInit+0x20>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	4a05      	ldr	r2, [pc, #20]	@ (8003824 <SystemInit+0x20>)
 8003810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003860 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800382c:	f7ff ffea 	bl	8003804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003830:	480c      	ldr	r0, [pc, #48]	@ (8003864 <LoopForever+0x6>)
  ldr r1, =_edata
 8003832:	490d      	ldr	r1, [pc, #52]	@ (8003868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003834:	4a0d      	ldr	r2, [pc, #52]	@ (800386c <LoopForever+0xe>)
  movs r3, #0
 8003836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003838:	e002      	b.n	8003840 <LoopCopyDataInit>

0800383a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800383a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800383c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800383e:	3304      	adds	r3, #4

08003840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003844:	d3f9      	bcc.n	800383a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003846:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003848:	4c0a      	ldr	r4, [pc, #40]	@ (8003874 <LoopForever+0x16>)
  movs r3, #0
 800384a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800384c:	e001      	b.n	8003852 <LoopFillZerobss>

0800384e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800384e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003850:	3204      	adds	r2, #4

08003852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003854:	d3fb      	bcc.n	800384e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003856:	f005 ffed 	bl	8009834 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800385a:	f7fe fe39 	bl	80024d0 <main>

0800385e <LoopForever>:

LoopForever:
    b LoopForever
 800385e:	e7fe      	b.n	800385e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003860:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003864:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8003868:	200401d4 	.word	0x200401d4
  ldr r2, =_sidata
 800386c:	0800bef4 	.word	0x0800bef4
  ldr r2, =_sbss
 8003870:	200401d4 	.word	0x200401d4
  ldr r4, =_ebss
 8003874:	2004057c 	.word	0x2004057c

08003878 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003878:	e7fe      	b.n	8003878 <ADC1_IRQHandler>

0800387a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003884:	2003      	movs	r0, #3
 8003886:	f000 f943 	bl	8003b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800388a:	2000      	movs	r0, #0
 800388c:	f000 f80e 	bl	80038ac <HAL_InitTick>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	71fb      	strb	r3, [r7, #7]
 800389a:	e001      	b.n	80038a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800389c:	f7ff fcd6 	bl	800324c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038a0:	79fb      	ldrb	r3, [r7, #7]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80038b8:	4b17      	ldr	r3, [pc, #92]	@ (8003918 <HAL_InitTick+0x6c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d023      	beq.n	8003908 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80038c0:	4b16      	ldr	r3, [pc, #88]	@ (800391c <HAL_InitTick+0x70>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <HAL_InitTick+0x6c>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4619      	mov	r1, r3
 80038ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f941 	bl	8003b5e <HAL_SYSTICK_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10f      	bne.n	8003902 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b0f      	cmp	r3, #15
 80038e6:	d809      	bhi.n	80038fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038e8:	2200      	movs	r2, #0
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	f000 f919 	bl	8003b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003920 <HAL_InitTick+0x74>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e007      	b.n	800390c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e004      	b.n	800390c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	e001      	b.n	800390c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20040008 	.word	0x20040008
 800391c:	20040000 	.word	0x20040000
 8003920:	20040004 	.word	0x20040004

08003924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003928:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_IncTick+0x20>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_IncTick+0x24>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4413      	add	r3, r2
 8003934:	4a04      	ldr	r2, [pc, #16]	@ (8003948 <HAL_IncTick+0x24>)
 8003936:	6013      	str	r3, [r2, #0]
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20040008 	.word	0x20040008
 8003948:	2004042c 	.word	0x2004042c

0800394c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return uwTick;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_GetTick+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	2004042c 	.word	0x2004042c

08003964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800396c:	f7ff ffee 	bl	800394c <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d005      	beq.n	800398a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800397e:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <HAL_Delay+0x44>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800398a:	bf00      	nop
 800398c:	f7ff ffde 	bl	800394c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	429a      	cmp	r2, r3
 800399a:	d8f7      	bhi.n	800398c <HAL_Delay+0x28>
  {
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20040008 	.word	0x20040008

080039ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039bc:	4b0c      	ldr	r3, [pc, #48]	@ (80039f0 <__NVIC_SetPriorityGrouping+0x44>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039c8:	4013      	ands	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039de:	4a04      	ldr	r2, [pc, #16]	@ (80039f0 <__NVIC_SetPriorityGrouping+0x44>)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	60d3      	str	r3, [r2, #12]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f8:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <__NVIC_GetPriorityGrouping+0x18>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	f003 0307 	and.w	r3, r3, #7
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db0a      	blt.n	8003a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	490c      	ldr	r1, [pc, #48]	@ (8003a5c <__NVIC_SetPriority+0x4c>)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a38:	e00a      	b.n	8003a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	4908      	ldr	r1, [pc, #32]	@ (8003a60 <__NVIC_SetPriority+0x50>)
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	3b04      	subs	r3, #4
 8003a48:	0112      	lsls	r2, r2, #4
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	761a      	strb	r2, [r3, #24]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e100 	.word	0xe000e100
 8003a60:	e000ed00 	.word	0xe000ed00

08003a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	@ 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	bf28      	it	cs
 8003a82:	2304      	movcs	r3, #4
 8003a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d902      	bls.n	8003a94 <NVIC_EncodePriority+0x30>
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3b03      	subs	r3, #3
 8003a92:	e000      	b.n	8003a96 <NVIC_EncodePriority+0x32>
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aac:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43d9      	mvns	r1, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	4313      	orrs	r3, r2
         );
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3724      	adds	r7, #36	@ 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003adc:	d301      	bcc.n	8003ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00f      	b.n	8003b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <SysTick_Config+0x40>)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aea:	210f      	movs	r1, #15
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f7ff ff8e 	bl	8003a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <SysTick_Config+0x40>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afa:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <SysTick_Config+0x40>)
 8003afc:	2207      	movs	r2, #7
 8003afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e010 	.word	0xe000e010

08003b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff47 	bl	80039ac <__NVIC_SetPriorityGrouping>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b086      	sub	sp, #24
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b38:	f7ff ff5c 	bl	80039f4 <__NVIC_GetPriorityGrouping>
 8003b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	6978      	ldr	r0, [r7, #20]
 8003b44:	f7ff ff8e 	bl	8003a64 <NVIC_EncodePriority>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ff5d 	bl	8003a10 <__NVIC_SetPriority>
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff ffb0 	bl	8003acc <SysTick_Config>
 8003b6c:	4603      	mov	r3, r0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b86:	e166      	b.n	8003e56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	4013      	ands	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8158 	beq.w	8003e50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d005      	beq.n	8003bb8 <HAL_GPIO_Init+0x40>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d130      	bne.n	8003c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bee:	2201      	movs	r2, #1
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0201 	and.w	r2, r3, #1
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d017      	beq.n	8003c56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2203      	movs	r2, #3
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d123      	bne.n	8003caa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	08da      	lsrs	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3208      	adds	r2, #8
 8003c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	220f      	movs	r2, #15
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	08da      	lsrs	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3208      	adds	r2, #8
 8003ca4:	6939      	ldr	r1, [r7, #16]
 8003ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0203 	and.w	r2, r3, #3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80b2 	beq.w	8003e50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cec:	4b61      	ldr	r3, [pc, #388]	@ (8003e74 <HAL_GPIO_Init+0x2fc>)
 8003cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf0:	4a60      	ldr	r2, [pc, #384]	@ (8003e74 <HAL_GPIO_Init+0x2fc>)
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8003e74 <HAL_GPIO_Init+0x2fc>)
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d04:	4a5c      	ldr	r2, [pc, #368]	@ (8003e78 <HAL_GPIO_Init+0x300>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	220f      	movs	r2, #15
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d2e:	d02b      	beq.n	8003d88 <HAL_GPIO_Init+0x210>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a52      	ldr	r2, [pc, #328]	@ (8003e7c <HAL_GPIO_Init+0x304>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d025      	beq.n	8003d84 <HAL_GPIO_Init+0x20c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a51      	ldr	r2, [pc, #324]	@ (8003e80 <HAL_GPIO_Init+0x308>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d01f      	beq.n	8003d80 <HAL_GPIO_Init+0x208>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a50      	ldr	r2, [pc, #320]	@ (8003e84 <HAL_GPIO_Init+0x30c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d019      	beq.n	8003d7c <HAL_GPIO_Init+0x204>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4f      	ldr	r2, [pc, #316]	@ (8003e88 <HAL_GPIO_Init+0x310>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <HAL_GPIO_Init+0x200>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a4e      	ldr	r2, [pc, #312]	@ (8003e8c <HAL_GPIO_Init+0x314>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00d      	beq.n	8003d74 <HAL_GPIO_Init+0x1fc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a4d      	ldr	r2, [pc, #308]	@ (8003e90 <HAL_GPIO_Init+0x318>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <HAL_GPIO_Init+0x1f8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a4c      	ldr	r2, [pc, #304]	@ (8003e94 <HAL_GPIO_Init+0x31c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_GPIO_Init+0x1f4>
 8003d68:	2307      	movs	r3, #7
 8003d6a:	e00e      	b.n	8003d8a <HAL_GPIO_Init+0x212>
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	e00c      	b.n	8003d8a <HAL_GPIO_Init+0x212>
 8003d70:	2306      	movs	r3, #6
 8003d72:	e00a      	b.n	8003d8a <HAL_GPIO_Init+0x212>
 8003d74:	2305      	movs	r3, #5
 8003d76:	e008      	b.n	8003d8a <HAL_GPIO_Init+0x212>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	e006      	b.n	8003d8a <HAL_GPIO_Init+0x212>
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e004      	b.n	8003d8a <HAL_GPIO_Init+0x212>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e002      	b.n	8003d8a <HAL_GPIO_Init+0x212>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_GPIO_Init+0x212>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	f002 0203 	and.w	r2, r2, #3
 8003d90:	0092      	lsls	r2, r2, #2
 8003d92:	4093      	lsls	r3, r2
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d9a:	4937      	ldr	r1, [pc, #220]	@ (8003e78 <HAL_GPIO_Init+0x300>)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	3302      	adds	r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003da8:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <HAL_GPIO_Init+0x320>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dcc:	4a32      	ldr	r2, [pc, #200]	@ (8003e98 <HAL_GPIO_Init+0x320>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dd2:	4b31      	ldr	r3, [pc, #196]	@ (8003e98 <HAL_GPIO_Init+0x320>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003df6:	4a28      	ldr	r2, [pc, #160]	@ (8003e98 <HAL_GPIO_Init+0x320>)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dfc:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <HAL_GPIO_Init+0x320>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e20:	4a1d      	ldr	r2, [pc, #116]	@ (8003e98 <HAL_GPIO_Init+0x320>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e26:	4b1c      	ldr	r3, [pc, #112]	@ (8003e98 <HAL_GPIO_Init+0x320>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e4a:	4a13      	ldr	r2, [pc, #76]	@ (8003e98 <HAL_GPIO_Init+0x320>)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3301      	adds	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f47f ae91 	bne.w	8003b88 <HAL_GPIO_Init+0x10>
  }
}
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	48000400 	.word	0x48000400
 8003e80:	48000800 	.word	0x48000800
 8003e84:	48000c00 	.word	0x48000c00
 8003e88:	48001000 	.word	0x48001000
 8003e8c:	48001400 	.word	0x48001400
 8003e90:	48001800 	.word	0x48001800
 8003e94:	48001c00 	.word	0x48001c00
 8003e98:	40010400 	.word	0x40010400

08003e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	807b      	strh	r3, [r7, #2]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eac:	787b      	ldrb	r3, [r7, #1]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eb8:	e002      	b.n	8003ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eba:	887a      	ldrh	r2, [r7, #2]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e08d      	b.n	8003ffa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff f9ce 	bl	8003294 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	@ 0x24
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	e006      	b.n	8003f54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d108      	bne.n	8003f6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	e007      	b.n	8003f7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */

	  CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69d9      	ldr	r1, [r3, #28]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1a      	ldr	r2, [r3, #32]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	461a      	mov	r2, r3
 8004012:	4603      	mov	r3, r0
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	460b      	mov	r3, r1
 8004018:	813b      	strh	r3, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b20      	cmp	r3, #32
 8004028:	f040 80f9 	bne.w	800421e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_I2C_Mem_Write+0x34>
 8004032:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0ed      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_I2C_Mem_Write+0x4e>
 800404e:	2302      	movs	r3, #2
 8004050:	e0e6      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800405a:	f7ff fc77 	bl	800394c <HAL_GetTick>
 800405e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	2319      	movs	r3, #25
 8004066:	2201      	movs	r2, #1
 8004068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 fbaf 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0d1      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2221      	movs	r2, #33	@ 0x21
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2240      	movs	r2, #64	@ 0x40
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800409c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040a4:	88f8      	ldrh	r0, [r7, #6]
 80040a6:	893a      	ldrh	r2, [r7, #8]
 80040a8:	8979      	ldrh	r1, [r7, #10]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	4603      	mov	r3, r0
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fabf 	bl	8004638 <I2C_RequestMemoryWrite>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0a9      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2bff      	cmp	r3, #255	@ 0xff
 80040d4:	d90e      	bls.n	80040f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	22ff      	movs	r2, #255	@ 0xff
 80040da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	8979      	ldrh	r1, [r7, #10]
 80040e4:	2300      	movs	r3, #0
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fd33 	bl	8004b58 <I2C_TransferConfig>
 80040f2:	e00f      	b.n	8004114 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004102:	b2da      	uxtb	r2, r3
 8004104:	8979      	ldrh	r1, [r7, #10]
 8004106:	2300      	movs	r3, #0
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fd22 	bl	8004b58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fbb2 	bl	8004882 <I2C_WaitOnTXISFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e07b      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d034      	beq.n	80041cc <HAL_I2C_Mem_Write+0x1c8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	2b00      	cmp	r3, #0
 8004168:	d130      	bne.n	80041cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	@ 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fb2b 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e04d      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29b      	uxth	r3, r3
 800418a:	2bff      	cmp	r3, #255	@ 0xff
 800418c:	d90e      	bls.n	80041ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	22ff      	movs	r2, #255	@ 0xff
 8004192:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004198:	b2da      	uxtb	r2, r3
 800419a:	8979      	ldrh	r1, [r7, #10]
 800419c:	2300      	movs	r3, #0
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 fcd7 	bl	8004b58 <I2C_TransferConfig>
 80041aa:	e00f      	b.n	80041cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	8979      	ldrh	r1, [r7, #10]
 80041be:	2300      	movs	r3, #0
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fcc6 	bl	8004b58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d19e      	bne.n	8004114 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fb98 	bl	8004910 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e01a      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2220      	movs	r2, #32
 80041f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004228 <HAL_I2C_Mem_Write+0x224>)
 80041fe:	400b      	ands	r3, r1
 8004200:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800421a:	2300      	movs	r3, #0
 800421c:	e000      	b.n	8004220 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
  }
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	fe00e800 	.word	0xfe00e800

0800422c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4603      	mov	r3, r0
 800423c:	817b      	strh	r3, [r7, #10]
 800423e:	460b      	mov	r3, r1
 8004240:	813b      	strh	r3, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b20      	cmp	r3, #32
 8004250:	f040 80fd 	bne.w	800444e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_I2C_Mem_Read+0x34>
 800425a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004266:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0f1      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_I2C_Mem_Read+0x4e>
 8004276:	2302      	movs	r3, #2
 8004278:	e0ea      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004282:	f7ff fb63 	bl	800394c <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2319      	movs	r3, #25
 800428e:	2201      	movs	r2, #1
 8004290:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fa9b 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0d5      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2222      	movs	r2, #34	@ 0x22
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2240      	movs	r2, #64	@ 0x40
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042cc:	88f8      	ldrh	r0, [r7, #6]
 80042ce:	893a      	ldrh	r2, [r7, #8]
 80042d0:	8979      	ldrh	r1, [r7, #10]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	4603      	mov	r3, r0
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f9ff 	bl	80046e0 <I2C_RequestMemoryRead>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0ad      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2bff      	cmp	r3, #255	@ 0xff
 80042fc:	d90e      	bls.n	800431c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004308:	b2da      	uxtb	r2, r3
 800430a:	8979      	ldrh	r1, [r7, #10]
 800430c:	4b52      	ldr	r3, [pc, #328]	@ (8004458 <HAL_I2C_Mem_Read+0x22c>)
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fc1f 	bl	8004b58 <I2C_TransferConfig>
 800431a:	e00f      	b.n	800433c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432a:	b2da      	uxtb	r2, r3
 800432c:	8979      	ldrh	r1, [r7, #10]
 800432e:	4b4a      	ldr	r3, [pc, #296]	@ (8004458 <HAL_I2C_Mem_Read+0x22c>)
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fc0e 	bl	8004b58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004342:	2200      	movs	r2, #0
 8004344:	2104      	movs	r1, #4
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fa42 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e07c      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d034      	beq.n	80043fc <HAL_I2C_Mem_Read+0x1d0>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d130      	bne.n	80043fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	2200      	movs	r2, #0
 80043a2:	2180      	movs	r1, #128	@ 0x80
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fa13 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e04d      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2bff      	cmp	r3, #255	@ 0xff
 80043bc:	d90e      	bls.n	80043dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	8979      	ldrh	r1, [r7, #10]
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fbbf 	bl	8004b58 <I2C_TransferConfig>
 80043da:	e00f      	b.n	80043fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	8979      	ldrh	r1, [r7, #10]
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fbae 	bl	8004b58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d19a      	bne.n	800433c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fa80 	bl	8004910 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e01a      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2220      	movs	r2, #32
 8004420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <HAL_I2C_Mem_Read+0x230>)
 800442e:	400b      	ands	r3, r1
 8004430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	80002400 	.word	0x80002400
 800445c:	fe00e800 	.word	0xfe00e800

08004460 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	@ 0x28
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	460b      	mov	r3, r1
 800446e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b20      	cmp	r3, #32
 800447e:	f040 80d6 	bne.w	800462e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004490:	d101      	bne.n	8004496 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
 8004494:	e0cc      	b.n	8004630 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_I2C_IsDeviceReady+0x44>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0c5      	b.n	8004630 <HAL_I2C_IsDeviceReady+0x1d0>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2224      	movs	r2, #36	@ 0x24
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d107      	bne.n	80044d2 <HAL_I2C_IsDeviceReady+0x72>
 80044c2:	897b      	ldrh	r3, [r7, #10]
 80044c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044d0:	e006      	b.n	80044e0 <HAL_I2C_IsDeviceReady+0x80>
 80044d2:	897b      	ldrh	r3, [r7, #10]
 80044d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80044dc:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80044e6:	f7ff fa31 	bl	800394c <HAL_GetTick>
 80044ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b10      	cmp	r3, #16
 800450e:	bf0c      	ite	eq
 8004510:	2301      	moveq	r3, #1
 8004512:	2300      	movne	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004518:	e034      	b.n	8004584 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d01a      	beq.n	8004558 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7ff fa13 	bl	800394c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <HAL_I2C_IsDeviceReady+0xd8>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10f      	bne.n	8004558 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004544:	f043 0220 	orr.w	r2, r3, #32
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e06b      	b.n	8004630 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b20      	cmp	r3, #32
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b10      	cmp	r3, #16
 800457a:	bf0c      	ite	eq
 800457c:	2301      	moveq	r3, #1
 800457e:	2300      	movne	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004584:	7ffb      	ldrb	r3, [r7, #31]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <HAL_I2C_IsDeviceReady+0x130>
 800458a:	7fbb      	ldrb	r3, [r7, #30]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0c4      	beq.n	800451a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b10      	cmp	r3, #16
 800459c:	d01a      	beq.n	80045d4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2120      	movs	r1, #32
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f911 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e03b      	b.n	8004630 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2220      	movs	r2, #32
 80045be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	e02d      	b.n	8004630 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	2120      	movs	r1, #32
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f8f6 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e020      	b.n	8004630 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2210      	movs	r2, #16
 80045f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2220      	movs	r2, #32
 80045fc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	3301      	adds	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	f63f af56 	bhi.w	80044ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	4603      	mov	r3, r0
 8004648:	817b      	strh	r3, [r7, #10]
 800464a:	460b      	mov	r3, r1
 800464c:	813b      	strh	r3, [r7, #8]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	8979      	ldrh	r1, [r7, #10]
 8004658:	4b20      	ldr	r3, [pc, #128]	@ (80046dc <I2C_RequestMemoryWrite+0xa4>)
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fa79 	bl	8004b58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	69b9      	ldr	r1, [r7, #24]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f909 	bl	8004882 <I2C_WaitOnTXISFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e02c      	b.n	80046d4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004680:	893b      	ldrh	r3, [r7, #8]
 8004682:	b2da      	uxtb	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	629a      	str	r2, [r3, #40]	@ 0x28
 800468a:	e015      	b.n	80046b8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800468c:	893b      	ldrh	r3, [r7, #8]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	b29b      	uxth	r3, r3
 8004692:	b2da      	uxtb	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	69b9      	ldr	r1, [r7, #24]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f8ef 	bl	8004882 <I2C_WaitOnTXISFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e012      	b.n	80046d4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046ae:	893b      	ldrh	r3, [r7, #8]
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2200      	movs	r2, #0
 80046c0:	2180      	movs	r1, #128	@ 0x80
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f884 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	80002000 	.word	0x80002000

080046e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	4608      	mov	r0, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	461a      	mov	r2, r3
 80046ee:	4603      	mov	r3, r0
 80046f0:	817b      	strh	r3, [r7, #10]
 80046f2:	460b      	mov	r3, r1
 80046f4:	813b      	strh	r3, [r7, #8]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	8979      	ldrh	r1, [r7, #10]
 8004700:	4b20      	ldr	r3, [pc, #128]	@ (8004784 <I2C_RequestMemoryRead+0xa4>)
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2300      	movs	r3, #0
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fa26 	bl	8004b58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800470c:	69fa      	ldr	r2, [r7, #28]
 800470e:	69b9      	ldr	r1, [r7, #24]
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f8b6 	bl	8004882 <I2C_WaitOnTXISFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e02c      	b.n	800477a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d105      	bne.n	8004732 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004726:	893b      	ldrh	r3, [r7, #8]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004730:	e015      	b.n	800475e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	b29b      	uxth	r3, r3
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	69b9      	ldr	r1, [r7, #24]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f89c 	bl	8004882 <I2C_WaitOnTXISFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e012      	b.n	800477a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004754:	893b      	ldrh	r3, [r7, #8]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2200      	movs	r2, #0
 8004766:	2140      	movs	r1, #64	@ 0x40
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 f831 	bl	80047d0 <I2C_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	80002000 	.word	0x80002000

08004788 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d103      	bne.n	80047a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d007      	beq.n	80047c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	619a      	str	r2, [r3, #24]
  }
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e0:	e03b      	b.n	800485a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	6839      	ldr	r1, [r7, #0]
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f8d6 	bl	8004998 <I2C_IsErrorOccurred>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e041      	b.n	800487a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d02d      	beq.n	800485a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7ff f8a5 	bl	800394c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <I2C_WaitOnFlagUntilTimeout+0x44>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d122      	bne.n	800485a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	429a      	cmp	r2, r3
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	429a      	cmp	r2, r3
 8004830:	d113      	bne.n	800485a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004836:	f043 0220 	orr.w	r2, r3, #32
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e00f      	b.n	800487a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	429a      	cmp	r2, r3
 8004876:	d0b4      	beq.n	80047e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800488e:	e033      	b.n	80048f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f87f 	bl	8004998 <I2C_IsErrorOccurred>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e031      	b.n	8004908 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048aa:	d025      	beq.n	80048f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7ff f84e 	bl	800394c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d302      	bcc.n	80048c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d11a      	bne.n	80048f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d013      	beq.n	80048f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d4:	f043 0220 	orr.w	r2, r3, #32
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e007      	b.n	8004908 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d1c4      	bne.n	8004890 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800491c:	e02f      	b.n	800497e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f838 	bl	8004998 <I2C_IsErrorOccurred>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e02d      	b.n	800498e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7ff f80b 	bl	800394c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11a      	bne.n	800497e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b20      	cmp	r3, #32
 8004954:	d013      	beq.n	800497e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495a:	f043 0220 	orr.w	r2, r3, #32
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e007      	b.n	800498e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b20      	cmp	r3, #32
 800498a:	d1c8      	bne.n	800491e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	@ 0x28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d068      	beq.n	8004a96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2210      	movs	r2, #16
 80049ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049cc:	e049      	b.n	8004a62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d045      	beq.n	8004a62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049d6:	f7fe ffb9 	bl	800394c <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <I2C_IsErrorOccurred+0x54>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d13a      	bne.n	8004a62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0e:	d121      	bne.n	8004a54 <I2C_IsErrorOccurred+0xbc>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a16:	d01d      	beq.n	8004a54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004a18:	7cfb      	ldrb	r3, [r7, #19]
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d01a      	beq.n	8004a54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a2e:	f7fe ff8d 	bl	800394c <HAL_GetTick>
 8004a32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a34:	e00e      	b.n	8004a54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a36:	f7fe ff89 	bl	800394c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b19      	cmp	r3, #25
 8004a42:	d907      	bls.n	8004a54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	f043 0320 	orr.w	r3, r3, #32
 8004a4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004a52:	e006      	b.n	8004a62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d1e9      	bne.n	8004a36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d003      	beq.n	8004a78 <I2C_IsErrorOccurred+0xe0>
 8004a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0aa      	beq.n	80049ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2220      	movs	r2, #32
 8004a86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	f043 0304 	orr.w	r3, r3, #4
 8004a8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ab8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00b      	beq.n	8004ae2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	f043 0308 	orr.w	r3, r3, #8
 8004ad0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ada:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	f043 0302 	orr.w	r3, r3, #2
 8004af2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004afc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01c      	beq.n	8004b46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7ff fe3b 	bl	8004788 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b54 <I2C_IsErrorOccurred+0x1bc>)
 8004b1e:	400b      	ands	r3, r1
 8004b20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004b46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3728      	adds	r7, #40	@ 0x28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	fe00e800 	.word	0xfe00e800

08004b58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	817b      	strh	r3, [r7, #10]
 8004b66:	4613      	mov	r3, r2
 8004b68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b6a:	897b      	ldrh	r3, [r7, #10]
 8004b6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b70:	7a7b      	ldrb	r3, [r7, #9]
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	0d5b      	lsrs	r3, r3, #21
 8004b92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004b96:	4b08      	ldr	r3, [pc, #32]	@ (8004bb8 <I2C_TransferConfig+0x60>)
 8004b98:	430b      	orrs	r3, r1
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	ea02 0103 	and.w	r1, r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	03ff63ff 	.word	0x03ff63ff

08004bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d138      	bne.n	8004c44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e032      	b.n	8004c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2224      	movs	r2, #36	@ 0x24
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6819      	ldr	r1, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d139      	bne.n	8004cdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e033      	b.n	8004cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2224      	movs	r2, #36	@ 0x24
 8004c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ca4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e000      	b.n	8004cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8004d28 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cfc:	d102      	bne.n	8004d04 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d02:	e00b      	b.n	8004d1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004d04:	4b08      	ldr	r3, [pc, #32]	@ (8004d28 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d12:	d102      	bne.n	8004d1a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d18:	e000      	b.n	8004d1c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d1a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40007000 	.word	0x40007000

08004d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d141      	bne.n	8004dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d46:	d131      	bne.n	8004dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d48:	4b47      	ldr	r3, [pc, #284]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d4e:	4a46      	ldr	r2, [pc, #280]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d58:	4b43      	ldr	r3, [pc, #268]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d60:	4a41      	ldr	r2, [pc, #260]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d68:	4b40      	ldr	r3, [pc, #256]	@ (8004e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2232      	movs	r2, #50	@ 0x32
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	4a3f      	ldr	r2, [pc, #252]	@ (8004e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d74:	fba2 2303 	umull	r2, r3, r2, r3
 8004d78:	0c9b      	lsrs	r3, r3, #18
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d7e:	e002      	b.n	8004d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d86:	4b38      	ldr	r3, [pc, #224]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d92:	d102      	bne.n	8004d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f2      	bne.n	8004d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d9a:	4b33      	ldr	r3, [pc, #204]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004da6:	d158      	bne.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e057      	b.n	8004e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dac:	4b2e      	ldr	r3, [pc, #184]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004db2:	4a2d      	ldr	r2, [pc, #180]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004dbc:	e04d      	b.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dc4:	d141      	bne.n	8004e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dc6:	4b28      	ldr	r3, [pc, #160]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd2:	d131      	bne.n	8004e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dd4:	4b24      	ldr	r3, [pc, #144]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dda:	4a23      	ldr	r2, [pc, #140]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004de4:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dec:	4a1e      	ldr	r2, [pc, #120]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004df4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2232      	movs	r2, #50	@ 0x32
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8004e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	0c9b      	lsrs	r3, r3, #18
 8004e06:	3301      	adds	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e0a:	e002      	b.n	8004e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e12:	4b15      	ldr	r3, [pc, #84]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e1e:	d102      	bne.n	8004e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f2      	bne.n	8004e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e26:	4b10      	ldr	r3, [pc, #64]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e32:	d112      	bne.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e011      	b.n	8004e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e38:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e48:	e007      	b.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e4a:	4b07      	ldr	r3, [pc, #28]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e52:	4a05      	ldr	r2, [pc, #20]	@ (8004e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e58:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40007000 	.word	0x40007000
 8004e6c:	20040000 	.word	0x20040000
 8004e70:	431bde83 	.word	0x431bde83

08004e74 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004e78:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4a04      	ldr	r2, [pc, #16]	@ (8004e90 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e82:	6053      	str	r3, [r2, #4]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40007000 	.word	0x40007000

08004e94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f000 bc08 	b.w	80056b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea8:	4b96      	ldr	r3, [pc, #600]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 030c 	and.w	r3, r3, #12
 8004eb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb2:	4b94      	ldr	r3, [pc, #592]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80e4 	beq.w	8005092 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x4c>
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	f040 808b 	bne.w	8004fee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	f040 8087 	bne.w	8004fee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ee0:	4b88      	ldr	r3, [pc, #544]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x64>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e3df      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	4b81      	ldr	r3, [pc, #516]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d004      	beq.n	8004f12 <HAL_RCC_OscConfig+0x7e>
 8004f08:	4b7e      	ldr	r3, [pc, #504]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f10:	e005      	b.n	8004f1e <HAL_RCC_OscConfig+0x8a>
 8004f12:	4b7c      	ldr	r3, [pc, #496]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d223      	bcs.n	8004f6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fdca 	bl	8005ac0 <RCC_SetFlashLatencyFromMSIRange>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e3c0      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f36:	4b73      	ldr	r3, [pc, #460]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a72      	ldr	r2, [pc, #456]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f3c:	f043 0308 	orr.w	r3, r3, #8
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	4b70      	ldr	r3, [pc, #448]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	496d      	ldr	r1, [pc, #436]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f54:	4b6b      	ldr	r3, [pc, #428]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	4968      	ldr	r1, [pc, #416]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
 8004f68:	e025      	b.n	8004fb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f6a:	4b66      	ldr	r3, [pc, #408]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a65      	ldr	r2, [pc, #404]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f70:	f043 0308 	orr.w	r3, r3, #8
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	4b63      	ldr	r3, [pc, #396]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	4960      	ldr	r1, [pc, #384]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f88:	4b5e      	ldr	r3, [pc, #376]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	495b      	ldr	r1, [pc, #364]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fd8a 	bl	8005ac0 <RCC_SetFlashLatencyFromMSIRange>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e380      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fb6:	f000 fcc1 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b51      	ldr	r3, [pc, #324]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	4950      	ldr	r1, [pc, #320]	@ (8005108 <HAL_RCC_OscConfig+0x274>)
 8004fc8:	5ccb      	ldrb	r3, [r1, r3]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800510c <HAL_RCC_OscConfig+0x278>)
 8004fd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fd6:	4b4e      	ldr	r3, [pc, #312]	@ (8005110 <HAL_RCC_OscConfig+0x27c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fc66 	bl	80038ac <HAL_InitTick>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d052      	beq.n	8005090 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	e364      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d032      	beq.n	800505c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ff6:	4b43      	ldr	r3, [pc, #268]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a42      	ldr	r2, [pc, #264]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005002:	f7fe fca3 	bl	800394c <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800500a:	f7fe fc9f 	bl	800394c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e34d      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800501c:	4b39      	ldr	r3, [pc, #228]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005028:	4b36      	ldr	r3, [pc, #216]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a35      	ldr	r2, [pc, #212]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 800502e:	f043 0308 	orr.w	r3, r3, #8
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4b33      	ldr	r3, [pc, #204]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	4930      	ldr	r1, [pc, #192]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005046:	4b2f      	ldr	r3, [pc, #188]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	492b      	ldr	r1, [pc, #172]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8005056:	4313      	orrs	r3, r2
 8005058:	604b      	str	r3, [r1, #4]
 800505a:	e01a      	b.n	8005092 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800505c:	4b29      	ldr	r3, [pc, #164]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a28      	ldr	r2, [pc, #160]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005068:	f7fe fc70 	bl	800394c <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005070:	f7fe fc6c 	bl	800394c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e31a      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005082:	4b20      	ldr	r3, [pc, #128]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x1dc>
 800508e:	e000      	b.n	8005092 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d073      	beq.n	8005186 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_OscConfig+0x21c>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d10e      	bne.n	80050c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d10b      	bne.n	80050c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b0:	4b14      	ldr	r3, [pc, #80]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d063      	beq.n	8005184 <HAL_RCC_OscConfig+0x2f0>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d15f      	bne.n	8005184 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e2f7      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d0:	d106      	bne.n	80050e0 <HAL_RCC_OscConfig+0x24c>
 80050d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a0b      	ldr	r2, [pc, #44]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e025      	b.n	800512c <HAL_RCC_OscConfig+0x298>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050e8:	d114      	bne.n	8005114 <HAL_RCC_OscConfig+0x280>
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a05      	ldr	r2, [pc, #20]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 80050f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	4b03      	ldr	r3, [pc, #12]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a02      	ldr	r2, [pc, #8]	@ (8005104 <HAL_RCC_OscConfig+0x270>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	e013      	b.n	800512c <HAL_RCC_OscConfig+0x298>
 8005104:	40021000 	.word	0x40021000
 8005108:	0800bafc 	.word	0x0800bafc
 800510c:	20040000 	.word	0x20040000
 8005110:	20040004 	.word	0x20040004
 8005114:	4ba0      	ldr	r3, [pc, #640]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a9f      	ldr	r2, [pc, #636]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 800511a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	4b9d      	ldr	r3, [pc, #628]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a9c      	ldr	r2, [pc, #624]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800512a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d013      	beq.n	800515c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fe fc0a 	bl	800394c <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800513c:	f7fe fc06 	bl	800394c <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	@ 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e2b4      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800514e:	4b92      	ldr	r3, [pc, #584]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f0      	beq.n	800513c <HAL_RCC_OscConfig+0x2a8>
 800515a:	e014      	b.n	8005186 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fe fbf6 	bl	800394c <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005164:	f7fe fbf2 	bl	800394c <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b64      	cmp	r3, #100	@ 0x64
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e2a0      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005176:	4b88      	ldr	r3, [pc, #544]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x2d0>
 8005182:	e000      	b.n	8005186 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d060      	beq.n	8005254 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b04      	cmp	r3, #4
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_OscConfig+0x310>
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b0c      	cmp	r3, #12
 800519c:	d119      	bne.n	80051d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d116      	bne.n	80051d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a4:	4b7c      	ldr	r3, [pc, #496]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_OscConfig+0x328>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e27d      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051bc:	4b76      	ldr	r3, [pc, #472]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	061b      	lsls	r3, r3, #24
 80051ca:	4973      	ldr	r1, [pc, #460]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d0:	e040      	b.n	8005254 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d023      	beq.n	8005222 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051da:	4b6f      	ldr	r3, [pc, #444]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a6e      	ldr	r2, [pc, #440]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80051e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e6:	f7fe fbb1 	bl	800394c <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ee:	f7fe fbad 	bl	800394c <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e25b      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005200:	4b65      	ldr	r3, [pc, #404]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520c:	4b62      	ldr	r3, [pc, #392]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	061b      	lsls	r3, r3, #24
 800521a:	495f      	ldr	r1, [pc, #380]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 800521c:	4313      	orrs	r3, r2
 800521e:	604b      	str	r3, [r1, #4]
 8005220:	e018      	b.n	8005254 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005222:	4b5d      	ldr	r3, [pc, #372]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5c      	ldr	r2, [pc, #368]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800522c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fe fb8d 	bl	800394c <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005236:	f7fe fb89 	bl	800394c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e237      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005248:	4b53      	ldr	r3, [pc, #332]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f0      	bne.n	8005236 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d03c      	beq.n	80052da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01c      	beq.n	80052a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005268:	4b4b      	ldr	r3, [pc, #300]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 800526a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800526e:	4a4a      	ldr	r2, [pc, #296]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005278:	f7fe fb68 	bl	800394c <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005280:	f7fe fb64 	bl	800394c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e212      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005292:	4b41      	ldr	r3, [pc, #260]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0ef      	beq.n	8005280 <HAL_RCC_OscConfig+0x3ec>
 80052a0:	e01b      	b.n	80052da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80052a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052a8:	4a3b      	ldr	r2, [pc, #236]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b2:	f7fe fb4b 	bl	800394c <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052ba:	f7fe fb47 	bl	800394c <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e1f5      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052cc:	4b32      	ldr	r3, [pc, #200]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80052ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1ef      	bne.n	80052ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80a6 	beq.w	8005434 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e8:	2300      	movs	r3, #0
 80052ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80052ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10d      	bne.n	8005314 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f8:	4b27      	ldr	r3, [pc, #156]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80052fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fc:	4a26      	ldr	r2, [pc, #152]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 80052fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005302:	6593      	str	r3, [r2, #88]	@ 0x58
 8005304:	4b24      	ldr	r3, [pc, #144]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005310:	2301      	movs	r3, #1
 8005312:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005314:	4b21      	ldr	r3, [pc, #132]	@ (800539c <HAL_RCC_OscConfig+0x508>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d118      	bne.n	8005352 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005320:	4b1e      	ldr	r3, [pc, #120]	@ (800539c <HAL_RCC_OscConfig+0x508>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1d      	ldr	r2, [pc, #116]	@ (800539c <HAL_RCC_OscConfig+0x508>)
 8005326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800532a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532c:	f7fe fb0e 	bl	800394c <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005334:	f7fe fb0a 	bl	800394c <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e1b8      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005346:	4b15      	ldr	r3, [pc, #84]	@ (800539c <HAL_RCC_OscConfig+0x508>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f0      	beq.n	8005334 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d108      	bne.n	800536c <HAL_RCC_OscConfig+0x4d8>
 800535a:	4b0f      	ldr	r3, [pc, #60]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005360:	4a0d      	ldr	r2, [pc, #52]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800536a:	e029      	b.n	80053c0 <HAL_RCC_OscConfig+0x52c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b05      	cmp	r3, #5
 8005372:	d115      	bne.n	80053a0 <HAL_RCC_OscConfig+0x50c>
 8005374:	4b08      	ldr	r3, [pc, #32]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537a:	4a07      	ldr	r2, [pc, #28]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 800537c:	f043 0304 	orr.w	r3, r3, #4
 8005380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005384:	4b04      	ldr	r3, [pc, #16]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538a:	4a03      	ldr	r2, [pc, #12]	@ (8005398 <HAL_RCC_OscConfig+0x504>)
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005394:	e014      	b.n	80053c0 <HAL_RCC_OscConfig+0x52c>
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
 800539c:	40007000 	.word	0x40007000
 80053a0:	4b9d      	ldr	r3, [pc, #628]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a6:	4a9c      	ldr	r2, [pc, #624]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053b0:	4b99      	ldr	r3, [pc, #612]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b6:	4a98      	ldr	r2, [pc, #608]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d016      	beq.n	80053f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c8:	f7fe fac0 	bl	800394c <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ce:	e00a      	b.n	80053e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d0:	f7fe fabc 	bl	800394c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e168      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e6:	4b8c      	ldr	r3, [pc, #560]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ed      	beq.n	80053d0 <HAL_RCC_OscConfig+0x53c>
 80053f4:	e015      	b.n	8005422 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f6:	f7fe faa9 	bl	800394c <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053fc:	e00a      	b.n	8005414 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fe faa5 	bl	800394c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e151      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005414:	4b80      	ldr	r3, [pc, #512]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1ed      	bne.n	80053fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005422:	7ffb      	ldrb	r3, [r7, #31]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d105      	bne.n	8005434 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005428:	4b7b      	ldr	r3, [pc, #492]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 800542a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542c:	4a7a      	ldr	r2, [pc, #488]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 800542e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005432:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d03c      	beq.n	80054ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01c      	beq.n	8005482 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005448:	4b73      	ldr	r3, [pc, #460]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 800544a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800544e:	4a72      	ldr	r2, [pc, #456]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fe fa78 	bl	800394c <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005460:	f7fe fa74 	bl	800394c <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e122      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005472:	4b69      	ldr	r3, [pc, #420]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005474:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0ef      	beq.n	8005460 <HAL_RCC_OscConfig+0x5cc>
 8005480:	e01b      	b.n	80054ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005482:	4b65      	ldr	r3, [pc, #404]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005484:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005488:	4a63      	ldr	r2, [pc, #396]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 800548a:	f023 0301 	bic.w	r3, r3, #1
 800548e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005492:	f7fe fa5b 	bl	800394c <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800549a:	f7fe fa57 	bl	800394c <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e105      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80054ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1ef      	bne.n	800549a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80f9 	beq.w	80056b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	f040 80cf 	bne.w	800566c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054ce:	4b52      	ldr	r3, [pc, #328]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 0203 	and.w	r2, r3, #3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054de:	429a      	cmp	r2, r3
 80054e0:	d12c      	bne.n	800553c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ec:	3b01      	subs	r3, #1
 80054ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d123      	bne.n	800553c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d11b      	bne.n	800553c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d113      	bne.n	800553c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	3b01      	subs	r3, #1
 8005522:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005524:	429a      	cmp	r2, r3
 8005526:	d109      	bne.n	800553c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	3b01      	subs	r3, #1
 8005536:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005538:	429a      	cmp	r2, r3
 800553a:	d071      	beq.n	8005620 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b0c      	cmp	r3, #12
 8005540:	d068      	beq.n	8005614 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005542:	4b35      	ldr	r3, [pc, #212]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d105      	bne.n	800555a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800554e:	4b32      	ldr	r3, [pc, #200]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e0ac      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800555e:	4b2e      	ldr	r3, [pc, #184]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a2d      	ldr	r2, [pc, #180]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005564:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005568:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800556a:	f7fe f9ef 	bl	800394c <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005572:	f7fe f9eb 	bl	800394c <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e099      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005584:	4b24      	ldr	r3, [pc, #144]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f0      	bne.n	8005572 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005590:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	4b21      	ldr	r3, [pc, #132]	@ (800561c <HAL_RCC_OscConfig+0x788>)
 8005596:	4013      	ands	r3, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80055a0:	3a01      	subs	r2, #1
 80055a2:	0112      	lsls	r2, r2, #4
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055aa:	0212      	lsls	r2, r2, #8
 80055ac:	4311      	orrs	r1, r2
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055b2:	0852      	lsrs	r2, r2, #1
 80055b4:	3a01      	subs	r2, #1
 80055b6:	0552      	lsls	r2, r2, #21
 80055b8:	4311      	orrs	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80055be:	0852      	lsrs	r2, r2, #1
 80055c0:	3a01      	subs	r2, #1
 80055c2:	0652      	lsls	r2, r2, #25
 80055c4:	4311      	orrs	r1, r2
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80055ca:	06d2      	lsls	r2, r2, #27
 80055cc:	430a      	orrs	r2, r1
 80055ce:	4912      	ldr	r1, [pc, #72]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055d4:	4b10      	ldr	r3, [pc, #64]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80055da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 80055e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055ec:	f7fe f9ae 	bl	800394c <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f4:	f7fe f9aa 	bl	800394c <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e058      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005606:	4b04      	ldr	r3, [pc, #16]	@ (8005618 <HAL_RCC_OscConfig+0x784>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005612:	e050      	b.n	80056b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e04f      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
 8005618:	40021000 	.word	0x40021000
 800561c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005620:	4b27      	ldr	r3, [pc, #156]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d144      	bne.n	80056b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800562c:	4b24      	ldr	r3, [pc, #144]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a23      	ldr	r2, [pc, #140]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 8005632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005636:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005638:	4b21      	ldr	r3, [pc, #132]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a20      	ldr	r2, [pc, #128]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 800563e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005642:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005644:	f7fe f982 	bl	800394c <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564c:	f7fe f97e 	bl	800394c <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e02c      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565e:	4b18      	ldr	r3, [pc, #96]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0x7b8>
 800566a:	e024      	b.n	80056b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b0c      	cmp	r3, #12
 8005670:	d01f      	beq.n	80056b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005672:	4b13      	ldr	r3, [pc, #76]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a12      	ldr	r2, [pc, #72]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 8005678:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800567c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567e:	f7fe f965 	bl	800394c <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005686:	f7fe f961 	bl	800394c <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e00f      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005698:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80056a4:	4b06      	ldr	r3, [pc, #24]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	4905      	ldr	r1, [pc, #20]	@ (80056c0 <HAL_RCC_OscConfig+0x82c>)
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <HAL_RCC_OscConfig+0x830>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	60cb      	str	r3, [r1, #12]
 80056b0:	e001      	b.n	80056b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40021000 	.word	0x40021000
 80056c4:	feeefffc 	.word	0xfeeefffc

080056c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e11d      	b.n	800591c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056e0:	4b90      	ldr	r3, [pc, #576]	@ (8005924 <HAL_RCC_ClockConfig+0x25c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d910      	bls.n	8005710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005924 <HAL_RCC_ClockConfig+0x25c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f023 020f 	bic.w	r2, r3, #15
 80056f6:	498b      	ldr	r1, [pc, #556]	@ (8005924 <HAL_RCC_ClockConfig+0x25c>)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	4b89      	ldr	r3, [pc, #548]	@ (8005924 <HAL_RCC_ClockConfig+0x25c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e105      	b.n	800591c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d010      	beq.n	800573e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	4b81      	ldr	r3, [pc, #516]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005728:	429a      	cmp	r2, r3
 800572a:	d908      	bls.n	800573e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800572c:	4b7e      	ldr	r3, [pc, #504]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	497b      	ldr	r1, [pc, #492]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d079      	beq.n	800583e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b03      	cmp	r3, #3
 8005750:	d11e      	bne.n	8005790 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005752:	4b75      	ldr	r3, [pc, #468]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e0dc      	b.n	800591c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005762:	f000 fa07 	bl	8005b74 <RCC_GetSysClockFreqFromPLLSource>
 8005766:	4603      	mov	r3, r0
 8005768:	4a70      	ldr	r2, [pc, #448]	@ (800592c <HAL_RCC_ClockConfig+0x264>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d946      	bls.n	80057fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800576e:	4b6e      	ldr	r3, [pc, #440]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d140      	bne.n	80057fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800577a:	4b6b      	ldr	r3, [pc, #428]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005782:	4a69      	ldr	r2, [pc, #420]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 8005784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005788:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800578a:	2380      	movs	r3, #128	@ 0x80
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e035      	b.n	80057fc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d107      	bne.n	80057a8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005798:	4b63      	ldr	r3, [pc, #396]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d115      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0b9      	b.n	800591c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d107      	bne.n	80057c0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057b0:	4b5d      	ldr	r3, [pc, #372]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e0ad      	b.n	800591c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057c0:	4b59      	ldr	r3, [pc, #356]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e0a5      	b.n	800591c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80057d0:	f000 f8b4 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80057d4:	4603      	mov	r3, r0
 80057d6:	4a55      	ldr	r2, [pc, #340]	@ (800592c <HAL_RCC_ClockConfig+0x264>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d90f      	bls.n	80057fc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057dc:	4b52      	ldr	r3, [pc, #328]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80057f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057f8:	2380      	movs	r3, #128	@ 0x80
 80057fa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057fc:	4b4a      	ldr	r3, [pc, #296]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f023 0203 	bic.w	r2, r3, #3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4947      	ldr	r1, [pc, #284]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 800580a:	4313      	orrs	r3, r2
 800580c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580e:	f7fe f89d 	bl	800394c <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005814:	e00a      	b.n	800582c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005816:	f7fe f899 	bl	800394c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e077      	b.n	800591c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582c:	4b3e      	ldr	r3, [pc, #248]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 020c 	and.w	r2, r3, #12
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	429a      	cmp	r2, r3
 800583c:	d1eb      	bne.n	8005816 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b80      	cmp	r3, #128	@ 0x80
 8005842:	d105      	bne.n	8005850 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005844:	4b38      	ldr	r3, [pc, #224]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4a37      	ldr	r2, [pc, #220]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 800584a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d010      	beq.n	800587e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	4b31      	ldr	r3, [pc, #196]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005868:	429a      	cmp	r2, r3
 800586a:	d208      	bcs.n	800587e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800586c:	4b2e      	ldr	r3, [pc, #184]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	492b      	ldr	r1, [pc, #172]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 800587a:	4313      	orrs	r3, r2
 800587c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800587e:	4b29      	ldr	r3, [pc, #164]	@ (8005924 <HAL_RCC_ClockConfig+0x25c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d210      	bcs.n	80058ae <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588c:	4b25      	ldr	r3, [pc, #148]	@ (8005924 <HAL_RCC_ClockConfig+0x25c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f023 020f 	bic.w	r2, r3, #15
 8005894:	4923      	ldr	r1, [pc, #140]	@ (8005924 <HAL_RCC_ClockConfig+0x25c>)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589c:	4b21      	ldr	r3, [pc, #132]	@ (8005924 <HAL_RCC_ClockConfig+0x25c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d001      	beq.n	80058ae <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e036      	b.n	800591c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	4918      	ldr	r1, [pc, #96]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d009      	beq.n	80058ec <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058d8:	4b13      	ldr	r3, [pc, #76]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	4910      	ldr	r1, [pc, #64]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058ec:	f000 f826 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005928 <HAL_RCC_ClockConfig+0x260>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	490c      	ldr	r1, [pc, #48]	@ (8005930 <HAL_RCC_ClockConfig+0x268>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	4a0a      	ldr	r2, [pc, #40]	@ (8005934 <HAL_RCC_ClockConfig+0x26c>)
 800590a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800590c:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <HAL_RCC_ClockConfig+0x270>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f7fd ffcb 	bl	80038ac <HAL_InitTick>
 8005916:	4603      	mov	r3, r0
 8005918:	73fb      	strb	r3, [r7, #15]

  return status;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40022000 	.word	0x40022000
 8005928:	40021000 	.word	0x40021000
 800592c:	04c4b400 	.word	0x04c4b400
 8005930:	0800bafc 	.word	0x0800bafc
 8005934:	20040000 	.word	0x20040000
 8005938:	20040004 	.word	0x20040004

0800593c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800593c:	b480      	push	{r7}
 800593e:	b089      	sub	sp, #36	@ 0x24
 8005940:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 030c 	and.w	r3, r3, #12
 8005952:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005954:	4b3b      	ldr	r3, [pc, #236]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0x34>
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b0c      	cmp	r3, #12
 8005968:	d121      	bne.n	80059ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d11e      	bne.n	80059ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005970:	4b34      	ldr	r3, [pc, #208]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800597c:	4b31      	ldr	r3, [pc, #196]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800597e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	e005      	b.n	8005998 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800598c:	4b2d      	ldr	r3, [pc, #180]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005998:	4a2b      	ldr	r2, [pc, #172]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x10c>)
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10d      	bne.n	80059c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ac:	e00a      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d102      	bne.n	80059ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059b4:	4b25      	ldr	r3, [pc, #148]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	e004      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059c0:	4b22      	ldr	r3, [pc, #136]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80059c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b0c      	cmp	r3, #12
 80059c8:	d134      	bne.n	8005a34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d003      	beq.n	80059e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d003      	beq.n	80059e8 <HAL_RCC_GetSysClockFreq+0xac>
 80059e0:	e005      	b.n	80059ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80059e2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80059e4:	617b      	str	r3, [r7, #20]
      break;
 80059e6:	e005      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80059e8:	4b18      	ldr	r3, [pc, #96]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80059ea:	617b      	str	r3, [r7, #20]
      break;
 80059ec:	e002      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	617b      	str	r3, [r7, #20]
      break;
 80059f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059f4:	4b13      	ldr	r3, [pc, #76]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	3301      	adds	r3, #1
 8005a00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a02:	4b10      	ldr	r3, [pc, #64]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	fb03 f202 	mul.w	r2, r3, r2
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	0e5b      	lsrs	r3, r3, #25
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	3301      	adds	r3, #1
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a34:	69bb      	ldr	r3, [r7, #24]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3724      	adds	r7, #36	@ 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40021000 	.word	0x40021000
 8005a48:	0800bb14 	.word	0x0800bb14
 8005a4c:	00f42400 	.word	0x00f42400

08005a50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a54:	4b03      	ldr	r3, [pc, #12]	@ (8005a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a56:	681b      	ldr	r3, [r3, #0]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20040000 	.word	0x20040000

08005a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a6c:	f7ff fff0 	bl	8005a50 <HAL_RCC_GetHCLKFreq>
 8005a70:	4602      	mov	r2, r0
 8005a72:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	4904      	ldr	r1, [pc, #16]	@ (8005a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a7e:	5ccb      	ldrb	r3, [r1, r3]
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	0800bb0c 	.word	0x0800bb0c

08005a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a98:	f7ff ffda 	bl	8005a50 <HAL_RCC_GetHCLKFreq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	0adb      	lsrs	r3, r3, #11
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	4904      	ldr	r1, [pc, #16]	@ (8005abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	0800bb0c 	.word	0x0800bb0c

08005ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ac8:	2300      	movs	r3, #0
 8005aca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005acc:	4b27      	ldr	r3, [pc, #156]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ad8:	f7ff f908 	bl	8004cec <HAL_PWREx_GetVoltageRange>
 8005adc:	6178      	str	r0, [r7, #20]
 8005ade:	e014      	b.n	8005b0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ae0:	4b22      	ldr	r3, [pc, #136]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae4:	4a21      	ldr	r2, [pc, #132]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aec:	4b1f      	ldr	r3, [pc, #124]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005af8:	f7ff f8f8 	bl	8004cec <HAL_PWREx_GetVoltageRange>
 8005afc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005afe:	4b1b      	ldr	r3, [pc, #108]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b02:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b10:	d10b      	bne.n	8005b2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b80      	cmp	r3, #128	@ 0x80
 8005b16:	d913      	bls.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b1c:	d902      	bls.n	8005b24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b1e:	2302      	movs	r3, #2
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	e00d      	b.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b24:	2301      	movs	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	e00a      	b.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b2e:	d902      	bls.n	8005b36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005b30:	2302      	movs	r3, #2
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	e004      	b.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b70      	cmp	r3, #112	@ 0x70
 8005b3a:	d101      	bne.n	8005b40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b40:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f023 020f 	bic.w	r2, r3, #15
 8005b48:	4909      	ldr	r1, [pc, #36]	@ (8005b70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b50:	4b07      	ldr	r3, [pc, #28]	@ (8005b70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d001      	beq.n	8005b62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40022000 	.word	0x40022000

08005b74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d00b      	beq.n	8005ba2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d825      	bhi.n	8005bdc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d008      	beq.n	8005ba8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d11f      	bne.n	8005bdc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005b9c:	4b25      	ldr	r3, [pc, #148]	@ (8005c34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005b9e:	613b      	str	r3, [r7, #16]
    break;
 8005ba0:	e01f      	b.n	8005be2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005ba2:	4b24      	ldr	r3, [pc, #144]	@ (8005c34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ba4:	613b      	str	r3, [r7, #16]
    break;
 8005ba6:	e01c      	b.n	8005be2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ba8:	4b21      	ldr	r3, [pc, #132]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e005      	b.n	8005bd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005bd0:	4a19      	ldr	r2, [pc, #100]	@ (8005c38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd8:	613b      	str	r3, [r7, #16]
    break;
 8005bda:	e002      	b.n	8005be2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	613b      	str	r3, [r7, #16]
    break;
 8005be0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005be2:	4b13      	ldr	r3, [pc, #76]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	3301      	adds	r3, #1
 8005bee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	fb03 f202 	mul.w	r2, r3, r2
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c06:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c08:	4b09      	ldr	r3, [pc, #36]	@ (8005c30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	0e5b      	lsrs	r3, r3, #25
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	3301      	adds	r3, #1
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005c22:	683b      	ldr	r3, [r7, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	371c      	adds	r7, #28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40021000 	.word	0x40021000
 8005c34:	00f42400 	.word	0x00f42400
 8005c38:	0800bb14 	.word	0x0800bb14

08005c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c44:	2300      	movs	r3, #0
 8005c46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c48:	2300      	movs	r3, #0
 8005c4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d040      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c5c:	2b80      	cmp	r3, #128	@ 0x80
 8005c5e:	d02a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c60:	2b80      	cmp	r3, #128	@ 0x80
 8005c62:	d825      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c64:	2b60      	cmp	r3, #96	@ 0x60
 8005c66:	d026      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c68:	2b60      	cmp	r3, #96	@ 0x60
 8005c6a:	d821      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c6c:	2b40      	cmp	r3, #64	@ 0x40
 8005c6e:	d006      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	d81d      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d010      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005c7c:	e018      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c7e:	4b89      	ldr	r3, [pc, #548]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	4a88      	ldr	r2, [pc, #544]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c88:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c8a:	e015      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 fa82 	bl	800719c <RCCEx_PLLSAI1_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c9c:	e00c      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3320      	adds	r3, #32
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fb6d 	bl	8007384 <RCCEx_PLLSAI2_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cae:	e003      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	74fb      	strb	r3, [r7, #19]
      break;
 8005cb4:	e000      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cbe:	4b79      	ldr	r3, [pc, #484]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cc4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ccc:	4975      	ldr	r1, [pc, #468]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005cd4:	e001      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d047      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cee:	d030      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cf4:	d82a      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cfa:	d02a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005cfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d00:	d824      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d06:	d008      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d0c:	d81e      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d16:	d010      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d18:	e018      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d1a:	4b62      	ldr	r3, [pc, #392]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	4a61      	ldr	r2, [pc, #388]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d24:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d26:	e015      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fa34 	bl	800719c <RCCEx_PLLSAI1_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d38:	e00c      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3320      	adds	r3, #32
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 fb1f 	bl	8007384 <RCCEx_PLLSAI2_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d4a:	e003      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	74fb      	strb	r3, [r7, #19]
      break;
 8005d50:	e000      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d54:	7cfb      	ldrb	r3, [r7, #19]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d5a:	4b52      	ldr	r3, [pc, #328]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d68:	494e      	ldr	r1, [pc, #312]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005d70:	e001      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d72:	7cfb      	ldrb	r3, [r7, #19]
 8005d74:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 809f 	beq.w	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d84:	2300      	movs	r3, #0
 8005d86:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d88:	4b46      	ldr	r3, [pc, #280]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9e:	4b41      	ldr	r3, [pc, #260]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da2:	4a40      	ldr	r2, [pc, #256]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005daa:	4b3e      	ldr	r3, [pc, #248]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db6:	2301      	movs	r3, #1
 8005db8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dba:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a3a      	ldr	r2, [pc, #232]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dc6:	f7fd fdc1 	bl	800394c <HAL_GetTick>
 8005dca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dcc:	e009      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dce:	f7fd fdbd 	bl	800394c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d902      	bls.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	74fb      	strb	r3, [r7, #19]
        break;
 8005de0:	e005      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005de2:	4b31      	ldr	r3, [pc, #196]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0ef      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d15b      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005df4:	4b2b      	ldr	r3, [pc, #172]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dfe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01f      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d019      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e12:	4b24      	ldr	r3, [pc, #144]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e1e:	4b21      	ldr	r3, [pc, #132]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e24:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e34:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e3e:	4a19      	ldr	r2, [pc, #100]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fd fd7c 	bl	800394c <HAL_GetTick>
 8005e54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e56:	e00b      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e58:	f7fd fd78 	bl	800394c <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d902      	bls.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	74fb      	strb	r3, [r7, #19]
            break;
 8005e6e:	e006      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ec      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005e7e:	7cfb      	ldrb	r3, [r7, #19]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10c      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e84:	4b07      	ldr	r3, [pc, #28]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e94:	4903      	ldr	r1, [pc, #12]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	74bb      	strb	r3, [r7, #18]
 8005ea2:	e005      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eb0:	7c7b      	ldrb	r3, [r7, #17]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d105      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb6:	4ba0      	ldr	r3, [pc, #640]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eba:	4a9f      	ldr	r2, [pc, #636]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ece:	4b9a      	ldr	r3, [pc, #616]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed4:	f023 0203 	bic.w	r2, r3, #3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005edc:	4996      	ldr	r1, [pc, #600]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ef0:	4b91      	ldr	r3, [pc, #580]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef6:	f023 020c 	bic.w	r2, r3, #12
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efe:	498e      	ldr	r1, [pc, #568]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f12:	4b89      	ldr	r3, [pc, #548]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f20:	4985      	ldr	r1, [pc, #532]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f34:	4b80      	ldr	r3, [pc, #512]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f42:	497d      	ldr	r1, [pc, #500]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f56:	4b78      	ldr	r3, [pc, #480]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f64:	4974      	ldr	r1, [pc, #464]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f78:	4b6f      	ldr	r3, [pc, #444]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f86:	496c      	ldr	r1, [pc, #432]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f9a:	4b67      	ldr	r3, [pc, #412]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa8:	4963      	ldr	r1, [pc, #396]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fca:	495b      	ldr	r1, [pc, #364]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fde:	4b56      	ldr	r3, [pc, #344]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fec:	4952      	ldr	r1, [pc, #328]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006000:	4b4d      	ldr	r3, [pc, #308]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006006:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800600e:	494a      	ldr	r1, [pc, #296]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006022:	4b45      	ldr	r3, [pc, #276]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006028:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006030:	4941      	ldr	r1, [pc, #260]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006044:	4b3c      	ldr	r3, [pc, #240]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006046:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800604a:	f023 0203 	bic.w	r2, r3, #3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006052:	4939      	ldr	r1, [pc, #228]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d028      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006066:	4b34      	ldr	r3, [pc, #208]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006074:	4930      	ldr	r1, [pc, #192]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006084:	d106      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006086:	4b2c      	ldr	r3, [pc, #176]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	4a2b      	ldr	r2, [pc, #172]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006090:	60d3      	str	r3, [r2, #12]
 8006092:	e011      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006098:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800609c:	d10c      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	2101      	movs	r1, #1
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 f879 	bl	800719c <RCCEx_PLLSAI1_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060ae:	7cfb      	ldrb	r3, [r7, #19]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80060b4:	7cfb      	ldrb	r3, [r7, #19]
 80060b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d04d      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060cc:	d108      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80060ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060d4:	4a18      	ldr	r2, [pc, #96]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060da:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80060de:	e012      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80060e0:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060e6:	4a14      	ldr	r2, [pc, #80]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060ec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80060f0:	4b11      	ldr	r3, [pc, #68]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060fe:	490e      	ldr	r1, [pc, #56]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800610a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800610e:	d106      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006110:	4b09      	ldr	r3, [pc, #36]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4a08      	ldr	r2, [pc, #32]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800611a:	60d3      	str	r3, [r2, #12]
 800611c:	e020      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006126:	d109      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006128:	4b03      	ldr	r3, [pc, #12]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4a02      	ldr	r2, [pc, #8]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006132:	60d3      	str	r3, [r2, #12]
 8006134:	e014      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006136:	bf00      	nop
 8006138:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006140:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006144:	d10c      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3304      	adds	r3, #4
 800614a:	2101      	movs	r1, #1
 800614c:	4618      	mov	r0, r3
 800614e:	f001 f825 	bl	800719c <RCCEx_PLLSAI1_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006156:	7cfb      	ldrb	r3, [r7, #19]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800615c:	7cfb      	ldrb	r3, [r7, #19]
 800615e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d028      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800616c:	4b7a      	ldr	r3, [pc, #488]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006172:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800617a:	4977      	ldr	r1, [pc, #476]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800618a:	d106      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800618c:	4b72      	ldr	r3, [pc, #456]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4a71      	ldr	r2, [pc, #452]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006196:	60d3      	str	r3, [r2, #12]
 8006198:	e011      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800619e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061a2:	d10c      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fff6 	bl	800719c <RCCEx_PLLSAI1_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061b4:	7cfb      	ldrb	r3, [r7, #19]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80061ba:	7cfb      	ldrb	r3, [r7, #19]
 80061bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01e      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061ca:	4b63      	ldr	r3, [pc, #396]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061da:	495f      	ldr	r1, [pc, #380]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061ec:	d10c      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
 80061f2:	2102      	movs	r1, #2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 ffd1 	bl	800719c <RCCEx_PLLSAI1_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061fe:	7cfb      	ldrb	r3, [r7, #19]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006204:	7cfb      	ldrb	r3, [r7, #19]
 8006206:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006214:	4b50      	ldr	r3, [pc, #320]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006216:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800621a:	f023 0204 	bic.w	r2, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006224:	494c      	ldr	r1, [pc, #304]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006238:	4b47      	ldr	r3, [pc, #284]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800623a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800623e:	f023 0218 	bic.w	r2, r3, #24
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006248:	4943      	ldr	r1, [pc, #268]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d035      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800625c:	4b3e      	ldr	r3, [pc, #248]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a3d      	ldr	r2, [pc, #244]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006268:	f7fd fb70 	bl	800394c <HAL_GetTick>
 800626c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800626e:	e009      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006270:	f7fd fb6c 	bl	800394c <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d902      	bls.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	74fb      	strb	r3, [r7, #19]
        break;
 8006282:	e005      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006284:	4b34      	ldr	r3, [pc, #208]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1ef      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d113      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006296:	4b30      	ldr	r3, [pc, #192]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800629c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062a6:	492c      	ldr	r1, [pc, #176]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3320      	adds	r3, #32
 80062b2:	2102      	movs	r1, #2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 f865 	bl	8007384 <RCCEx_PLLSAI2_Config>
 80062ba:	4603      	mov	r3, r0
 80062bc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80062be:	7cfb      	ldrb	r3, [r7, #19]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80062c4:	7cfb      	ldrb	r3, [r7, #19]
 80062c6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01e      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80062d4:	4b20      	ldr	r3, [pc, #128]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062e4:	491c      	ldr	r1, [pc, #112]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f6:	d10c      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3320      	adds	r3, #32
 80062fc:	2101      	movs	r1, #1
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 f840 	bl	8007384 <RCCEx_PLLSAI2_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006308:	7cfb      	ldrb	r3, [r7, #19]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800630e:	7cfb      	ldrb	r3, [r7, #19]
 8006310:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d017      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800631e:	4b0e      	ldr	r3, [pc, #56]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006320:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006324:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800632e:	490a      	ldr	r1, [pc, #40]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800633c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006340:	d105      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006342:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	4a04      	ldr	r2, [pc, #16]	@ (8006358 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006348:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800634c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800634e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40021000 	.word	0x40021000

0800635c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800636e:	d13e      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006370:	4bb6      	ldr	r3, [pc, #728]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006376:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800637a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006382:	d028      	beq.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800638a:	f200 86f2 	bhi.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006394:	d005      	beq.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800639c:	d00e      	beq.n	80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800639e:	f000 bee8 	b.w	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063a2:	4baa      	ldr	r3, [pc, #680]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	f040 86e2 	bne.w	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 80063b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063b6:	61fb      	str	r3, [r7, #28]
      break;
 80063b8:	f000 bedd 	b.w	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80063bc:	4ba3      	ldr	r3, [pc, #652]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	f040 86d7 	bne.w	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 80063cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80063d0:	61fb      	str	r3, [r7, #28]
      break;
 80063d2:	f000 bed2 	b.w	800717a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80063d6:	4b9d      	ldr	r3, [pc, #628]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063e2:	f040 86cc 	bne.w	800717e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 80063e6:	4b9a      	ldr	r3, [pc, #616]	@ (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80063e8:	61fb      	str	r3, [r7, #28]
      break;
 80063ea:	f000 bec8 	b.w	800717e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063ee:	4b97      	ldr	r3, [pc, #604]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d036      	beq.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b03      	cmp	r3, #3
 8006402:	d840      	bhi.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d003      	beq.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d020      	beq.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006410:	e039      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006412:	4b8e      	ldr	r3, [pc, #568]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b02      	cmp	r3, #2
 800641c:	d116      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800641e:	4b8b      	ldr	r3, [pc, #556]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0308 	and.w	r3, r3, #8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800642a:	4b88      	ldr	r3, [pc, #544]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	091b      	lsrs	r3, r3, #4
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	e005      	b.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006436:	4b85      	ldr	r3, [pc, #532]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800643c:	0a1b      	lsrs	r3, r3, #8
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	4a84      	ldr	r2, [pc, #528]	@ (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8006444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006448:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800644a:	e01f      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	61bb      	str	r3, [r7, #24]
      break;
 8006450:	e01c      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006452:	4b7e      	ldr	r3, [pc, #504]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800645a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645e:	d102      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006460:	4b7d      	ldr	r3, [pc, #500]	@ (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8006462:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006464:	e012      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
      break;
 800646a:	e00f      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800646c:	4b77      	ldr	r3, [pc, #476]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006478:	d102      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800647a:	4b77      	ldr	r3, [pc, #476]	@ (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800647c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800647e:	e005      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	61bb      	str	r3, [r7, #24]
      break;
 8006484:	e002      	b.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	61bb      	str	r3, [r7, #24]
      break;
 800648a:	bf00      	nop
    }

    switch(PeriphClk)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006492:	f000 8604 	beq.w	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800649c:	f200 8671 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064a6:	f000 8467 	beq.w	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064b0:	f200 8667 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ba:	f000 852f 	beq.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064c4:	f200 865d 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80064ce:	f000 8185 	beq.w	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80064d8:	f200 8653 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064e2:	f000 80cb 	beq.w	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064ec:	f200 8649 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f6:	f000 842e 	beq.w	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006500:	f200 863f 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800650a:	f000 83e2 	beq.w	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006514:	f200 8635 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800651e:	f000 80ad 	beq.w	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006528:	f200 862b 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006532:	f000 809b 	beq.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653c:	f200 8621 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006546:	f000 8089 	beq.w	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006550:	f200 8617 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800655a:	f000 8552 	beq.w	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006564:	f200 860d 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800656e:	f000 84fe 	beq.w	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006578:	f200 8603 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006582:	f000 849f 	beq.w	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800658c:	f200 85f9 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b80      	cmp	r3, #128	@ 0x80
 8006594:	f000 846a 	beq.w	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b80      	cmp	r3, #128	@ 0x80
 800659c:	f200 85f1 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d84c      	bhi.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 85ea 	beq.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3b01      	subs	r3, #1
 80065b2:	2b1f      	cmp	r3, #31
 80065b4:	f200 85e5 	bhi.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 80065b8:	a201      	add	r2, pc, #4	@ (adr r2, 80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	080069d1 	.word	0x080069d1
 80065c4:	08006a3f 	.word	0x08006a3f
 80065c8:	08007183 	.word	0x08007183
 80065cc:	08006ad3 	.word	0x08006ad3
 80065d0:	08007183 	.word	0x08007183
 80065d4:	08007183 	.word	0x08007183
 80065d8:	08007183 	.word	0x08007183
 80065dc:	08006b4b 	.word	0x08006b4b
 80065e0:	08007183 	.word	0x08007183
 80065e4:	08007183 	.word	0x08007183
 80065e8:	08007183 	.word	0x08007183
 80065ec:	08007183 	.word	0x08007183
 80065f0:	08007183 	.word	0x08007183
 80065f4:	08007183 	.word	0x08007183
 80065f8:	08007183 	.word	0x08007183
 80065fc:	08006bcf 	.word	0x08006bcf
 8006600:	08007183 	.word	0x08007183
 8006604:	08007183 	.word	0x08007183
 8006608:	08007183 	.word	0x08007183
 800660c:	08007183 	.word	0x08007183
 8006610:	08007183 	.word	0x08007183
 8006614:	08007183 	.word	0x08007183
 8006618:	08007183 	.word	0x08007183
 800661c:	08007183 	.word	0x08007183
 8006620:	08007183 	.word	0x08007183
 8006624:	08007183 	.word	0x08007183
 8006628:	08007183 	.word	0x08007183
 800662c:	08007183 	.word	0x08007183
 8006630:	08007183 	.word	0x08007183
 8006634:	08007183 	.word	0x08007183
 8006638:	08007183 	.word	0x08007183
 800663c:	08006c51 	.word	0x08006c51
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b40      	cmp	r3, #64	@ 0x40
 8006644:	f000 83e6 	beq.w	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006648:	f000 bd9b 	b.w	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800664c:	40021000 	.word	0x40021000
 8006650:	0007a120 	.word	0x0007a120
 8006654:	0800bb14 	.word	0x0800bb14
 8006658:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006662:	f000 ff83 	bl	800756c <RCCEx_GetSAIxPeriphCLKFreq>
 8006666:	61f8      	str	r0, [r7, #28]
      break;
 8006668:	f000 bd8e 	b.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800666c:	69b9      	ldr	r1, [r7, #24]
 800666e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006672:	f000 ff7b 	bl	800756c <RCCEx_GetSAIxPeriphCLKFreq>
 8006676:	61f8      	str	r0, [r7, #28]
      break;
 8006678:	f000 bd86 	b.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800667c:	4b9a      	ldr	r3, [pc, #616]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006682:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006686:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800668e:	d015      	beq.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006696:	f200 8092 	bhi.w	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066a0:	d029      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066a8:	f200 8089 	bhi.w	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d07b      	beq.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066b8:	d04a      	beq.n	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 80066ba:	e080      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80066bc:	4b8a      	ldr	r3, [pc, #552]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d17d      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80066c8:	4b87      	ldr	r3, [pc, #540]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80066d4:	4b84      	ldr	r3, [pc, #528]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	091b      	lsrs	r3, r3, #4
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	e005      	b.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 80066e0:	4b81      	ldr	r3, [pc, #516]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066e6:	0a1b      	lsrs	r3, r3, #8
 80066e8:	f003 030f 	and.w	r3, r3, #15
 80066ec:	4a7f      	ldr	r2, [pc, #508]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80066ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f2:	61fb      	str	r3, [r7, #28]
          break;
 80066f4:	e066      	b.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80066f6:	4b7c      	ldr	r3, [pc, #496]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006702:	d162      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006704:	4b78      	ldr	r3, [pc, #480]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800670c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006710:	d15b      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006712:	4b75      	ldr	r3, [pc, #468]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	0a1b      	lsrs	r3, r3, #8
 8006718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800671c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	fb03 f202 	mul.w	r2, r3, r2
 8006726:	4b70      	ldr	r3, [pc, #448]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	091b      	lsrs	r3, r3, #4
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	3301      	adds	r3, #1
 8006732:	fbb2 f3f3 	udiv	r3, r2, r3
 8006736:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006738:	4b6b      	ldr	r3, [pc, #428]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	0d5b      	lsrs	r3, r3, #21
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	3301      	adds	r3, #1
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	fbb2 f3f3 	udiv	r3, r2, r3
 800674c:	61fb      	str	r3, [r7, #28]
          break;
 800674e:	e03c      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006750:	4b65      	ldr	r3, [pc, #404]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006758:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800675c:	d138      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800675e:	4b62      	ldr	r3, [pc, #392]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800676a:	d131      	bne.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800676c:	4b5e      	ldr	r3, [pc, #376]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	0a1b      	lsrs	r3, r3, #8
 8006772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006776:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	fb03 f202 	mul.w	r2, r3, r2
 8006780:	4b59      	ldr	r3, [pc, #356]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	3301      	adds	r3, #1
 800678c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006790:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006792:	4b55      	ldr	r3, [pc, #340]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	0d5b      	lsrs	r3, r3, #21
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	3301      	adds	r3, #1
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a6:	61fb      	str	r3, [r7, #28]
          break;
 80067a8:	e012      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80067aa:	4b4f      	ldr	r3, [pc, #316]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d10e      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 80067b8:	4b4d      	ldr	r3, [pc, #308]	@ (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80067ba:	61fb      	str	r3, [r7, #28]
          break;
 80067bc:	e00b      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 80067be:	bf00      	nop
 80067c0:	f000 bce2 	b.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80067c4:	bf00      	nop
 80067c6:	f000 bcdf 	b.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80067ca:	bf00      	nop
 80067cc:	f000 bcdc 	b.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80067d0:	bf00      	nop
 80067d2:	f000 bcd9 	b.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80067d6:	bf00      	nop
        break;
 80067d8:	f000 bcd6 	b.w	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80067dc:	4b42      	ldr	r3, [pc, #264]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067ea:	d13d      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80067ec:	4b3e      	ldr	r3, [pc, #248]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067f8:	f040 84c5 	bne.w	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80067fc:	4b3a      	ldr	r3, [pc, #232]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006808:	f040 84bd 	bne.w	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800680c:	4b36      	ldr	r3, [pc, #216]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	0a1b      	lsrs	r3, r3, #8
 8006812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006816:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	fb03 f202 	mul.w	r2, r3, r2
 8006820:	4b31      	ldr	r3, [pc, #196]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	091b      	lsrs	r3, r3, #4
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	3301      	adds	r3, #1
 800682c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006830:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006832:	4b2d      	ldr	r3, [pc, #180]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	0edb      	lsrs	r3, r3, #27
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006844:	4b28      	ldr	r3, [pc, #160]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8006850:	2311      	movs	r3, #17
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e001      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8006856:	2307      	movs	r3, #7
 8006858:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006862:	61fb      	str	r3, [r7, #28]
      break;
 8006864:	f000 bc8f 	b.w	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006868:	4b1f      	ldr	r3, [pc, #124]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800686a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006872:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800687a:	d016      	beq.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006882:	f200 809b 	bhi.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800688c:	d032      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006894:	f200 8092 	bhi.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8084 	beq.w	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068a6:	d052      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 80068a8:	e088      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80068aa:	4b0f      	ldr	r3, [pc, #60]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	f040 8084 	bne.w	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80068b8:	4b0b      	ldr	r3, [pc, #44]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80068c4:	4b08      	ldr	r3, [pc, #32]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	e005      	b.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80068d0:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068d6:	0a1b      	lsrs	r3, r3, #8
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	4a03      	ldr	r2, [pc, #12]	@ (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e2:	61fb      	str	r3, [r7, #28]
          break;
 80068e4:	e06c      	b.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80068e6:	bf00      	nop
 80068e8:	40021000 	.word	0x40021000
 80068ec:	0800bb14 	.word	0x0800bb14
 80068f0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80068f4:	4ba5      	ldr	r3, [pc, #660]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006900:	d160      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006902:	4ba2      	ldr	r3, [pc, #648]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800690a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690e:	d159      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006910:	4b9e      	ldr	r3, [pc, #632]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800691a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	fb03 f202 	mul.w	r2, r3, r2
 8006924:	4b99      	ldr	r3, [pc, #612]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	3301      	adds	r3, #1
 8006930:	fbb2 f3f3 	udiv	r3, r2, r3
 8006934:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006936:	4b95      	ldr	r3, [pc, #596]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	0d5b      	lsrs	r3, r3, #21
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	3301      	adds	r3, #1
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	61fb      	str	r3, [r7, #28]
          break;
 800694c:	e03a      	b.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800694e:	4b8f      	ldr	r3, [pc, #572]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800695a:	d135      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800695c:	4b8b      	ldr	r3, [pc, #556]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006964:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006968:	d12e      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800696a:	4b88      	ldr	r3, [pc, #544]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	0a1b      	lsrs	r3, r3, #8
 8006970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006974:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	fb03 f202 	mul.w	r2, r3, r2
 800697e:	4b83      	ldr	r3, [pc, #524]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	091b      	lsrs	r3, r3, #4
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	3301      	adds	r3, #1
 800698a:	fbb2 f3f3 	udiv	r3, r2, r3
 800698e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006990:	4b7e      	ldr	r3, [pc, #504]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	0d5b      	lsrs	r3, r3, #21
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	3301      	adds	r3, #1
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	61fb      	str	r3, [r7, #28]
          break;
 80069a6:	e00f      	b.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80069a8:	4b78      	ldr	r3, [pc, #480]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80069aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d10a      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 80069b6:	4b76      	ldr	r3, [pc, #472]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80069b8:	61fb      	str	r3, [r7, #28]
          break;
 80069ba:	e007      	b.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 80069bc:	bf00      	nop
 80069be:	e3e2      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80069c0:	bf00      	nop
 80069c2:	e3e0      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80069c4:	bf00      	nop
 80069c6:	e3de      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80069c8:	bf00      	nop
 80069ca:	e3dc      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 80069cc:	bf00      	nop
      break;
 80069ce:	e3da      	b.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80069d0:	4b6e      	ldr	r3, [pc, #440]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80069d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d827      	bhi.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 80069e2:	a201      	add	r2, pc, #4	@ (adr r2, 80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	080069f9 	.word	0x080069f9
 80069ec:	08006a01 	.word	0x08006a01
 80069f0:	08006a09 	.word	0x08006a09
 80069f4:	08006a1d 	.word	0x08006a1d
          frequency = HAL_RCC_GetPCLK2Freq();
 80069f8:	f7ff f84c 	bl	8005a94 <HAL_RCC_GetPCLK2Freq>
 80069fc:	61f8      	str	r0, [r7, #28]
          break;
 80069fe:	e01d      	b.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a00:	f7fe ff9c 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006a04:	61f8      	str	r0, [r7, #28]
          break;
 8006a06:	e019      	b.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a08:	4b60      	ldr	r3, [pc, #384]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a14:	d10f      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8006a16:	4b5f      	ldr	r3, [pc, #380]	@ (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006a18:	61fb      	str	r3, [r7, #28]
          break;
 8006a1a:	e00c      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d107      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8006a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a2e:	61fb      	str	r3, [r7, #28]
          break;
 8006a30:	e003      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8006a32:	bf00      	nop
 8006a34:	e3a8      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006a36:	bf00      	nop
 8006a38:	e3a6      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006a3a:	bf00      	nop
        break;
 8006a3c:	e3a4      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006a3e:	4b53      	ldr	r3, [pc, #332]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a44:	f003 030c 	and.w	r3, r3, #12
 8006a48:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b0c      	cmp	r3, #12
 8006a4e:	d83a      	bhi.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8006a50:	a201      	add	r2, pc, #4	@ (adr r2, 8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8006a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a56:	bf00      	nop
 8006a58:	08006a8d 	.word	0x08006a8d
 8006a5c:	08006ac7 	.word	0x08006ac7
 8006a60:	08006ac7 	.word	0x08006ac7
 8006a64:	08006ac7 	.word	0x08006ac7
 8006a68:	08006a95 	.word	0x08006a95
 8006a6c:	08006ac7 	.word	0x08006ac7
 8006a70:	08006ac7 	.word	0x08006ac7
 8006a74:	08006ac7 	.word	0x08006ac7
 8006a78:	08006a9d 	.word	0x08006a9d
 8006a7c:	08006ac7 	.word	0x08006ac7
 8006a80:	08006ac7 	.word	0x08006ac7
 8006a84:	08006ac7 	.word	0x08006ac7
 8006a88:	08006ab1 	.word	0x08006ab1
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a8c:	f7fe ffec 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006a90:	61f8      	str	r0, [r7, #28]
          break;
 8006a92:	e01d      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a94:	f7fe ff52 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006a98:	61f8      	str	r0, [r7, #28]
          break;
 8006a9a:	e019      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa8:	d10f      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 8006aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006aac:	61fb      	str	r3, [r7, #28]
          break;
 8006aae:	e00c      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ab0:	4b36      	ldr	r3, [pc, #216]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d107      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac2:	61fb      	str	r3, [r7, #28]
          break;
 8006ac4:	e003      	b.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8006ac6:	bf00      	nop
 8006ac8:	e35e      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006aca:	bf00      	nop
 8006acc:	e35c      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ace:	bf00      	nop
        break;
 8006ad0:	e35a      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006adc:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b30      	cmp	r3, #48	@ 0x30
 8006ae2:	d021      	beq.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b30      	cmp	r3, #48	@ 0x30
 8006ae8:	d829      	bhi.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d011      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d823      	bhi.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b10      	cmp	r3, #16
 8006b00:	d004      	beq.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8006b02:	e01c      	b.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b04:	f7fe ffb0 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006b08:	61f8      	str	r0, [r7, #28]
          break;
 8006b0a:	e01d      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b0c:	f7fe ff16 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006b10:	61f8      	str	r0, [r7, #28]
          break;
 8006b12:	e019      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b14:	4b1d      	ldr	r3, [pc, #116]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b20:	d10f      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8006b22:	4b1c      	ldr	r3, [pc, #112]	@ (8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b24:	61fb      	str	r3, [r7, #28]
          break;
 8006b26:	e00c      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b28:	4b18      	ldr	r3, [pc, #96]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d107      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 8006b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b3a:	61fb      	str	r3, [r7, #28]
          break;
 8006b3c:	e003      	b.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 8006b3e:	bf00      	nop
 8006b40:	e322      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006b42:	bf00      	nop
 8006b44:	e320      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006b46:	bf00      	nop
        break;
 8006b48:	e31e      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006b4a:	4b10      	ldr	r3, [pc, #64]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b50:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b54:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b5a:	d027      	beq.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b60:	d82f      	bhi.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b80      	cmp	r3, #128	@ 0x80
 8006b66:	d017      	beq.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b80      	cmp	r3, #128	@ 0x80
 8006b6c:	d829      	bhi.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b40      	cmp	r3, #64	@ 0x40
 8006b78:	d004      	beq.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8006b7a:	e022      	b.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fe ff74 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006b80:	61f8      	str	r0, [r7, #28]
          break;
 8006b82:	e023      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b84:	f7fe feda 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006b88:	61f8      	str	r0, [r7, #28]
          break;
 8006b8a:	e01f      	b.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	02dc6c00 	.word	0x02dc6c00
 8006b94:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b98:	4b9b      	ldr	r3, [pc, #620]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba4:	d10f      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8006ba6:	4b99      	ldr	r3, [pc, #612]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006ba8:	61fb      	str	r3, [r7, #28]
          break;
 8006baa:	e00c      	b.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bac:	4b96      	ldr	r3, [pc, #600]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d107      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 8006bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bbe:	61fb      	str	r3, [r7, #28]
          break;
 8006bc0:	e003      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8006bc2:	bf00      	nop
 8006bc4:	e2e0      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006bc6:	bf00      	nop
 8006bc8:	e2de      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006bca:	bf00      	nop
        break;
 8006bcc:	e2dc      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006bce:	4b8e      	ldr	r3, [pc, #568]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd8:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006be0:	d025      	beq.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006be8:	d82c      	bhi.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf0:	d013      	beq.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf8:	d824      	bhi.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c06:	d004      	beq.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8006c08:	e01c      	b.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c0a:	f7fe ff2d 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006c0e:	61f8      	str	r0, [r7, #28]
          break;
 8006c10:	e01d      	b.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c12:	f7fe fe93 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006c16:	61f8      	str	r0, [r7, #28]
          break;
 8006c18:	e019      	b.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c26:	d10f      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8006c28:	4b78      	ldr	r3, [pc, #480]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006c2a:	61fb      	str	r3, [r7, #28]
          break;
 8006c2c:	e00c      	b.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c2e:	4b76      	ldr	r3, [pc, #472]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d107      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 8006c3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c40:	61fb      	str	r3, [r7, #28]
          break;
 8006c42:	e003      	b.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 8006c44:	bf00      	nop
 8006c46:	e29f      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006c48:	bf00      	nop
 8006c4a:	e29d      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006c4c:	bf00      	nop
        break;
 8006c4e:	e29b      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c50:	4b6d      	ldr	r3, [pc, #436]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c5a:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c62:	d025      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c6a:	d82c      	bhi.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c72:	d013      	beq.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7a:	d824      	bhi.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d004      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c88:	d004      	beq.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 8006c8a:	e01c      	b.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f7fe feec 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006c90:	61f8      	str	r0, [r7, #28]
          break;
 8006c92:	e01d      	b.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c94:	f7fe fe52 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006c98:	61f8      	str	r0, [r7, #28]
          break;
 8006c9a:	e019      	b.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c9c:	4b5a      	ldr	r3, [pc, #360]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca8:	d10f      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 8006caa:	4b58      	ldr	r3, [pc, #352]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006cac:	61fb      	str	r3, [r7, #28]
          break;
 8006cae:	e00c      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cb0:	4b55      	ldr	r3, [pc, #340]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d107      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 8006cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cc2:	61fb      	str	r3, [r7, #28]
          break;
 8006cc4:	e003      	b.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8006cc6:	bf00      	nop
 8006cc8:	e25e      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006cca:	bf00      	nop
 8006ccc:	e25c      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006cce:	bf00      	nop
        break;
 8006cd0:	e25a      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cdc:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ce4:	d007      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006cec:	d12f      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cee:	f7fe fe25 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006cf2:	61f8      	str	r0, [r7, #28]
          break;
 8006cf4:	e02e      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006cf6:	4b44      	ldr	r3, [pc, #272]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d02:	d126      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8006d04:	4b40      	ldr	r3, [pc, #256]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006d10:	4b3d      	ldr	r3, [pc, #244]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	0a1b      	lsrs	r3, r3, #8
 8006d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d1a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	fb03 f202 	mul.w	r2, r3, r2
 8006d24:	4b38      	ldr	r3, [pc, #224]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	3301      	adds	r3, #1
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006d36:	4b34      	ldr	r3, [pc, #208]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	0e5b      	lsrs	r3, r3, #25
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	3301      	adds	r3, #1
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4a:	61fb      	str	r3, [r7, #28]
          break;
 8006d4c:	e001      	b.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 8006d4e:	bf00      	nop
 8006d50:	e21a      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006d52:	bf00      	nop
        break;
 8006d54:	e218      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006d56:	4b2c      	ldr	r3, [pc, #176]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d103      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006d68:	f7fe fe94 	bl	8005a94 <HAL_RCC_GetPCLK2Freq>
 8006d6c:	61f8      	str	r0, [r7, #28]
        break;
 8006d6e:	e20b      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d70:	f7fe fde4 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006d74:	61f8      	str	r0, [r7, #28]
        break;
 8006d76:	e207      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006d78:	4b23      	ldr	r3, [pc, #140]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d7e:	f003 0318 	and.w	r3, r3, #24
 8006d82:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d010      	beq.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b10      	cmp	r3, #16
 8006d8e:	d834      	bhi.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d024      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 8006d9c:	e02d      	b.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006d9e:	69b9      	ldr	r1, [r7, #24]
 8006da0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006da4:	f000 fbe2 	bl	800756c <RCCEx_GetSAIxPeriphCLKFreq>
 8006da8:	61f8      	str	r0, [r7, #28]
          break;
 8006daa:	e02b      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006dac:	4b16      	ldr	r3, [pc, #88]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d122      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006db8:	4b13      	ldr	r3, [pc, #76]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8006dc4:	4b10      	ldr	r3, [pc, #64]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	091b      	lsrs	r3, r3, #4
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	e005      	b.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8006dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dd6:	0a1b      	lsrs	r3, r3, #8
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de2:	61fb      	str	r3, [r7, #28]
          break;
 8006de4:	e00b      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006de6:	4b08      	ldr	r3, [pc, #32]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df2:	d106      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8006df4:	4b05      	ldr	r3, [pc, #20]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006df6:	61fb      	str	r3, [r7, #28]
          break;
 8006df8:	e003      	b.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 8006dfa:	bf00      	nop
 8006dfc:	e1c4      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006dfe:	bf00      	nop
 8006e00:	e1c2      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006e02:	bf00      	nop
        break;
 8006e04:	e1c0      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8006e06:	bf00      	nop
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	00f42400 	.word	0x00f42400
 8006e10:	0800bb14 	.word	0x0800bb14
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e14:	4b96      	ldr	r3, [pc, #600]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006e1e:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e26:	d013      	beq.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e2e:	d819      	bhi.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d004      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e3c:	d004      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 8006e3e:	e011      	b.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e40:	f7fe fe12 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006e44:	61f8      	str	r0, [r7, #28]
          break;
 8006e46:	e010      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e48:	f7fe fd78 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006e4c:	61f8      	str	r0, [r7, #28]
          break;
 8006e4e:	e00c      	b.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e50:	4b87      	ldr	r3, [pc, #540]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5c:	d104      	bne.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 8006e5e:	4b85      	ldr	r3, [pc, #532]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006e60:	61fb      	str	r3, [r7, #28]
          break;
 8006e62:	e001      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8006e64:	bf00      	nop
 8006e66:	e18f      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006e68:	bf00      	nop
        break;
 8006e6a:	e18d      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e6c:	4b80      	ldr	r3, [pc, #512]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006e76:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e7e:	d013      	beq.n	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e86:	d819      	bhi.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d004      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e94:	d004      	beq.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8006e96:	e011      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e98:	f7fe fde6 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006e9c:	61f8      	str	r0, [r7, #28]
          break;
 8006e9e:	e010      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ea0:	f7fe fd4c 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006ea4:	61f8      	str	r0, [r7, #28]
          break;
 8006ea6:	e00c      	b.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ea8:	4b71      	ldr	r3, [pc, #452]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb4:	d104      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8006eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006eb8:	61fb      	str	r3, [r7, #28]
          break;
 8006eba:	e001      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 8006ebc:	bf00      	nop
 8006ebe:	e163      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ec0:	bf00      	nop
        break;
 8006ec2:	e161      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006ec4:	4b6a      	ldr	r3, [pc, #424]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ece:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed6:	d013      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ede:	d819      	bhi.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eec:	d004      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8006eee:	e011      	b.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ef0:	f7fe fdba 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006ef4:	61f8      	str	r0, [r7, #28]
          break;
 8006ef6:	e010      	b.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ef8:	f7fe fd20 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006efc:	61f8      	str	r0, [r7, #28]
          break;
 8006efe:	e00c      	b.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f00:	4b5b      	ldr	r3, [pc, #364]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f0c:	d104      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8006f0e:	4b59      	ldr	r3, [pc, #356]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f10:	61fb      	str	r3, [r7, #28]
          break;
 8006f12:	e001      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8006f14:	bf00      	nop
 8006f16:	e137      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006f18:	bf00      	nop
        break;
 8006f1a:	e135      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f1c:	4b54      	ldr	r3, [pc, #336]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f22:	f003 0303 	and.w	r3, r3, #3
 8006f26:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d011      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d818      	bhi.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d004      	beq.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 8006f40:	e011      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f42:	f7fe fd91 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006f46:	61f8      	str	r0, [r7, #28]
          break;
 8006f48:	e010      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f4a:	f7fe fcf7 	bl	800593c <HAL_RCC_GetSysClockFreq>
 8006f4e:	61f8      	str	r0, [r7, #28]
          break;
 8006f50:	e00c      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f52:	4b47      	ldr	r3, [pc, #284]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f5e:	d104      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 8006f60:	4b44      	ldr	r3, [pc, #272]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006f62:	61fb      	str	r3, [r7, #28]
          break;
 8006f64:	e001      	b.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 8006f66:	bf00      	nop
 8006f68:	e10e      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006f6a:	bf00      	nop
        break;
 8006f6c:	e10c      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006f6e:	4b40      	ldr	r3, [pc, #256]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f74:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006f78:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f80:	d02c      	beq.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f88:	d833      	bhi.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f90:	d01a      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f98:	d82b      	bhi.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fa6:	d004      	beq.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8006fa8:	e023      	b.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006faa:	f7fe fd5d 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8006fae:	61f8      	str	r0, [r7, #28]
          break;
 8006fb0:	e026      	b.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fb8:	f003 0302 	and.w	r3, r3, #2
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d11a      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8006fc0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006fc4:	61fb      	str	r3, [r7, #28]
          break;
 8006fc6:	e016      	b.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fc8:	4b29      	ldr	r3, [pc, #164]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fd4:	d111      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8006fd6:	4b27      	ldr	r3, [pc, #156]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8006fd8:	61fb      	str	r3, [r7, #28]
          break;
 8006fda:	e00e      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006fdc:	4b24      	ldr	r3, [pc, #144]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8006fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d109      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 8006fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fee:	61fb      	str	r3, [r7, #28]
          break;
 8006ff0:	e005      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8006ff2:	bf00      	nop
 8006ff4:	e0c8      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ff6:	bf00      	nop
 8006ff8:	e0c6      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ffa:	bf00      	nop
 8006ffc:	e0c4      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006ffe:	bf00      	nop
        break;
 8007000:	e0c2      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007002:	4b1b      	ldr	r3, [pc, #108]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007008:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800700c:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007014:	d030      	beq.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800701c:	d837      	bhi.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007024:	d01a      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800702c:	d82f      	bhi.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800703a:	d004      	beq.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 800703c:	e027      	b.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 800703e:	f7fe fd13 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8007042:	61f8      	str	r0, [r7, #28]
          break;
 8007044:	e02a      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007046:	4b0a      	ldr	r3, [pc, #40]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8007048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b02      	cmp	r3, #2
 8007052:	d11e      	bne.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 8007054:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007058:	61fb      	str	r3, [r7, #28]
          break;
 800705a:	e01a      	b.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800705c:	4b04      	ldr	r3, [pc, #16]	@ (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007068:	d115      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 800706a:	4b02      	ldr	r3, [pc, #8]	@ (8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800706c:	61fb      	str	r3, [r7, #28]
          break;
 800706e:	e012      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007070:	40021000 	.word	0x40021000
 8007074:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007078:	4b46      	ldr	r3, [pc, #280]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800707a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d109      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 8007086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708a:	61fb      	str	r3, [r7, #28]
          break;
 800708c:	e005      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 800708e:	bf00      	nop
 8007090:	e07a      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007092:	bf00      	nop
 8007094:	e078      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8007096:	bf00      	nop
 8007098:	e076      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800709a:	bf00      	nop
        break;
 800709c:	e074      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800709e:	4b3d      	ldr	r3, [pc, #244]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80070a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070a4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80070a8:	60fb      	str	r3, [r7, #12]
        switch(srcclk)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070b0:	d02c      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070b8:	d855      	bhi.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070c6:	d004      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 80070c8:	e04d      	b.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 80070ca:	f7fe fc37 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80070ce:	61f8      	str	r0, [r7, #28]
          break;
 80070d0:	e04e      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80070d2:	4b30      	ldr	r3, [pc, #192]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d145      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80070de:	4b2d      	ldr	r3, [pc, #180]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80070ea:	4b2a      	ldr	r3, [pc, #168]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	091b      	lsrs	r3, r3, #4
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	e005      	b.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 80070f6:	4b27      	ldr	r3, [pc, #156]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80070f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070fc:	0a1b      	lsrs	r3, r3, #8
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	4a25      	ldr	r2, [pc, #148]	@ (8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007108:	61fb      	str	r3, [r7, #28]
          break;
 800710a:	e02e      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800710c:	4b21      	ldr	r3, [pc, #132]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007114:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007118:	d129      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800711a:	4b1e      	ldr	r3, [pc, #120]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007126:	d122      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007128:	4b1a      	ldr	r3, [pc, #104]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	0a1b      	lsrs	r3, r3, #8
 800712e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007132:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	fb03 f202 	mul.w	r2, r3, r2
 800713c:	4b15      	ldr	r3, [pc, #84]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	091b      	lsrs	r3, r3, #4
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	3301      	adds	r3, #1
 8007148:	fbb2 f3f3 	udiv	r3, r2, r3
 800714c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800714e:	4b11      	ldr	r3, [pc, #68]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	0d5b      	lsrs	r3, r3, #21
 8007154:	f003 0303 	and.w	r3, r3, #3
 8007158:	3301      	adds	r3, #1
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007162:	61fb      	str	r3, [r7, #28]
          break;
 8007164:	e003      	b.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 8007166:	bf00      	nop
 8007168:	e00e      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800716a:	bf00      	nop
 800716c:	e00c      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800716e:	bf00      	nop
        break;
 8007170:	e00a      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007172:	bf00      	nop
 8007174:	e008      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007176:	bf00      	nop
 8007178:	e006      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800717a:	bf00      	nop
 800717c:	e004      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800717e:	bf00      	nop
 8007180:	e002      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007182:	bf00      	nop
 8007184:	e000      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 8007186:	bf00      	nop
    }
  }

  return(frequency);
 8007188:	69fb      	ldr	r3, [r7, #28]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40021000 	.word	0x40021000
 8007198:	0800bb14 	.word	0x0800bb14

0800719c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071aa:	4b72      	ldr	r3, [pc, #456]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00e      	beq.n	80071d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80071b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f003 0203 	and.w	r2, r3, #3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d103      	bne.n	80071ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
       ||
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d142      	bne.n	8007254 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	73fb      	strb	r3, [r7, #15]
 80071d2:	e03f      	b.n	8007254 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d018      	beq.n	800720e <RCCEx_PLLSAI1_Config+0x72>
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d825      	bhi.n	800722c <RCCEx_PLLSAI1_Config+0x90>
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d002      	beq.n	80071ea <RCCEx_PLLSAI1_Config+0x4e>
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d009      	beq.n	80071fc <RCCEx_PLLSAI1_Config+0x60>
 80071e8:	e020      	b.n	800722c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071ea:	4b62      	ldr	r3, [pc, #392]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d11d      	bne.n	8007232 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071fa:	e01a      	b.n	8007232 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007204:	2b00      	cmp	r3, #0
 8007206:	d116      	bne.n	8007236 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800720c:	e013      	b.n	8007236 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800720e:	4b59      	ldr	r3, [pc, #356]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10f      	bne.n	800723a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800721a:	4b56      	ldr	r3, [pc, #344]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800722a:	e006      	b.n	800723a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
      break;
 8007230:	e004      	b.n	800723c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007232:	bf00      	nop
 8007234:	e002      	b.n	800723c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007236:	bf00      	nop
 8007238:	e000      	b.n	800723c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800723a:	bf00      	nop
    }

    if(status == HAL_OK)
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d108      	bne.n	8007254 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007242:	4b4c      	ldr	r3, [pc, #304]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f023 0203 	bic.w	r2, r3, #3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4949      	ldr	r1, [pc, #292]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007250:	4313      	orrs	r3, r2
 8007252:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f040 8086 	bne.w	8007368 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800725c:	4b45      	ldr	r3, [pc, #276]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a44      	ldr	r2, [pc, #272]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007262:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007268:	f7fc fb70 	bl	800394c <HAL_GetTick>
 800726c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800726e:	e009      	b.n	8007284 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007270:	f7fc fb6c 	bl	800394c <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d902      	bls.n	8007284 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	73fb      	strb	r3, [r7, #15]
        break;
 8007282:	e005      	b.n	8007290 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007284:	4b3b      	ldr	r3, [pc, #236]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1ef      	bne.n	8007270 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d168      	bne.n	8007368 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d113      	bne.n	80072c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800729c:	4b35      	ldr	r3, [pc, #212]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	4b35      	ldr	r3, [pc, #212]	@ (8007378 <RCCEx_PLLSAI1_Config+0x1dc>)
 80072a2:	4013      	ands	r3, r2
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6892      	ldr	r2, [r2, #8]
 80072a8:	0211      	lsls	r1, r2, #8
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	68d2      	ldr	r2, [r2, #12]
 80072ae:	06d2      	lsls	r2, r2, #27
 80072b0:	4311      	orrs	r1, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6852      	ldr	r2, [r2, #4]
 80072b6:	3a01      	subs	r2, #1
 80072b8:	0112      	lsls	r2, r2, #4
 80072ba:	430a      	orrs	r2, r1
 80072bc:	492d      	ldr	r1, [pc, #180]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	610b      	str	r3, [r1, #16]
 80072c2:	e02d      	b.n	8007320 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d115      	bne.n	80072f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	4b2b      	ldr	r3, [pc, #172]	@ (800737c <RCCEx_PLLSAI1_Config+0x1e0>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6892      	ldr	r2, [r2, #8]
 80072d6:	0211      	lsls	r1, r2, #8
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6912      	ldr	r2, [r2, #16]
 80072dc:	0852      	lsrs	r2, r2, #1
 80072de:	3a01      	subs	r2, #1
 80072e0:	0552      	lsls	r2, r2, #21
 80072e2:	4311      	orrs	r1, r2
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6852      	ldr	r2, [r2, #4]
 80072e8:	3a01      	subs	r2, #1
 80072ea:	0112      	lsls	r2, r2, #4
 80072ec:	430a      	orrs	r2, r1
 80072ee:	4921      	ldr	r1, [pc, #132]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	610b      	str	r3, [r1, #16]
 80072f4:	e014      	b.n	8007320 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 80072f8:	691a      	ldr	r2, [r3, #16]
 80072fa:	4b21      	ldr	r3, [pc, #132]	@ (8007380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6892      	ldr	r2, [r2, #8]
 8007302:	0211      	lsls	r1, r2, #8
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6952      	ldr	r2, [r2, #20]
 8007308:	0852      	lsrs	r2, r2, #1
 800730a:	3a01      	subs	r2, #1
 800730c:	0652      	lsls	r2, r2, #25
 800730e:	4311      	orrs	r1, r2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6852      	ldr	r2, [r2, #4]
 8007314:	3a01      	subs	r2, #1
 8007316:	0112      	lsls	r2, r2, #4
 8007318:	430a      	orrs	r2, r1
 800731a:	4916      	ldr	r1, [pc, #88]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 800731c:	4313      	orrs	r3, r2
 800731e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007320:	4b14      	ldr	r3, [pc, #80]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a13      	ldr	r2, [pc, #76]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007326:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800732a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732c:	f7fc fb0e 	bl	800394c <HAL_GetTick>
 8007330:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007332:	e009      	b.n	8007348 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007334:	f7fc fb0a 	bl	800394c <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d902      	bls.n	8007348 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	73fb      	strb	r3, [r7, #15]
          break;
 8007346:	e005      	b.n	8007354 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007348:	4b0a      	ldr	r3, [pc, #40]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0ef      	beq.n	8007334 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800735a:	4b06      	ldr	r3, [pc, #24]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	4904      	ldr	r1, [pc, #16]	@ (8007374 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007364:	4313      	orrs	r3, r2
 8007366:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007368:	7bfb      	ldrb	r3, [r7, #15]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	40021000 	.word	0x40021000
 8007378:	07ff800f 	.word	0x07ff800f
 800737c:	ff9f800f 	.word	0xff9f800f
 8007380:	f9ff800f 	.word	0xf9ff800f

08007384 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007392:	4b72      	ldr	r3, [pc, #456]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f003 0303 	and.w	r3, r3, #3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00e      	beq.n	80073bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800739e:	4b6f      	ldr	r3, [pc, #444]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f003 0203 	and.w	r2, r3, #3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d103      	bne.n	80073b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
       ||
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d142      	bne.n	800743c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	e03f      	b.n	800743c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d018      	beq.n	80073f6 <RCCEx_PLLSAI2_Config+0x72>
 80073c4:	2b03      	cmp	r3, #3
 80073c6:	d825      	bhi.n	8007414 <RCCEx_PLLSAI2_Config+0x90>
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d002      	beq.n	80073d2 <RCCEx_PLLSAI2_Config+0x4e>
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d009      	beq.n	80073e4 <RCCEx_PLLSAI2_Config+0x60>
 80073d0:	e020      	b.n	8007414 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073d2:	4b62      	ldr	r3, [pc, #392]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d11d      	bne.n	800741a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073e2:	e01a      	b.n	800741a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073e4:	4b5d      	ldr	r3, [pc, #372]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d116      	bne.n	800741e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073f4:	e013      	b.n	800741e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073f6:	4b59      	ldr	r3, [pc, #356]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10f      	bne.n	8007422 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007402:	4b56      	ldr	r3, [pc, #344]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007412:	e006      	b.n	8007422 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
      break;
 8007418:	e004      	b.n	8007424 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800741a:	bf00      	nop
 800741c:	e002      	b.n	8007424 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800741e:	bf00      	nop
 8007420:	e000      	b.n	8007424 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007422:	bf00      	nop
    }

    if(status == HAL_OK)
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d108      	bne.n	800743c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800742a:	4b4c      	ldr	r3, [pc, #304]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f023 0203 	bic.w	r2, r3, #3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4949      	ldr	r1, [pc, #292]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007438:	4313      	orrs	r3, r2
 800743a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800743c:	7bfb      	ldrb	r3, [r7, #15]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 8086 	bne.w	8007550 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007444:	4b45      	ldr	r3, [pc, #276]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a44      	ldr	r2, [pc, #272]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 800744a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800744e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007450:	f7fc fa7c 	bl	800394c <HAL_GetTick>
 8007454:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007456:	e009      	b.n	800746c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007458:	f7fc fa78 	bl	800394c <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d902      	bls.n	800746c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	73fb      	strb	r3, [r7, #15]
        break;
 800746a:	e005      	b.n	8007478 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800746c:	4b3b      	ldr	r3, [pc, #236]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1ef      	bne.n	8007458 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d168      	bne.n	8007550 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d113      	bne.n	80074ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007484:	4b35      	ldr	r3, [pc, #212]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007486:	695a      	ldr	r2, [r3, #20]
 8007488:	4b35      	ldr	r3, [pc, #212]	@ (8007560 <RCCEx_PLLSAI2_Config+0x1dc>)
 800748a:	4013      	ands	r3, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6892      	ldr	r2, [r2, #8]
 8007490:	0211      	lsls	r1, r2, #8
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	68d2      	ldr	r2, [r2, #12]
 8007496:	06d2      	lsls	r2, r2, #27
 8007498:	4311      	orrs	r1, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6852      	ldr	r2, [r2, #4]
 800749e:	3a01      	subs	r2, #1
 80074a0:	0112      	lsls	r2, r2, #4
 80074a2:	430a      	orrs	r2, r1
 80074a4:	492d      	ldr	r1, [pc, #180]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	614b      	str	r3, [r1, #20]
 80074aa:	e02d      	b.n	8007508 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d115      	bne.n	80074de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074b2:	4b2a      	ldr	r3, [pc, #168]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074b4:	695a      	ldr	r2, [r3, #20]
 80074b6:	4b2b      	ldr	r3, [pc, #172]	@ (8007564 <RCCEx_PLLSAI2_Config+0x1e0>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6892      	ldr	r2, [r2, #8]
 80074be:	0211      	lsls	r1, r2, #8
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6912      	ldr	r2, [r2, #16]
 80074c4:	0852      	lsrs	r2, r2, #1
 80074c6:	3a01      	subs	r2, #1
 80074c8:	0552      	lsls	r2, r2, #21
 80074ca:	4311      	orrs	r1, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6852      	ldr	r2, [r2, #4]
 80074d0:	3a01      	subs	r2, #1
 80074d2:	0112      	lsls	r2, r2, #4
 80074d4:	430a      	orrs	r2, r1
 80074d6:	4921      	ldr	r1, [pc, #132]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	614b      	str	r3, [r1, #20]
 80074dc:	e014      	b.n	8007508 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074de:	4b1f      	ldr	r3, [pc, #124]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 80074e0:	695a      	ldr	r2, [r3, #20]
 80074e2:	4b21      	ldr	r3, [pc, #132]	@ (8007568 <RCCEx_PLLSAI2_Config+0x1e4>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6892      	ldr	r2, [r2, #8]
 80074ea:	0211      	lsls	r1, r2, #8
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6952      	ldr	r2, [r2, #20]
 80074f0:	0852      	lsrs	r2, r2, #1
 80074f2:	3a01      	subs	r2, #1
 80074f4:	0652      	lsls	r2, r2, #25
 80074f6:	4311      	orrs	r1, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6852      	ldr	r2, [r2, #4]
 80074fc:	3a01      	subs	r2, #1
 80074fe:	0112      	lsls	r2, r2, #4
 8007500:	430a      	orrs	r2, r1
 8007502:	4916      	ldr	r1, [pc, #88]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007504:	4313      	orrs	r3, r2
 8007506:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007508:	4b14      	ldr	r3, [pc, #80]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a13      	ldr	r2, [pc, #76]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 800750e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007514:	f7fc fa1a 	bl	800394c <HAL_GetTick>
 8007518:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800751a:	e009      	b.n	8007530 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800751c:	f7fc fa16 	bl	800394c <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d902      	bls.n	8007530 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	73fb      	strb	r3, [r7, #15]
          break;
 800752e:	e005      	b.n	800753c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007530:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0ef      	beq.n	800751c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d106      	bne.n	8007550 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007542:	4b06      	ldr	r3, [pc, #24]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007544:	695a      	ldr	r2, [r3, #20]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	4904      	ldr	r1, [pc, #16]	@ (800755c <RCCEx_PLLSAI2_Config+0x1d8>)
 800754c:	4313      	orrs	r3, r2
 800754e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	40021000 	.word	0x40021000
 8007560:	07ff800f 	.word	0x07ff800f
 8007564:	ff9f800f 	.word	0xff9f800f
 8007568:	f9ff800f 	.word	0xf9ff800f

0800756c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800756c:	b480      	push	{r7}
 800756e:	b089      	sub	sp, #36	@ 0x24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007588:	d10b      	bne.n	80075a2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800758a:	4b7e      	ldr	r3, [pc, #504]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800758c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007590:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007594:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	2b60      	cmp	r3, #96	@ 0x60
 800759a:	d112      	bne.n	80075c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800759c:	4b7a      	ldr	r3, [pc, #488]	@ (8007788 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e00f      	b.n	80075c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a8:	d10b      	bne.n	80075c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80075aa:	4b76      	ldr	r3, [pc, #472]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075b4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075bc:	d101      	bne.n	80075c2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80075be:	4b72      	ldr	r3, [pc, #456]	@ (8007788 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 80075c0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f040 80d6 	bne.w	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b40      	cmp	r3, #64	@ 0x40
 80075d2:	d003      	beq.n	80075dc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075da:	d13b      	bne.n	8007654 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80075dc:	4b69      	ldr	r3, [pc, #420]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075e8:	f040 80c4 	bne.w	8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 80075ec:	4b65      	ldr	r3, [pc, #404]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 80bd 	beq.w	8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80075fa:	4b62      	ldr	r3, [pc, #392]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	091b      	lsrs	r3, r3, #4
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	3301      	adds	r3, #1
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	fbb2 f3f3 	udiv	r3, r2, r3
 800760c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800760e:	4b5d      	ldr	r3, [pc, #372]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007618:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800761a:	4b5a      	ldr	r3, [pc, #360]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	0edb      	lsrs	r3, r3, #27
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800762c:	4b55      	ldr	r3, [pc, #340]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8007638:	2311      	movs	r3, #17
 800763a:	617b      	str	r3, [r7, #20]
 800763c:	e001      	b.n	8007642 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800763e:	2307      	movs	r3, #7
 8007640:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	fb03 f202 	mul.w	r2, r3, r2
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007650:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007652:	e08f      	b.n	8007774 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d13a      	bne.n	80076d0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800765a:	4b4a      	ldr	r3, [pc, #296]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007666:	f040 8086 	bne.w	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800766a:	4b46      	ldr	r3, [pc, #280]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d07f      	beq.n	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007676:	4b43      	ldr	r3, [pc, #268]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	091b      	lsrs	r3, r3, #4
 800767c:	f003 030f 	and.w	r3, r3, #15
 8007680:	3301      	adds	r3, #1
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	fbb2 f3f3 	udiv	r3, r2, r3
 8007688:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800768a:	4b3e      	ldr	r3, [pc, #248]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007694:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007696:	4b3b      	ldr	r3, [pc, #236]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	0edb      	lsrs	r3, r3, #27
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80076a8:	4b36      	ldr	r3, [pc, #216]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 80076b4:	2311      	movs	r3, #17
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	e001      	b.n	80076be <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 80076ba:	2307      	movs	r3, #7
 80076bc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	fb03 f202 	mul.w	r2, r3, r2
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	e052      	b.n	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	2b80      	cmp	r3, #128	@ 0x80
 80076d4:	d003      	beq.n	80076de <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076dc:	d109      	bne.n	80076f2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076de:	4b29      	ldr	r3, [pc, #164]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ea:	d144      	bne.n	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 80076ec:	4b27      	ldr	r3, [pc, #156]	@ (800778c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 80076ee:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076f0:	e041      	b.n	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d003      	beq.n	8007700 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076fe:	d13a      	bne.n	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007700:	4b20      	ldr	r3, [pc, #128]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800770c:	d133      	bne.n	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800770e:	4b1d      	ldr	r3, [pc, #116]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d02d      	beq.n	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800771a:	4b1a      	ldr	r3, [pc, #104]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	091b      	lsrs	r3, r3, #4
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	3301      	adds	r3, #1
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	fbb2 f3f3 	udiv	r3, r2, r3
 800772c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800772e:	4b15      	ldr	r3, [pc, #84]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007738:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800773a:	4b12      	ldr	r3, [pc, #72]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	0edb      	lsrs	r3, r3, #27
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800774c:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007758:	2311      	movs	r3, #17
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	e001      	b.n	8007762 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800775e:	2307      	movs	r3, #7
 8007760:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	fb03 f202 	mul.w	r2, r3, r2
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007770:	61fb      	str	r3, [r7, #28]
 8007772:	e000      	b.n	8007776 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007774:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007776:	69fb      	ldr	r3, [r7, #28]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3724      	adds	r7, #36	@ 0x24
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	40021000 	.word	0x40021000
 8007788:	001fff68 	.word	0x001fff68
 800778c:	00f42400 	.word	0x00f42400

08007790 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	@ 0x28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e1c7      	b.n	8007b32 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10e      	bne.n	80077ca <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a81      	ldr	r2, [pc, #516]	@ (80079b8 <HAL_SAI_Init+0x228>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d107      	bne.n	80077c6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d103      	bne.n	80077c6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e1b3      	b.n	8007b32 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fb fe9e 	bl	8003520 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f9b1 	bl	8007b4c <SAI_Disable>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e19e      	b.n	8007b32 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d00c      	beq.n	800781e <HAL_SAI_Init+0x8e>
 8007804:	2b02      	cmp	r3, #2
 8007806:	d80d      	bhi.n	8007824 <HAL_SAI_Init+0x94>
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_SAI_Init+0x82>
 800780c:	2b01      	cmp	r3, #1
 800780e:	d003      	beq.n	8007818 <HAL_SAI_Init+0x88>
 8007810:	e008      	b.n	8007824 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007816:	e008      	b.n	800782a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007818:	2310      	movs	r3, #16
 800781a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800781c:	e005      	b.n	800782a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800781e:	2320      	movs	r3, #32
 8007820:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007822:	e002      	b.n	800782a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8007828:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b03      	cmp	r3, #3
 8007830:	d81d      	bhi.n	800786e <HAL_SAI_Init+0xde>
 8007832:	a201      	add	r2, pc, #4	@ (adr r2, 8007838 <HAL_SAI_Init+0xa8>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	08007849 	.word	0x08007849
 800783c:	0800784f 	.word	0x0800784f
 8007840:	08007857 	.word	0x08007857
 8007844:	0800785f 	.word	0x0800785f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	61fb      	str	r3, [r7, #28]
      break;
 800784c:	e012      	b.n	8007874 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800784e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007852:	61fb      	str	r3, [r7, #28]
      break;
 8007854:	e00e      	b.n	8007874 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007856:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800785a:	61fb      	str	r3, [r7, #28]
      break;
 800785c:	e00a      	b.n	8007874 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800785e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007862:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800786c:	e002      	b.n	8007874 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
      break;
 8007872:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a4f      	ldr	r2, [pc, #316]	@ (80079b8 <HAL_SAI_Init+0x228>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d004      	beq.n	8007888 <HAL_SAI_Init+0xf8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a4e      	ldr	r2, [pc, #312]	@ (80079bc <HAL_SAI_Init+0x22c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d103      	bne.n	8007890 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007888:	4a4d      	ldr	r2, [pc, #308]	@ (80079c0 <HAL_SAI_Init+0x230>)
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	e002      	b.n	8007896 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007890:	4a4c      	ldr	r2, [pc, #304]	@ (80079c4 <HAL_SAI_Init+0x234>)
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d073      	beq.n	8007986 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a45      	ldr	r2, [pc, #276]	@ (80079b8 <HAL_SAI_Init+0x228>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d004      	beq.n	80078b2 <HAL_SAI_Init+0x122>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a43      	ldr	r2, [pc, #268]	@ (80079bc <HAL_SAI_Init+0x22c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d105      	bne.n	80078be <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80078b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80078b6:	f7fe fd51 	bl	800635c <HAL_RCCEx_GetPeriphCLKFreq>
 80078ba:	61b8      	str	r0, [r7, #24]
 80078bc:	e004      	b.n	80078c8 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80078be:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80078c2:	f7fe fd4b 	bl	800635c <HAL_RCCEx_GetPeriphCLKFreq>
 80078c6:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078d0:	d120      	bne.n	8007914 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d102      	bne.n	80078e0 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80078da:	2340      	movs	r3, #64	@ 0x40
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	e00a      	b.n	80078f6 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d103      	bne.n	80078f0 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80078e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	e002      	b.n	80078f6 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	4619      	mov	r1, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	e017      	b.n	8007944 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007918:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800791c:	d101      	bne.n	8007922 <HAL_SAI_Init+0x192>
 800791e:	2302      	movs	r3, #2
 8007920:	e000      	b.n	8007924 <HAL_SAI_Init+0x194>
 8007922:	2301      	movs	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	4619      	mov	r1, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	fb02 f303 	mul.w	r3, r2, r3
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007942:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	4a20      	ldr	r2, [pc, #128]	@ (80079c8 <HAL_SAI_Init+0x238>)
 8007948:	fba2 2303 	umull	r2, r3, r2, r3
 800794c:	08da      	lsrs	r2, r3, #3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007952:	6979      	ldr	r1, [r7, #20]
 8007954:	4b1c      	ldr	r3, [pc, #112]	@ (80079c8 <HAL_SAI_Init+0x238>)
 8007956:	fba3 2301 	umull	r2, r3, r3, r1
 800795a:	08da      	lsrs	r2, r3, #3
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	1aca      	subs	r2, r1, r3
 8007966:	2a08      	cmp	r2, #8
 8007968:	d904      	bls.n	8007974 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007978:	2b04      	cmp	r3, #4
 800797a:	d104      	bne.n	8007986 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	085a      	lsrs	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_SAI_Init+0x206>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d109      	bne.n	80079aa <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_SAI_Init+0x212>
 800799e:	2300      	movs	r3, #0
 80079a0:	e001      	b.n	80079a6 <HAL_SAI_Init+0x216>
 80079a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079a6:	623b      	str	r3, [r7, #32]
 80079a8:	e012      	b.n	80079d0 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d10c      	bne.n	80079cc <HAL_SAI_Init+0x23c>
 80079b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079b6:	e00a      	b.n	80079ce <HAL_SAI_Init+0x23e>
 80079b8:	40015404 	.word	0x40015404
 80079bc:	40015424 	.word	0x40015424
 80079c0:	40015400 	.word	0x40015400
 80079c4:	40015800 	.word	0x40015800
 80079c8:	cccccccd 	.word	0xcccccccd
 80079cc:	2300      	movs	r3, #0
 80079ce:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6819      	ldr	r1, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b58      	ldr	r3, [pc, #352]	@ (8007b3c <HAL_SAI_Init+0x3ac>)
 80079dc:	400b      	ands	r3, r1
 80079de:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6819      	ldr	r1, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ee:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079f4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079fa:	431a      	orrs	r2, r3
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007a08:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007a14:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	051b      	lsls	r3, r3, #20
 8007a1c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007a22:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6812      	ldr	r2, [r2, #0]
 8007a36:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007a3a:	f023 030f 	bic.w	r3, r3, #15
 8007a3e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6859      	ldr	r1, [r3, #4]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	699a      	ldr	r2, [r3, #24]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6899      	ldr	r1, [r3, #8]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b35      	ldr	r3, [pc, #212]	@ (8007b40 <HAL_SAI_Init+0x3b0>)
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6899      	ldr	r1, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a78:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a7e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8007a84:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8007a8a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a90:	3b01      	subs	r3, #1
 8007a92:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007a94:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68d9      	ldr	r1, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007aac:	400b      	ands	r3, r1
 8007aae:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68d9      	ldr	r1, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007abe:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007ac6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007acc:	3b01      	subs	r3, #1
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a19      	ldr	r2, [pc, #100]	@ (8007b44 <HAL_SAI_Init+0x3b4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d119      	bne.n	8007b18 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007ae4:	4b18      	ldr	r3, [pc, #96]	@ (8007b48 <HAL_SAI_Init+0x3b8>)
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae8:	4a17      	ldr	r2, [pc, #92]	@ (8007b48 <HAL_SAI_Init+0x3b8>)
 8007aea:	f023 0301 	bic.w	r3, r3, #1
 8007aee:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d10e      	bne.n	8007b18 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b02:	3b01      	subs	r3, #1
 8007b04:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007b06:	4910      	ldr	r1, [pc, #64]	@ (8007b48 <HAL_SAI_Init+0x3b8>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b48 <HAL_SAI_Init+0x3b8>)
 8007b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b10:	4a0d      	ldr	r2, [pc, #52]	@ (8007b48 <HAL_SAI_Init+0x3b8>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3728      	adds	r7, #40	@ 0x28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	f805c010 	.word	0xf805c010
 8007b40:	fff88000 	.word	0xfff88000
 8007b44:	40015404 	.word	0x40015404
 8007b48:	40015400 	.word	0x40015400

08007b4c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007b54:	4b18      	ldr	r3, [pc, #96]	@ (8007bb8 <SAI_Disable+0x6c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a18      	ldr	r2, [pc, #96]	@ (8007bbc <SAI_Disable+0x70>)
 8007b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5e:	0b1b      	lsrs	r3, r3, #12
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007b76:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b84:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	72fb      	strb	r3, [r7, #11]
      break;
 8007b92:	e009      	b.n	8007ba8 <SAI_Disable+0x5c>
    }
    count--;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e7      	bne.n	8007b78 <SAI_Disable+0x2c>

  return status;
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20040000 	.word	0x20040000
 8007bbc:	95cbec1b 	.word	0x95cbec1b

08007bc0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e038      	b.n	8007c48 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7fb fc8e 	bl	800350c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	f000 ff24 	bl	8008a48 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	68b9      	ldr	r1, [r7, #8]
 8007c0c:	f000 ffb6 	bl	8008b7c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6858      	ldr	r0, [r3, #4]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	f000 fffa 	bl	8008c16 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	6892      	ldr	r2, [r2, #8]
 8007c2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	6892      	ldr	r2, [r2, #8]
 8007c36:	f041 0101 	orr.w	r1, r1, #1
 8007c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e042      	b.n	8007ce8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7fb fb6f 	bl	8003358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2224      	movs	r2, #36	@ 0x24
 8007c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0201 	bic.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fbb2 	bl	8008404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f8b3 	bl	8007e0c <UART_SetConfig>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e01b      	b.n	8007ce8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fc31 	bl	8008548 <UART_CheckIdleState>
 8007ce6:	4603      	mov	r3, r0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	@ 0x28
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d17b      	bne.n	8007e02 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_UART_Transmit+0x26>
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e074      	b.n	8007e04 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2221      	movs	r2, #33	@ 0x21
 8007d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d2a:	f7fb fe0f 	bl	800394c <HAL_GetTick>
 8007d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	88fa      	ldrh	r2, [r7, #6]
 8007d34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	88fa      	ldrh	r2, [r7, #6]
 8007d3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d48:	d108      	bne.n	8007d5c <HAL_UART_Transmit+0x6c>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d104      	bne.n	8007d5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	e003      	b.n	8007d64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d64:	e030      	b.n	8007dc8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2180      	movs	r1, #128	@ 0x80
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fc93 	bl	800869c <UART_WaitOnFlagUntilTimeout>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e03d      	b.n	8007e04 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	881a      	ldrh	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d9a:	b292      	uxth	r2, r2
 8007d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	3302      	adds	r3, #2
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	e007      	b.n	8007db6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	3301      	adds	r3, #1
 8007db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1c8      	bne.n	8007d66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2140      	movs	r1, #64	@ 0x40
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 fc5c 	bl	800869c <UART_WaitOnFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e006      	b.n	8007e04 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e000      	b.n	8007e04 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007e02:	2302      	movs	r3, #2
  }
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e10:	b08c      	sub	sp, #48	@ 0x30
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	4baa      	ldr	r3, [pc, #680]	@ (80080e4 <UART_SetConfig+0x2d8>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	6812      	ldr	r2, [r2, #0]
 8007e42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e44:	430b      	orrs	r3, r1
 8007e46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a9f      	ldr	r2, [pc, #636]	@ (80080e8 <UART_SetConfig+0x2dc>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d004      	beq.n	8007e78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e74:	4313      	orrs	r3, r2
 8007e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007e82:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	6812      	ldr	r2, [r2, #0]
 8007e8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	f023 010f 	bic.w	r1, r3, #15
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a90      	ldr	r2, [pc, #576]	@ (80080ec <UART_SetConfig+0x2e0>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d125      	bne.n	8007efc <UART_SetConfig+0xf0>
 8007eb0:	4b8f      	ldr	r3, [pc, #572]	@ (80080f0 <UART_SetConfig+0x2e4>)
 8007eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d81a      	bhi.n	8007ef4 <UART_SetConfig+0xe8>
 8007ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec4 <UART_SetConfig+0xb8>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007ed5 	.word	0x08007ed5
 8007ec8:	08007ee5 	.word	0x08007ee5
 8007ecc:	08007edd 	.word	0x08007edd
 8007ed0:	08007eed 	.word	0x08007eed
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eda:	e116      	b.n	800810a <UART_SetConfig+0x2fe>
 8007edc:	2302      	movs	r3, #2
 8007ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ee2:	e112      	b.n	800810a <UART_SetConfig+0x2fe>
 8007ee4:	2304      	movs	r3, #4
 8007ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eea:	e10e      	b.n	800810a <UART_SetConfig+0x2fe>
 8007eec:	2308      	movs	r3, #8
 8007eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ef2:	e10a      	b.n	800810a <UART_SetConfig+0x2fe>
 8007ef4:	2310      	movs	r3, #16
 8007ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efa:	e106      	b.n	800810a <UART_SetConfig+0x2fe>
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a7c      	ldr	r2, [pc, #496]	@ (80080f4 <UART_SetConfig+0x2e8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d138      	bne.n	8007f78 <UART_SetConfig+0x16c>
 8007f06:	4b7a      	ldr	r3, [pc, #488]	@ (80080f0 <UART_SetConfig+0x2e4>)
 8007f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f0c:	f003 030c 	and.w	r3, r3, #12
 8007f10:	2b0c      	cmp	r3, #12
 8007f12:	d82d      	bhi.n	8007f70 <UART_SetConfig+0x164>
 8007f14:	a201      	add	r2, pc, #4	@ (adr r2, 8007f1c <UART_SetConfig+0x110>)
 8007f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1a:	bf00      	nop
 8007f1c:	08007f51 	.word	0x08007f51
 8007f20:	08007f71 	.word	0x08007f71
 8007f24:	08007f71 	.word	0x08007f71
 8007f28:	08007f71 	.word	0x08007f71
 8007f2c:	08007f61 	.word	0x08007f61
 8007f30:	08007f71 	.word	0x08007f71
 8007f34:	08007f71 	.word	0x08007f71
 8007f38:	08007f71 	.word	0x08007f71
 8007f3c:	08007f59 	.word	0x08007f59
 8007f40:	08007f71 	.word	0x08007f71
 8007f44:	08007f71 	.word	0x08007f71
 8007f48:	08007f71 	.word	0x08007f71
 8007f4c:	08007f69 	.word	0x08007f69
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f56:	e0d8      	b.n	800810a <UART_SetConfig+0x2fe>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5e:	e0d4      	b.n	800810a <UART_SetConfig+0x2fe>
 8007f60:	2304      	movs	r3, #4
 8007f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f66:	e0d0      	b.n	800810a <UART_SetConfig+0x2fe>
 8007f68:	2308      	movs	r3, #8
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6e:	e0cc      	b.n	800810a <UART_SetConfig+0x2fe>
 8007f70:	2310      	movs	r3, #16
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e0c8      	b.n	800810a <UART_SetConfig+0x2fe>
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a5e      	ldr	r2, [pc, #376]	@ (80080f8 <UART_SetConfig+0x2ec>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d125      	bne.n	8007fce <UART_SetConfig+0x1c2>
 8007f82:	4b5b      	ldr	r3, [pc, #364]	@ (80080f0 <UART_SetConfig+0x2e4>)
 8007f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f8c:	2b30      	cmp	r3, #48	@ 0x30
 8007f8e:	d016      	beq.n	8007fbe <UART_SetConfig+0x1b2>
 8007f90:	2b30      	cmp	r3, #48	@ 0x30
 8007f92:	d818      	bhi.n	8007fc6 <UART_SetConfig+0x1ba>
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d00a      	beq.n	8007fae <UART_SetConfig+0x1a2>
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d814      	bhi.n	8007fc6 <UART_SetConfig+0x1ba>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <UART_SetConfig+0x19a>
 8007fa0:	2b10      	cmp	r3, #16
 8007fa2:	d008      	beq.n	8007fb6 <UART_SetConfig+0x1aa>
 8007fa4:	e00f      	b.n	8007fc6 <UART_SetConfig+0x1ba>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fac:	e0ad      	b.n	800810a <UART_SetConfig+0x2fe>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb4:	e0a9      	b.n	800810a <UART_SetConfig+0x2fe>
 8007fb6:	2304      	movs	r3, #4
 8007fb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fbc:	e0a5      	b.n	800810a <UART_SetConfig+0x2fe>
 8007fbe:	2308      	movs	r3, #8
 8007fc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc4:	e0a1      	b.n	800810a <UART_SetConfig+0x2fe>
 8007fc6:	2310      	movs	r3, #16
 8007fc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fcc:	e09d      	b.n	800810a <UART_SetConfig+0x2fe>
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80080fc <UART_SetConfig+0x2f0>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d125      	bne.n	8008024 <UART_SetConfig+0x218>
 8007fd8:	4b45      	ldr	r3, [pc, #276]	@ (80080f0 <UART_SetConfig+0x2e4>)
 8007fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fe4:	d016      	beq.n	8008014 <UART_SetConfig+0x208>
 8007fe6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fe8:	d818      	bhi.n	800801c <UART_SetConfig+0x210>
 8007fea:	2b80      	cmp	r3, #128	@ 0x80
 8007fec:	d00a      	beq.n	8008004 <UART_SetConfig+0x1f8>
 8007fee:	2b80      	cmp	r3, #128	@ 0x80
 8007ff0:	d814      	bhi.n	800801c <UART_SetConfig+0x210>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <UART_SetConfig+0x1f0>
 8007ff6:	2b40      	cmp	r3, #64	@ 0x40
 8007ff8:	d008      	beq.n	800800c <UART_SetConfig+0x200>
 8007ffa:	e00f      	b.n	800801c <UART_SetConfig+0x210>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008002:	e082      	b.n	800810a <UART_SetConfig+0x2fe>
 8008004:	2302      	movs	r3, #2
 8008006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800a:	e07e      	b.n	800810a <UART_SetConfig+0x2fe>
 800800c:	2304      	movs	r3, #4
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008012:	e07a      	b.n	800810a <UART_SetConfig+0x2fe>
 8008014:	2308      	movs	r3, #8
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801a:	e076      	b.n	800810a <UART_SetConfig+0x2fe>
 800801c:	2310      	movs	r3, #16
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008022:	e072      	b.n	800810a <UART_SetConfig+0x2fe>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a35      	ldr	r2, [pc, #212]	@ (8008100 <UART_SetConfig+0x2f4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d12a      	bne.n	8008084 <UART_SetConfig+0x278>
 800802e:	4b30      	ldr	r3, [pc, #192]	@ (80080f0 <UART_SetConfig+0x2e4>)
 8008030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800803c:	d01a      	beq.n	8008074 <UART_SetConfig+0x268>
 800803e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008042:	d81b      	bhi.n	800807c <UART_SetConfig+0x270>
 8008044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008048:	d00c      	beq.n	8008064 <UART_SetConfig+0x258>
 800804a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800804e:	d815      	bhi.n	800807c <UART_SetConfig+0x270>
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <UART_SetConfig+0x250>
 8008054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008058:	d008      	beq.n	800806c <UART_SetConfig+0x260>
 800805a:	e00f      	b.n	800807c <UART_SetConfig+0x270>
 800805c:	2300      	movs	r3, #0
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008062:	e052      	b.n	800810a <UART_SetConfig+0x2fe>
 8008064:	2302      	movs	r3, #2
 8008066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806a:	e04e      	b.n	800810a <UART_SetConfig+0x2fe>
 800806c:	2304      	movs	r3, #4
 800806e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008072:	e04a      	b.n	800810a <UART_SetConfig+0x2fe>
 8008074:	2308      	movs	r3, #8
 8008076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807a:	e046      	b.n	800810a <UART_SetConfig+0x2fe>
 800807c:	2310      	movs	r3, #16
 800807e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008082:	e042      	b.n	800810a <UART_SetConfig+0x2fe>
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a17      	ldr	r2, [pc, #92]	@ (80080e8 <UART_SetConfig+0x2dc>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d13a      	bne.n	8008104 <UART_SetConfig+0x2f8>
 800808e:	4b18      	ldr	r3, [pc, #96]	@ (80080f0 <UART_SetConfig+0x2e4>)
 8008090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008094:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008098:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800809c:	d01a      	beq.n	80080d4 <UART_SetConfig+0x2c8>
 800809e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080a2:	d81b      	bhi.n	80080dc <UART_SetConfig+0x2d0>
 80080a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a8:	d00c      	beq.n	80080c4 <UART_SetConfig+0x2b8>
 80080aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ae:	d815      	bhi.n	80080dc <UART_SetConfig+0x2d0>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <UART_SetConfig+0x2b0>
 80080b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b8:	d008      	beq.n	80080cc <UART_SetConfig+0x2c0>
 80080ba:	e00f      	b.n	80080dc <UART_SetConfig+0x2d0>
 80080bc:	2300      	movs	r3, #0
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c2:	e022      	b.n	800810a <UART_SetConfig+0x2fe>
 80080c4:	2302      	movs	r3, #2
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ca:	e01e      	b.n	800810a <UART_SetConfig+0x2fe>
 80080cc:	2304      	movs	r3, #4
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d2:	e01a      	b.n	800810a <UART_SetConfig+0x2fe>
 80080d4:	2308      	movs	r3, #8
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080da:	e016      	b.n	800810a <UART_SetConfig+0x2fe>
 80080dc:	2310      	movs	r3, #16
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e2:	e012      	b.n	800810a <UART_SetConfig+0x2fe>
 80080e4:	cfff69f3 	.word	0xcfff69f3
 80080e8:	40008000 	.word	0x40008000
 80080ec:	40013800 	.word	0x40013800
 80080f0:	40021000 	.word	0x40021000
 80080f4:	40004400 	.word	0x40004400
 80080f8:	40004800 	.word	0x40004800
 80080fc:	40004c00 	.word	0x40004c00
 8008100:	40005000 	.word	0x40005000
 8008104:	2310      	movs	r3, #16
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4aae      	ldr	r2, [pc, #696]	@ (80083c8 <UART_SetConfig+0x5bc>)
 8008110:	4293      	cmp	r3, r2
 8008112:	f040 8097 	bne.w	8008244 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008116:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800811a:	2b08      	cmp	r3, #8
 800811c:	d823      	bhi.n	8008166 <UART_SetConfig+0x35a>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <UART_SetConfig+0x318>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	08008149 	.word	0x08008149
 8008128:	08008167 	.word	0x08008167
 800812c:	08008151 	.word	0x08008151
 8008130:	08008167 	.word	0x08008167
 8008134:	08008157 	.word	0x08008157
 8008138:	08008167 	.word	0x08008167
 800813c:	08008167 	.word	0x08008167
 8008140:	08008167 	.word	0x08008167
 8008144:	0800815f 	.word	0x0800815f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008148:	f7fd fc8e 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 800814c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800814e:	e010      	b.n	8008172 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008150:	4b9e      	ldr	r3, [pc, #632]	@ (80083cc <UART_SetConfig+0x5c0>)
 8008152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008154:	e00d      	b.n	8008172 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008156:	f7fd fbf1 	bl	800593c <HAL_RCC_GetSysClockFreq>
 800815a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800815c:	e009      	b.n	8008172 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800815e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008164:	e005      	b.n	8008172 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 8130 	beq.w	80083da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800817e:	4a94      	ldr	r2, [pc, #592]	@ (80083d0 <UART_SetConfig+0x5c4>)
 8008180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008184:	461a      	mov	r2, r3
 8008186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008188:	fbb3 f3f2 	udiv	r3, r3, r2
 800818c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	4413      	add	r3, r2
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	429a      	cmp	r2, r3
 800819c:	d305      	bcc.n	80081aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d903      	bls.n	80081b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081b0:	e113      	b.n	80083da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	2200      	movs	r2, #0
 80081b6:	60bb      	str	r3, [r7, #8]
 80081b8:	60fa      	str	r2, [r7, #12]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081be:	4a84      	ldr	r2, [pc, #528]	@ (80083d0 <UART_SetConfig+0x5c4>)
 80081c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2200      	movs	r2, #0
 80081c8:	603b      	str	r3, [r7, #0]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081d4:	f7f8 fd50 	bl	8000c78 <__aeabi_uldivmod>
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4610      	mov	r0, r2
 80081de:	4619      	mov	r1, r3
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	020b      	lsls	r3, r1, #8
 80081ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081ee:	0202      	lsls	r2, r0, #8
 80081f0:	6979      	ldr	r1, [r7, #20]
 80081f2:	6849      	ldr	r1, [r1, #4]
 80081f4:	0849      	lsrs	r1, r1, #1
 80081f6:	2000      	movs	r0, #0
 80081f8:	460c      	mov	r4, r1
 80081fa:	4605      	mov	r5, r0
 80081fc:	eb12 0804 	adds.w	r8, r2, r4
 8008200:	eb43 0905 	adc.w	r9, r3, r5
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	469a      	mov	sl, r3
 800820c:	4693      	mov	fp, r2
 800820e:	4652      	mov	r2, sl
 8008210:	465b      	mov	r3, fp
 8008212:	4640      	mov	r0, r8
 8008214:	4649      	mov	r1, r9
 8008216:	f7f8 fd2f 	bl	8000c78 <__aeabi_uldivmod>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4613      	mov	r3, r2
 8008220:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008228:	d308      	bcc.n	800823c <UART_SetConfig+0x430>
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008230:	d204      	bcs.n	800823c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6a3a      	ldr	r2, [r7, #32]
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	e0ce      	b.n	80083da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008242:	e0ca      	b.n	80083da <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800824c:	d166      	bne.n	800831c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800824e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008252:	2b08      	cmp	r3, #8
 8008254:	d827      	bhi.n	80082a6 <UART_SetConfig+0x49a>
 8008256:	a201      	add	r2, pc, #4	@ (adr r2, 800825c <UART_SetConfig+0x450>)
 8008258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825c:	08008281 	.word	0x08008281
 8008260:	08008289 	.word	0x08008289
 8008264:	08008291 	.word	0x08008291
 8008268:	080082a7 	.word	0x080082a7
 800826c:	08008297 	.word	0x08008297
 8008270:	080082a7 	.word	0x080082a7
 8008274:	080082a7 	.word	0x080082a7
 8008278:	080082a7 	.word	0x080082a7
 800827c:	0800829f 	.word	0x0800829f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008280:	f7fd fbf2 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8008284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008286:	e014      	b.n	80082b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008288:	f7fd fc04 	bl	8005a94 <HAL_RCC_GetPCLK2Freq>
 800828c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800828e:	e010      	b.n	80082b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008290:	4b4e      	ldr	r3, [pc, #312]	@ (80083cc <UART_SetConfig+0x5c0>)
 8008292:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008294:	e00d      	b.n	80082b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008296:	f7fd fb51 	bl	800593c <HAL_RCC_GetSysClockFreq>
 800829a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800829c:	e009      	b.n	80082b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082a4:	e005      	b.n	80082b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8090 	beq.w	80083da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082be:	4a44      	ldr	r2, [pc, #272]	@ (80083d0 <UART_SetConfig+0x5c4>)
 80082c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c4:	461a      	mov	r2, r3
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082cc:	005a      	lsls	r2, r3, #1
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	085b      	lsrs	r3, r3, #1
 80082d4:	441a      	add	r2, r3
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	fbb2 f3f3 	udiv	r3, r2, r3
 80082de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	2b0f      	cmp	r3, #15
 80082e4:	d916      	bls.n	8008314 <UART_SetConfig+0x508>
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ec:	d212      	bcs.n	8008314 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f023 030f 	bic.w	r3, r3, #15
 80082f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	b29a      	uxth	r2, r3
 8008304:	8bfb      	ldrh	r3, [r7, #30]
 8008306:	4313      	orrs	r3, r2
 8008308:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	8bfa      	ldrh	r2, [r7, #30]
 8008310:	60da      	str	r2, [r3, #12]
 8008312:	e062      	b.n	80083da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800831a:	e05e      	b.n	80083da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800831c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008320:	2b08      	cmp	r3, #8
 8008322:	d828      	bhi.n	8008376 <UART_SetConfig+0x56a>
 8008324:	a201      	add	r2, pc, #4	@ (adr r2, 800832c <UART_SetConfig+0x520>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	08008377 	.word	0x08008377
 800833c:	08008367 	.word	0x08008367
 8008340:	08008377 	.word	0x08008377
 8008344:	08008377 	.word	0x08008377
 8008348:	08008377 	.word	0x08008377
 800834c:	0800836f 	.word	0x0800836f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008350:	f7fd fb8a 	bl	8005a68 <HAL_RCC_GetPCLK1Freq>
 8008354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008356:	e014      	b.n	8008382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008358:	f7fd fb9c 	bl	8005a94 <HAL_RCC_GetPCLK2Freq>
 800835c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800835e:	e010      	b.n	8008382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008360:	4b1a      	ldr	r3, [pc, #104]	@ (80083cc <UART_SetConfig+0x5c0>)
 8008362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008364:	e00d      	b.n	8008382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008366:	f7fd fae9 	bl	800593c <HAL_RCC_GetSysClockFreq>
 800836a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800836c:	e009      	b.n	8008382 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008374:	e005      	b.n	8008382 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008380:	bf00      	nop
    }

    if (pclk != 0U)
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d028      	beq.n	80083da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	4a10      	ldr	r2, [pc, #64]	@ (80083d0 <UART_SetConfig+0x5c4>)
 800838e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008392:	461a      	mov	r2, r3
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	fbb3 f2f2 	udiv	r2, r3, r2
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	441a      	add	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	2b0f      	cmp	r3, #15
 80083b0:	d910      	bls.n	80083d4 <UART_SetConfig+0x5c8>
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b8:	d20c      	bcs.n	80083d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	e009      	b.n	80083da <UART_SetConfig+0x5ce>
 80083c6:	bf00      	nop
 80083c8:	40008000 	.word	0x40008000
 80083cc:	00f42400 	.word	0x00f42400
 80083d0:	0800bb44 	.word	0x0800bb44
      }
      else
      {
        ret = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2201      	movs	r2, #1
 80083de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2200      	movs	r2, #0
 80083ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2200      	movs	r2, #0
 80083f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80083f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3730      	adds	r7, #48	@ 0x30
 80083fe:	46bd      	mov	sp, r7
 8008400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00a      	beq.n	800842e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00a      	beq.n	8008472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008498:	f003 0310 	and.w	r3, r3, #16
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01a      	beq.n	800851a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008502:	d10a      	bne.n	800851a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]
  }
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b098      	sub	sp, #96	@ 0x60
 800854c:	af02      	add	r7, sp, #8
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008558:	f7fb f9f8 	bl	800394c <HAL_GetTick>
 800855c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0308 	and.w	r3, r3, #8
 8008568:	2b08      	cmp	r3, #8
 800856a:	d12f      	bne.n	80085cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800856c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008574:	2200      	movs	r2, #0
 8008576:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f88e 	bl	800869c <UART_WaitOnFlagUntilTimeout>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d022      	beq.n	80085cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800859a:	653b      	str	r3, [r7, #80]	@ 0x50
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80085a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e6      	bne.n	8008586 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e063      	b.n	8008694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0304 	and.w	r3, r3, #4
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d149      	bne.n	800866e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085e2:	2200      	movs	r2, #0
 80085e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f857 	bl	800869c <UART_WaitOnFlagUntilTimeout>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d03c      	beq.n	800866e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	623b      	str	r3, [r7, #32]
   return(result);
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008612:	633b      	str	r3, [r7, #48]	@ 0x30
 8008614:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e6      	bne.n	80085f4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3308      	adds	r3, #8
 800862c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	60fb      	str	r3, [r7, #12]
   return(result);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f023 0301 	bic.w	r3, r3, #1
 800863c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3308      	adds	r3, #8
 8008644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008646:	61fa      	str	r2, [r7, #28]
 8008648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	69b9      	ldr	r1, [r7, #24]
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	617b      	str	r3, [r7, #20]
   return(result);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e5      	bne.n	8008626 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2220      	movs	r2, #32
 800865e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e012      	b.n	8008694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3758      	adds	r7, #88	@ 0x58
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	4613      	mov	r3, r2
 80086aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ac:	e04f      	b.n	800874e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b4:	d04b      	beq.n	800874e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b6:	f7fb f949 	bl	800394c <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	69ba      	ldr	r2, [r7, #24]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d302      	bcc.n	80086cc <UART_WaitOnFlagUntilTimeout+0x30>
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e04e      	b.n	800876e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d037      	beq.n	800874e <UART_WaitOnFlagUntilTimeout+0xb2>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b80      	cmp	r3, #128	@ 0x80
 80086e2:	d034      	beq.n	800874e <UART_WaitOnFlagUntilTimeout+0xb2>
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b40      	cmp	r3, #64	@ 0x40
 80086e8:	d031      	beq.n	800874e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	f003 0308 	and.w	r3, r3, #8
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d110      	bne.n	800871a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2208      	movs	r2, #8
 80086fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f838 	bl	8008776 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2208      	movs	r2, #8
 800870a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e029      	b.n	800876e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008728:	d111      	bne.n	800874e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f000 f81e 	bl	8008776 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e00f      	b.n	800876e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	69da      	ldr	r2, [r3, #28]
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4013      	ands	r3, r2
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	429a      	cmp	r2, r3
 800875c:	bf0c      	ite	eq
 800875e:	2301      	moveq	r3, #1
 8008760:	2300      	movne	r3, #0
 8008762:	b2db      	uxtb	r3, r3
 8008764:	461a      	mov	r2, r3
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	429a      	cmp	r2, r3
 800876a:	d0a0      	beq.n	80086ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008776:	b480      	push	{r7}
 8008778:	b095      	sub	sp, #84	@ 0x54
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800879c:	643b      	str	r3, [r7, #64]	@ 0x40
 800879e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e6      	bne.n	800877e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3308      	adds	r3, #8
 80087b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	61fb      	str	r3, [r7, #28]
   return(result);
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087c6:	f023 0301 	bic.w	r3, r3, #1
 80087ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3308      	adds	r3, #8
 80087d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087dc:	e841 2300 	strex	r3, r2, [r1]
 80087e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e3      	bne.n	80087b0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d118      	bne.n	8008822 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f023 0310 	bic.w	r3, r3, #16
 8008804:	647b      	str	r3, [r7, #68]	@ 0x44
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800880e:	61bb      	str	r3, [r7, #24]
 8008810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6979      	ldr	r1, [r7, #20]
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	613b      	str	r3, [r7, #16]
   return(result);
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e6      	bne.n	80087f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008836:	bf00      	nop
 8008838:	3754      	adds	r7, #84	@ 0x54
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008842:	b480      	push	{r7}
 8008844:	b085      	sub	sp, #20
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_UARTEx_DisableFifoMode+0x16>
 8008854:	2302      	movs	r3, #2
 8008856:	e027      	b.n	80088a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2224      	movs	r2, #36	@ 0x24
 8008864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0201 	bic.w	r2, r2, #1
 800887e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008886:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d101      	bne.n	80088cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088c8:	2302      	movs	r3, #2
 80088ca:	e02d      	b.n	8008928 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2224      	movs	r2, #36	@ 0x24
 80088d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f84f 	bl	80089ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008944:	2302      	movs	r3, #2
 8008946:	e02d      	b.n	80089a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2224      	movs	r2, #36	@ 0x24
 8008954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0201 	bic.w	r2, r2, #1
 800896e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f811 	bl	80089ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2220      	movs	r2, #32
 8008996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d108      	bne.n	80089ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089cc:	e031      	b.n	8008a32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089ce:	2308      	movs	r3, #8
 80089d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089d2:	2308      	movs	r3, #8
 80089d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	0e5b      	lsrs	r3, r3, #25
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	0f5b      	lsrs	r3, r3, #29
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	f003 0307 	and.w	r3, r3, #7
 80089f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	7b3a      	ldrb	r2, [r7, #12]
 80089fa:	4911      	ldr	r1, [pc, #68]	@ (8008a40 <UARTEx_SetNbDataToProcess+0x94>)
 80089fc:	5c8a      	ldrb	r2, [r1, r2]
 80089fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a02:	7b3a      	ldrb	r2, [r7, #12]
 8008a04:	490f      	ldr	r1, [pc, #60]	@ (8008a44 <UARTEx_SetNbDataToProcess+0x98>)
 8008a06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a08:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	7b7a      	ldrb	r2, [r7, #13]
 8008a18:	4909      	ldr	r1, [pc, #36]	@ (8008a40 <UARTEx_SetNbDataToProcess+0x94>)
 8008a1a:	5c8a      	ldrb	r2, [r1, r2]
 8008a1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a20:	7b7a      	ldrb	r2, [r7, #13]
 8008a22:	4908      	ldr	r1, [pc, #32]	@ (8008a44 <UARTEx_SetNbDataToProcess+0x98>)
 8008a24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	0800bb5c 	.word	0x0800bb5c
 8008a44:	0800bb64 	.word	0x0800bb64

08008a48 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	6812      	ldr	r2, [r2, #0]
 8008a60:	f023 0101 	bic.w	r1, r3, #1
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	d102      	bne.n	8008a78 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008a72:	2340      	movs	r3, #64	@ 0x40
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	e001      	b.n	8008a7c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008a88:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008a8e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008a94:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008a9a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008aa0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008aa6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008aac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8008ab2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8008ab8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8008aea:	4b23      	ldr	r3, [pc, #140]	@ (8008b78 <FMC_NORSRAM_Init+0x130>)
 8008aec:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008af4:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008afc:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8008b04:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8008b0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	43db      	mvns	r3, r3
 8008b1c:	ea02 0103 	and.w	r1, r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4319      	orrs	r1, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b36:	d10c      	bne.n	8008b52 <FMC_NORSRAM_Init+0x10a>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d008      	beq.n	8008b52 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d006      	beq.n	8008b68 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	0008fb7f 	.word	0x0008fb7f

08008b7c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 8008b92:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 8008b9a:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 8008ba2:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 8008baa:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 8008bb4:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	3b02      	subs	r3, #2
 8008bbc:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 8008bbe:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8008bca:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bde:	d113      	bne.n	8008c08 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008be8:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	051b      	lsls	r3, r3, #20
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	431a      	orrs	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b085      	sub	sp, #20
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	607a      	str	r2, [r7, #4]
 8008c22:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c2a:	d121      	bne.n	8008c70 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c34:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6819      	ldr	r1, [r3, #0]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	011b      	lsls	r3, r3, #4
 8008c42:	4319      	orrs	r1, r3
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	4319      	orrs	r1, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	079b      	lsls	r3, r3, #30
 8008c52:	4319      	orrs	r1, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	4319      	orrs	r1, r3
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	041b      	lsls	r3, r3, #16
 8008c60:	430b      	orrs	r3, r1
 8008c62:	ea42 0103 	orr.w	r1, r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008c6e:	e005      	b.n	8008c7c <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <__cvt>:
 8008c8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c8e:	ec57 6b10 	vmov	r6, r7, d0
 8008c92:	2f00      	cmp	r7, #0
 8008c94:	460c      	mov	r4, r1
 8008c96:	4619      	mov	r1, r3
 8008c98:	463b      	mov	r3, r7
 8008c9a:	bfbb      	ittet	lt
 8008c9c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008ca0:	461f      	movlt	r7, r3
 8008ca2:	2300      	movge	r3, #0
 8008ca4:	232d      	movlt	r3, #45	@ 0x2d
 8008ca6:	700b      	strb	r3, [r1, #0]
 8008ca8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008caa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008cae:	4691      	mov	r9, r2
 8008cb0:	f023 0820 	bic.w	r8, r3, #32
 8008cb4:	bfbc      	itt	lt
 8008cb6:	4632      	movlt	r2, r6
 8008cb8:	4616      	movlt	r6, r2
 8008cba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cbe:	d005      	beq.n	8008ccc <__cvt+0x42>
 8008cc0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008cc4:	d100      	bne.n	8008cc8 <__cvt+0x3e>
 8008cc6:	3401      	adds	r4, #1
 8008cc8:	2102      	movs	r1, #2
 8008cca:	e000      	b.n	8008cce <__cvt+0x44>
 8008ccc:	2103      	movs	r1, #3
 8008cce:	ab03      	add	r3, sp, #12
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	ab02      	add	r3, sp, #8
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	ec47 6b10 	vmov	d0, r6, r7
 8008cda:	4653      	mov	r3, sl
 8008cdc:	4622      	mov	r2, r4
 8008cde:	f000 fe5b 	bl	8009998 <_dtoa_r>
 8008ce2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	d119      	bne.n	8008d1e <__cvt+0x94>
 8008cea:	f019 0f01 	tst.w	r9, #1
 8008cee:	d00e      	beq.n	8008d0e <__cvt+0x84>
 8008cf0:	eb00 0904 	add.w	r9, r0, r4
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 fefc 	bl	8000af8 <__aeabi_dcmpeq>
 8008d00:	b108      	cbz	r0, 8008d06 <__cvt+0x7c>
 8008d02:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d06:	2230      	movs	r2, #48	@ 0x30
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	454b      	cmp	r3, r9
 8008d0c:	d31e      	bcc.n	8008d4c <__cvt+0xc2>
 8008d0e:	9b03      	ldr	r3, [sp, #12]
 8008d10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d12:	1b5b      	subs	r3, r3, r5
 8008d14:	4628      	mov	r0, r5
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	b004      	add	sp, #16
 8008d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d22:	eb00 0904 	add.w	r9, r0, r4
 8008d26:	d1e5      	bne.n	8008cf4 <__cvt+0x6a>
 8008d28:	7803      	ldrb	r3, [r0, #0]
 8008d2a:	2b30      	cmp	r3, #48	@ 0x30
 8008d2c:	d10a      	bne.n	8008d44 <__cvt+0xba>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2300      	movs	r3, #0
 8008d32:	4630      	mov	r0, r6
 8008d34:	4639      	mov	r1, r7
 8008d36:	f7f7 fedf 	bl	8000af8 <__aeabi_dcmpeq>
 8008d3a:	b918      	cbnz	r0, 8008d44 <__cvt+0xba>
 8008d3c:	f1c4 0401 	rsb	r4, r4, #1
 8008d40:	f8ca 4000 	str.w	r4, [sl]
 8008d44:	f8da 3000 	ldr.w	r3, [sl]
 8008d48:	4499      	add	r9, r3
 8008d4a:	e7d3      	b.n	8008cf4 <__cvt+0x6a>
 8008d4c:	1c59      	adds	r1, r3, #1
 8008d4e:	9103      	str	r1, [sp, #12]
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	e7d9      	b.n	8008d08 <__cvt+0x7e>

08008d54 <__exponent>:
 8008d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d56:	2900      	cmp	r1, #0
 8008d58:	bfba      	itte	lt
 8008d5a:	4249      	neglt	r1, r1
 8008d5c:	232d      	movlt	r3, #45	@ 0x2d
 8008d5e:	232b      	movge	r3, #43	@ 0x2b
 8008d60:	2909      	cmp	r1, #9
 8008d62:	7002      	strb	r2, [r0, #0]
 8008d64:	7043      	strb	r3, [r0, #1]
 8008d66:	dd29      	ble.n	8008dbc <__exponent+0x68>
 8008d68:	f10d 0307 	add.w	r3, sp, #7
 8008d6c:	461d      	mov	r5, r3
 8008d6e:	270a      	movs	r7, #10
 8008d70:	461a      	mov	r2, r3
 8008d72:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d76:	fb07 1416 	mls	r4, r7, r6, r1
 8008d7a:	3430      	adds	r4, #48	@ 0x30
 8008d7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d80:	460c      	mov	r4, r1
 8008d82:	2c63      	cmp	r4, #99	@ 0x63
 8008d84:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d88:	4631      	mov	r1, r6
 8008d8a:	dcf1      	bgt.n	8008d70 <__exponent+0x1c>
 8008d8c:	3130      	adds	r1, #48	@ 0x30
 8008d8e:	1e94      	subs	r4, r2, #2
 8008d90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d94:	1c41      	adds	r1, r0, #1
 8008d96:	4623      	mov	r3, r4
 8008d98:	42ab      	cmp	r3, r5
 8008d9a:	d30a      	bcc.n	8008db2 <__exponent+0x5e>
 8008d9c:	f10d 0309 	add.w	r3, sp, #9
 8008da0:	1a9b      	subs	r3, r3, r2
 8008da2:	42ac      	cmp	r4, r5
 8008da4:	bf88      	it	hi
 8008da6:	2300      	movhi	r3, #0
 8008da8:	3302      	adds	r3, #2
 8008daa:	4403      	add	r3, r0
 8008dac:	1a18      	subs	r0, r3, r0
 8008dae:	b003      	add	sp, #12
 8008db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008db6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008dba:	e7ed      	b.n	8008d98 <__exponent+0x44>
 8008dbc:	2330      	movs	r3, #48	@ 0x30
 8008dbe:	3130      	adds	r1, #48	@ 0x30
 8008dc0:	7083      	strb	r3, [r0, #2]
 8008dc2:	70c1      	strb	r1, [r0, #3]
 8008dc4:	1d03      	adds	r3, r0, #4
 8008dc6:	e7f1      	b.n	8008dac <__exponent+0x58>

08008dc8 <_printf_float>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	b08d      	sub	sp, #52	@ 0x34
 8008dce:	460c      	mov	r4, r1
 8008dd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	461f      	mov	r7, r3
 8008dd8:	4605      	mov	r5, r0
 8008dda:	f000 fcdb 	bl	8009794 <_localeconv_r>
 8008dde:	6803      	ldr	r3, [r0, #0]
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7f7 fa5c 	bl	80002a0 <strlen>
 8008de8:	2300      	movs	r3, #0
 8008dea:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dec:	f8d8 3000 	ldr.w	r3, [r8]
 8008df0:	9005      	str	r0, [sp, #20]
 8008df2:	3307      	adds	r3, #7
 8008df4:	f023 0307 	bic.w	r3, r3, #7
 8008df8:	f103 0208 	add.w	r2, r3, #8
 8008dfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e00:	f8d4 b000 	ldr.w	fp, [r4]
 8008e04:	f8c8 2000 	str.w	r2, [r8]
 8008e08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e10:	9307      	str	r3, [sp, #28]
 8008e12:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009090 <_printf_float+0x2c8>)
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	f7f7 fe9a 	bl	8000b5c <__aeabi_dcmpun>
 8008e28:	bb70      	cbnz	r0, 8008e88 <_printf_float+0xc0>
 8008e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e2e:	4b98      	ldr	r3, [pc, #608]	@ (8009090 <_printf_float+0x2c8>)
 8008e30:	f04f 32ff 	mov.w	r2, #4294967295
 8008e34:	f7f7 fe74 	bl	8000b20 <__aeabi_dcmple>
 8008e38:	bb30      	cbnz	r0, 8008e88 <_printf_float+0xc0>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4640      	mov	r0, r8
 8008e40:	4649      	mov	r1, r9
 8008e42:	f7f7 fe63 	bl	8000b0c <__aeabi_dcmplt>
 8008e46:	b110      	cbz	r0, 8008e4e <_printf_float+0x86>
 8008e48:	232d      	movs	r3, #45	@ 0x2d
 8008e4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e4e:	4a91      	ldr	r2, [pc, #580]	@ (8009094 <_printf_float+0x2cc>)
 8008e50:	4b91      	ldr	r3, [pc, #580]	@ (8009098 <_printf_float+0x2d0>)
 8008e52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e56:	bf8c      	ite	hi
 8008e58:	4690      	movhi	r8, r2
 8008e5a:	4698      	movls	r8, r3
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	f02b 0304 	bic.w	r3, fp, #4
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	f04f 0900 	mov.w	r9, #0
 8008e6a:	9700      	str	r7, [sp, #0]
 8008e6c:	4633      	mov	r3, r6
 8008e6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 f9d2 	bl	800921c <_printf_common>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f040 808d 	bne.w	8008f98 <_printf_float+0x1d0>
 8008e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e82:	b00d      	add	sp, #52	@ 0x34
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	4642      	mov	r2, r8
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	4649      	mov	r1, r9
 8008e90:	f7f7 fe64 	bl	8000b5c <__aeabi_dcmpun>
 8008e94:	b140      	cbz	r0, 8008ea8 <_printf_float+0xe0>
 8008e96:	464b      	mov	r3, r9
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	bfbc      	itt	lt
 8008e9c:	232d      	movlt	r3, #45	@ 0x2d
 8008e9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800909c <_printf_float+0x2d4>)
 8008ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80090a0 <_printf_float+0x2d8>)
 8008ea6:	e7d4      	b.n	8008e52 <_printf_float+0x8a>
 8008ea8:	6863      	ldr	r3, [r4, #4]
 8008eaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008eae:	9206      	str	r2, [sp, #24]
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	d13b      	bne.n	8008f2c <_printf_float+0x164>
 8008eb4:	2306      	movs	r3, #6
 8008eb6:	6063      	str	r3, [r4, #4]
 8008eb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	6022      	str	r2, [r4, #0]
 8008ec0:	9303      	str	r3, [sp, #12]
 8008ec2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ec4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008ec8:	ab09      	add	r3, sp, #36	@ 0x24
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	6861      	ldr	r1, [r4, #4]
 8008ece:	ec49 8b10 	vmov	d0, r8, r9
 8008ed2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f7ff fed7 	bl	8008c8a <__cvt>
 8008edc:	9b06      	ldr	r3, [sp, #24]
 8008ede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ee0:	2b47      	cmp	r3, #71	@ 0x47
 8008ee2:	4680      	mov	r8, r0
 8008ee4:	d129      	bne.n	8008f3a <_printf_float+0x172>
 8008ee6:	1cc8      	adds	r0, r1, #3
 8008ee8:	db02      	blt.n	8008ef0 <_printf_float+0x128>
 8008eea:	6863      	ldr	r3, [r4, #4]
 8008eec:	4299      	cmp	r1, r3
 8008eee:	dd41      	ble.n	8008f74 <_printf_float+0x1ac>
 8008ef0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ef4:	fa5f fa8a 	uxtb.w	sl, sl
 8008ef8:	3901      	subs	r1, #1
 8008efa:	4652      	mov	r2, sl
 8008efc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f00:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f02:	f7ff ff27 	bl	8008d54 <__exponent>
 8008f06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f08:	1813      	adds	r3, r2, r0
 8008f0a:	2a01      	cmp	r2, #1
 8008f0c:	4681      	mov	r9, r0
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	dc02      	bgt.n	8008f18 <_printf_float+0x150>
 8008f12:	6822      	ldr	r2, [r4, #0]
 8008f14:	07d2      	lsls	r2, r2, #31
 8008f16:	d501      	bpl.n	8008f1c <_printf_float+0x154>
 8008f18:	3301      	adds	r3, #1
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0a2      	beq.n	8008e6a <_printf_float+0xa2>
 8008f24:	232d      	movs	r3, #45	@ 0x2d
 8008f26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f2a:	e79e      	b.n	8008e6a <_printf_float+0xa2>
 8008f2c:	9a06      	ldr	r2, [sp, #24]
 8008f2e:	2a47      	cmp	r2, #71	@ 0x47
 8008f30:	d1c2      	bne.n	8008eb8 <_printf_float+0xf0>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1c0      	bne.n	8008eb8 <_printf_float+0xf0>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e7bd      	b.n	8008eb6 <_printf_float+0xee>
 8008f3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f3e:	d9db      	bls.n	8008ef8 <_printf_float+0x130>
 8008f40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f44:	d118      	bne.n	8008f78 <_printf_float+0x1b0>
 8008f46:	2900      	cmp	r1, #0
 8008f48:	6863      	ldr	r3, [r4, #4]
 8008f4a:	dd0b      	ble.n	8008f64 <_printf_float+0x19c>
 8008f4c:	6121      	str	r1, [r4, #16]
 8008f4e:	b913      	cbnz	r3, 8008f56 <_printf_float+0x18e>
 8008f50:	6822      	ldr	r2, [r4, #0]
 8008f52:	07d0      	lsls	r0, r2, #31
 8008f54:	d502      	bpl.n	8008f5c <_printf_float+0x194>
 8008f56:	3301      	adds	r3, #1
 8008f58:	440b      	add	r3, r1
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f5e:	f04f 0900 	mov.w	r9, #0
 8008f62:	e7db      	b.n	8008f1c <_printf_float+0x154>
 8008f64:	b913      	cbnz	r3, 8008f6c <_printf_float+0x1a4>
 8008f66:	6822      	ldr	r2, [r4, #0]
 8008f68:	07d2      	lsls	r2, r2, #31
 8008f6a:	d501      	bpl.n	8008f70 <_printf_float+0x1a8>
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	e7f4      	b.n	8008f5a <_printf_float+0x192>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e7f2      	b.n	8008f5a <_printf_float+0x192>
 8008f74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f7a:	4299      	cmp	r1, r3
 8008f7c:	db05      	blt.n	8008f8a <_printf_float+0x1c2>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	6121      	str	r1, [r4, #16]
 8008f82:	07d8      	lsls	r0, r3, #31
 8008f84:	d5ea      	bpl.n	8008f5c <_printf_float+0x194>
 8008f86:	1c4b      	adds	r3, r1, #1
 8008f88:	e7e7      	b.n	8008f5a <_printf_float+0x192>
 8008f8a:	2900      	cmp	r1, #0
 8008f8c:	bfd4      	ite	le
 8008f8e:	f1c1 0202 	rsble	r2, r1, #2
 8008f92:	2201      	movgt	r2, #1
 8008f94:	4413      	add	r3, r2
 8008f96:	e7e0      	b.n	8008f5a <_printf_float+0x192>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	055a      	lsls	r2, r3, #21
 8008f9c:	d407      	bmi.n	8008fae <_printf_float+0x1e6>
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d12b      	bne.n	8009004 <_printf_float+0x23c>
 8008fac:	e767      	b.n	8008e7e <_printf_float+0xb6>
 8008fae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fb2:	f240 80dd 	bls.w	8009170 <_printf_float+0x3a8>
 8008fb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f7f7 fd9b 	bl	8000af8 <__aeabi_dcmpeq>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d033      	beq.n	800902e <_printf_float+0x266>
 8008fc6:	4a37      	ldr	r2, [pc, #220]	@ (80090a4 <_printf_float+0x2dc>)
 8008fc8:	2301      	movs	r3, #1
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4628      	mov	r0, r5
 8008fce:	47b8      	blx	r7
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f43f af54 	beq.w	8008e7e <_printf_float+0xb6>
 8008fd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008fda:	4543      	cmp	r3, r8
 8008fdc:	db02      	blt.n	8008fe4 <_printf_float+0x21c>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	07d8      	lsls	r0, r3, #31
 8008fe2:	d50f      	bpl.n	8009004 <_printf_float+0x23c>
 8008fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4628      	mov	r0, r5
 8008fec:	47b8      	blx	r7
 8008fee:	3001      	adds	r0, #1
 8008ff0:	f43f af45 	beq.w	8008e7e <_printf_float+0xb6>
 8008ff4:	f04f 0900 	mov.w	r9, #0
 8008ff8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ffc:	f104 0a1a 	add.w	sl, r4, #26
 8009000:	45c8      	cmp	r8, r9
 8009002:	dc09      	bgt.n	8009018 <_printf_float+0x250>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	079b      	lsls	r3, r3, #30
 8009008:	f100 8103 	bmi.w	8009212 <_printf_float+0x44a>
 800900c:	68e0      	ldr	r0, [r4, #12]
 800900e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009010:	4298      	cmp	r0, r3
 8009012:	bfb8      	it	lt
 8009014:	4618      	movlt	r0, r3
 8009016:	e734      	b.n	8008e82 <_printf_float+0xba>
 8009018:	2301      	movs	r3, #1
 800901a:	4652      	mov	r2, sl
 800901c:	4631      	mov	r1, r6
 800901e:	4628      	mov	r0, r5
 8009020:	47b8      	blx	r7
 8009022:	3001      	adds	r0, #1
 8009024:	f43f af2b 	beq.w	8008e7e <_printf_float+0xb6>
 8009028:	f109 0901 	add.w	r9, r9, #1
 800902c:	e7e8      	b.n	8009000 <_printf_float+0x238>
 800902e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc39      	bgt.n	80090a8 <_printf_float+0x2e0>
 8009034:	4a1b      	ldr	r2, [pc, #108]	@ (80090a4 <_printf_float+0x2dc>)
 8009036:	2301      	movs	r3, #1
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	f43f af1d 	beq.w	8008e7e <_printf_float+0xb6>
 8009044:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009048:	ea59 0303 	orrs.w	r3, r9, r3
 800904c:	d102      	bne.n	8009054 <_printf_float+0x28c>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	07d9      	lsls	r1, r3, #31
 8009052:	d5d7      	bpl.n	8009004 <_printf_float+0x23c>
 8009054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	f43f af0d 	beq.w	8008e7e <_printf_float+0xb6>
 8009064:	f04f 0a00 	mov.w	sl, #0
 8009068:	f104 0b1a 	add.w	fp, r4, #26
 800906c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800906e:	425b      	negs	r3, r3
 8009070:	4553      	cmp	r3, sl
 8009072:	dc01      	bgt.n	8009078 <_printf_float+0x2b0>
 8009074:	464b      	mov	r3, r9
 8009076:	e793      	b.n	8008fa0 <_printf_float+0x1d8>
 8009078:	2301      	movs	r3, #1
 800907a:	465a      	mov	r2, fp
 800907c:	4631      	mov	r1, r6
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	f43f aefb 	beq.w	8008e7e <_printf_float+0xb6>
 8009088:	f10a 0a01 	add.w	sl, sl, #1
 800908c:	e7ee      	b.n	800906c <_printf_float+0x2a4>
 800908e:	bf00      	nop
 8009090:	7fefffff 	.word	0x7fefffff
 8009094:	0800bb70 	.word	0x0800bb70
 8009098:	0800bb6c 	.word	0x0800bb6c
 800909c:	0800bb78 	.word	0x0800bb78
 80090a0:	0800bb74 	.word	0x0800bb74
 80090a4:	0800bb7c 	.word	0x0800bb7c
 80090a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090ae:	4553      	cmp	r3, sl
 80090b0:	bfa8      	it	ge
 80090b2:	4653      	movge	r3, sl
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	4699      	mov	r9, r3
 80090b8:	dc36      	bgt.n	8009128 <_printf_float+0x360>
 80090ba:	f04f 0b00 	mov.w	fp, #0
 80090be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090c2:	f104 021a 	add.w	r2, r4, #26
 80090c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090c8:	9306      	str	r3, [sp, #24]
 80090ca:	eba3 0309 	sub.w	r3, r3, r9
 80090ce:	455b      	cmp	r3, fp
 80090d0:	dc31      	bgt.n	8009136 <_printf_float+0x36e>
 80090d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d4:	459a      	cmp	sl, r3
 80090d6:	dc3a      	bgt.n	800914e <_printf_float+0x386>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	07da      	lsls	r2, r3, #31
 80090dc:	d437      	bmi.n	800914e <_printf_float+0x386>
 80090de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e0:	ebaa 0903 	sub.w	r9, sl, r3
 80090e4:	9b06      	ldr	r3, [sp, #24]
 80090e6:	ebaa 0303 	sub.w	r3, sl, r3
 80090ea:	4599      	cmp	r9, r3
 80090ec:	bfa8      	it	ge
 80090ee:	4699      	movge	r9, r3
 80090f0:	f1b9 0f00 	cmp.w	r9, #0
 80090f4:	dc33      	bgt.n	800915e <_printf_float+0x396>
 80090f6:	f04f 0800 	mov.w	r8, #0
 80090fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090fe:	f104 0b1a 	add.w	fp, r4, #26
 8009102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009104:	ebaa 0303 	sub.w	r3, sl, r3
 8009108:	eba3 0309 	sub.w	r3, r3, r9
 800910c:	4543      	cmp	r3, r8
 800910e:	f77f af79 	ble.w	8009004 <_printf_float+0x23c>
 8009112:	2301      	movs	r3, #1
 8009114:	465a      	mov	r2, fp
 8009116:	4631      	mov	r1, r6
 8009118:	4628      	mov	r0, r5
 800911a:	47b8      	blx	r7
 800911c:	3001      	adds	r0, #1
 800911e:	f43f aeae 	beq.w	8008e7e <_printf_float+0xb6>
 8009122:	f108 0801 	add.w	r8, r8, #1
 8009126:	e7ec      	b.n	8009102 <_printf_float+0x33a>
 8009128:	4642      	mov	r2, r8
 800912a:	4631      	mov	r1, r6
 800912c:	4628      	mov	r0, r5
 800912e:	47b8      	blx	r7
 8009130:	3001      	adds	r0, #1
 8009132:	d1c2      	bne.n	80090ba <_printf_float+0x2f2>
 8009134:	e6a3      	b.n	8008e7e <_printf_float+0xb6>
 8009136:	2301      	movs	r3, #1
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	9206      	str	r2, [sp, #24]
 800913e:	47b8      	blx	r7
 8009140:	3001      	adds	r0, #1
 8009142:	f43f ae9c 	beq.w	8008e7e <_printf_float+0xb6>
 8009146:	9a06      	ldr	r2, [sp, #24]
 8009148:	f10b 0b01 	add.w	fp, fp, #1
 800914c:	e7bb      	b.n	80090c6 <_printf_float+0x2fe>
 800914e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009152:	4631      	mov	r1, r6
 8009154:	4628      	mov	r0, r5
 8009156:	47b8      	blx	r7
 8009158:	3001      	adds	r0, #1
 800915a:	d1c0      	bne.n	80090de <_printf_float+0x316>
 800915c:	e68f      	b.n	8008e7e <_printf_float+0xb6>
 800915e:	9a06      	ldr	r2, [sp, #24]
 8009160:	464b      	mov	r3, r9
 8009162:	4442      	add	r2, r8
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	d1c3      	bne.n	80090f6 <_printf_float+0x32e>
 800916e:	e686      	b.n	8008e7e <_printf_float+0xb6>
 8009170:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009174:	f1ba 0f01 	cmp.w	sl, #1
 8009178:	dc01      	bgt.n	800917e <_printf_float+0x3b6>
 800917a:	07db      	lsls	r3, r3, #31
 800917c:	d536      	bpl.n	80091ec <_printf_float+0x424>
 800917e:	2301      	movs	r3, #1
 8009180:	4642      	mov	r2, r8
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	f43f ae78 	beq.w	8008e7e <_printf_float+0xb6>
 800918e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009192:	4631      	mov	r1, r6
 8009194:	4628      	mov	r0, r5
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f ae70 	beq.w	8008e7e <_printf_float+0xb6>
 800919e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091a2:	2200      	movs	r2, #0
 80091a4:	2300      	movs	r3, #0
 80091a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091aa:	f7f7 fca5 	bl	8000af8 <__aeabi_dcmpeq>
 80091ae:	b9c0      	cbnz	r0, 80091e2 <_printf_float+0x41a>
 80091b0:	4653      	mov	r3, sl
 80091b2:	f108 0201 	add.w	r2, r8, #1
 80091b6:	4631      	mov	r1, r6
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b8      	blx	r7
 80091bc:	3001      	adds	r0, #1
 80091be:	d10c      	bne.n	80091da <_printf_float+0x412>
 80091c0:	e65d      	b.n	8008e7e <_printf_float+0xb6>
 80091c2:	2301      	movs	r3, #1
 80091c4:	465a      	mov	r2, fp
 80091c6:	4631      	mov	r1, r6
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b8      	blx	r7
 80091cc:	3001      	adds	r0, #1
 80091ce:	f43f ae56 	beq.w	8008e7e <_printf_float+0xb6>
 80091d2:	f108 0801 	add.w	r8, r8, #1
 80091d6:	45d0      	cmp	r8, sl
 80091d8:	dbf3      	blt.n	80091c2 <_printf_float+0x3fa>
 80091da:	464b      	mov	r3, r9
 80091dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80091e0:	e6df      	b.n	8008fa2 <_printf_float+0x1da>
 80091e2:	f04f 0800 	mov.w	r8, #0
 80091e6:	f104 0b1a 	add.w	fp, r4, #26
 80091ea:	e7f4      	b.n	80091d6 <_printf_float+0x40e>
 80091ec:	2301      	movs	r3, #1
 80091ee:	4642      	mov	r2, r8
 80091f0:	e7e1      	b.n	80091b6 <_printf_float+0x3ee>
 80091f2:	2301      	movs	r3, #1
 80091f4:	464a      	mov	r2, r9
 80091f6:	4631      	mov	r1, r6
 80091f8:	4628      	mov	r0, r5
 80091fa:	47b8      	blx	r7
 80091fc:	3001      	adds	r0, #1
 80091fe:	f43f ae3e 	beq.w	8008e7e <_printf_float+0xb6>
 8009202:	f108 0801 	add.w	r8, r8, #1
 8009206:	68e3      	ldr	r3, [r4, #12]
 8009208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800920a:	1a5b      	subs	r3, r3, r1
 800920c:	4543      	cmp	r3, r8
 800920e:	dcf0      	bgt.n	80091f2 <_printf_float+0x42a>
 8009210:	e6fc      	b.n	800900c <_printf_float+0x244>
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	f104 0919 	add.w	r9, r4, #25
 800921a:	e7f4      	b.n	8009206 <_printf_float+0x43e>

0800921c <_printf_common>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	4616      	mov	r6, r2
 8009222:	4698      	mov	r8, r3
 8009224:	688a      	ldr	r2, [r1, #8]
 8009226:	690b      	ldr	r3, [r1, #16]
 8009228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800922c:	4293      	cmp	r3, r2
 800922e:	bfb8      	it	lt
 8009230:	4613      	movlt	r3, r2
 8009232:	6033      	str	r3, [r6, #0]
 8009234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009238:	4607      	mov	r7, r0
 800923a:	460c      	mov	r4, r1
 800923c:	b10a      	cbz	r2, 8009242 <_printf_common+0x26>
 800923e:	3301      	adds	r3, #1
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	0699      	lsls	r1, r3, #26
 8009246:	bf42      	ittt	mi
 8009248:	6833      	ldrmi	r3, [r6, #0]
 800924a:	3302      	addmi	r3, #2
 800924c:	6033      	strmi	r3, [r6, #0]
 800924e:	6825      	ldr	r5, [r4, #0]
 8009250:	f015 0506 	ands.w	r5, r5, #6
 8009254:	d106      	bne.n	8009264 <_printf_common+0x48>
 8009256:	f104 0a19 	add.w	sl, r4, #25
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	6832      	ldr	r2, [r6, #0]
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	42ab      	cmp	r3, r5
 8009262:	dc26      	bgt.n	80092b2 <_printf_common+0x96>
 8009264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	3b00      	subs	r3, #0
 800926c:	bf18      	it	ne
 800926e:	2301      	movne	r3, #1
 8009270:	0692      	lsls	r2, r2, #26
 8009272:	d42b      	bmi.n	80092cc <_printf_common+0xb0>
 8009274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009278:	4641      	mov	r1, r8
 800927a:	4638      	mov	r0, r7
 800927c:	47c8      	blx	r9
 800927e:	3001      	adds	r0, #1
 8009280:	d01e      	beq.n	80092c0 <_printf_common+0xa4>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	f003 0306 	and.w	r3, r3, #6
 800928a:	2b04      	cmp	r3, #4
 800928c:	bf02      	ittt	eq
 800928e:	68e5      	ldreq	r5, [r4, #12]
 8009290:	6833      	ldreq	r3, [r6, #0]
 8009292:	1aed      	subeq	r5, r5, r3
 8009294:	68a3      	ldr	r3, [r4, #8]
 8009296:	bf0c      	ite	eq
 8009298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800929c:	2500      	movne	r5, #0
 800929e:	4293      	cmp	r3, r2
 80092a0:	bfc4      	itt	gt
 80092a2:	1a9b      	subgt	r3, r3, r2
 80092a4:	18ed      	addgt	r5, r5, r3
 80092a6:	2600      	movs	r6, #0
 80092a8:	341a      	adds	r4, #26
 80092aa:	42b5      	cmp	r5, r6
 80092ac:	d11a      	bne.n	80092e4 <_printf_common+0xc8>
 80092ae:	2000      	movs	r0, #0
 80092b0:	e008      	b.n	80092c4 <_printf_common+0xa8>
 80092b2:	2301      	movs	r3, #1
 80092b4:	4652      	mov	r2, sl
 80092b6:	4641      	mov	r1, r8
 80092b8:	4638      	mov	r0, r7
 80092ba:	47c8      	blx	r9
 80092bc:	3001      	adds	r0, #1
 80092be:	d103      	bne.n	80092c8 <_printf_common+0xac>
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c8:	3501      	adds	r5, #1
 80092ca:	e7c6      	b.n	800925a <_printf_common+0x3e>
 80092cc:	18e1      	adds	r1, r4, r3
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	2030      	movs	r0, #48	@ 0x30
 80092d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092d6:	4422      	add	r2, r4
 80092d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092e0:	3302      	adds	r3, #2
 80092e2:	e7c7      	b.n	8009274 <_printf_common+0x58>
 80092e4:	2301      	movs	r3, #1
 80092e6:	4622      	mov	r2, r4
 80092e8:	4641      	mov	r1, r8
 80092ea:	4638      	mov	r0, r7
 80092ec:	47c8      	blx	r9
 80092ee:	3001      	adds	r0, #1
 80092f0:	d0e6      	beq.n	80092c0 <_printf_common+0xa4>
 80092f2:	3601      	adds	r6, #1
 80092f4:	e7d9      	b.n	80092aa <_printf_common+0x8e>
	...

080092f8 <_printf_i>:
 80092f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092fc:	7e0f      	ldrb	r7, [r1, #24]
 80092fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009300:	2f78      	cmp	r7, #120	@ 0x78
 8009302:	4691      	mov	r9, r2
 8009304:	4680      	mov	r8, r0
 8009306:	460c      	mov	r4, r1
 8009308:	469a      	mov	sl, r3
 800930a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800930e:	d807      	bhi.n	8009320 <_printf_i+0x28>
 8009310:	2f62      	cmp	r7, #98	@ 0x62
 8009312:	d80a      	bhi.n	800932a <_printf_i+0x32>
 8009314:	2f00      	cmp	r7, #0
 8009316:	f000 80d1 	beq.w	80094bc <_printf_i+0x1c4>
 800931a:	2f58      	cmp	r7, #88	@ 0x58
 800931c:	f000 80b8 	beq.w	8009490 <_printf_i+0x198>
 8009320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009328:	e03a      	b.n	80093a0 <_printf_i+0xa8>
 800932a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800932e:	2b15      	cmp	r3, #21
 8009330:	d8f6      	bhi.n	8009320 <_printf_i+0x28>
 8009332:	a101      	add	r1, pc, #4	@ (adr r1, 8009338 <_printf_i+0x40>)
 8009334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009338:	08009391 	.word	0x08009391
 800933c:	080093a5 	.word	0x080093a5
 8009340:	08009321 	.word	0x08009321
 8009344:	08009321 	.word	0x08009321
 8009348:	08009321 	.word	0x08009321
 800934c:	08009321 	.word	0x08009321
 8009350:	080093a5 	.word	0x080093a5
 8009354:	08009321 	.word	0x08009321
 8009358:	08009321 	.word	0x08009321
 800935c:	08009321 	.word	0x08009321
 8009360:	08009321 	.word	0x08009321
 8009364:	080094a3 	.word	0x080094a3
 8009368:	080093cf 	.word	0x080093cf
 800936c:	0800945d 	.word	0x0800945d
 8009370:	08009321 	.word	0x08009321
 8009374:	08009321 	.word	0x08009321
 8009378:	080094c5 	.word	0x080094c5
 800937c:	08009321 	.word	0x08009321
 8009380:	080093cf 	.word	0x080093cf
 8009384:	08009321 	.word	0x08009321
 8009388:	08009321 	.word	0x08009321
 800938c:	08009465 	.word	0x08009465
 8009390:	6833      	ldr	r3, [r6, #0]
 8009392:	1d1a      	adds	r2, r3, #4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6032      	str	r2, [r6, #0]
 8009398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800939c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093a0:	2301      	movs	r3, #1
 80093a2:	e09c      	b.n	80094de <_printf_i+0x1e6>
 80093a4:	6833      	ldr	r3, [r6, #0]
 80093a6:	6820      	ldr	r0, [r4, #0]
 80093a8:	1d19      	adds	r1, r3, #4
 80093aa:	6031      	str	r1, [r6, #0]
 80093ac:	0606      	lsls	r6, r0, #24
 80093ae:	d501      	bpl.n	80093b4 <_printf_i+0xbc>
 80093b0:	681d      	ldr	r5, [r3, #0]
 80093b2:	e003      	b.n	80093bc <_printf_i+0xc4>
 80093b4:	0645      	lsls	r5, r0, #25
 80093b6:	d5fb      	bpl.n	80093b0 <_printf_i+0xb8>
 80093b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093bc:	2d00      	cmp	r5, #0
 80093be:	da03      	bge.n	80093c8 <_printf_i+0xd0>
 80093c0:	232d      	movs	r3, #45	@ 0x2d
 80093c2:	426d      	negs	r5, r5
 80093c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093c8:	4858      	ldr	r0, [pc, #352]	@ (800952c <_printf_i+0x234>)
 80093ca:	230a      	movs	r3, #10
 80093cc:	e011      	b.n	80093f2 <_printf_i+0xfa>
 80093ce:	6821      	ldr	r1, [r4, #0]
 80093d0:	6833      	ldr	r3, [r6, #0]
 80093d2:	0608      	lsls	r0, r1, #24
 80093d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80093d8:	d402      	bmi.n	80093e0 <_printf_i+0xe8>
 80093da:	0649      	lsls	r1, r1, #25
 80093dc:	bf48      	it	mi
 80093de:	b2ad      	uxthmi	r5, r5
 80093e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80093e2:	4852      	ldr	r0, [pc, #328]	@ (800952c <_printf_i+0x234>)
 80093e4:	6033      	str	r3, [r6, #0]
 80093e6:	bf14      	ite	ne
 80093e8:	230a      	movne	r3, #10
 80093ea:	2308      	moveq	r3, #8
 80093ec:	2100      	movs	r1, #0
 80093ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093f2:	6866      	ldr	r6, [r4, #4]
 80093f4:	60a6      	str	r6, [r4, #8]
 80093f6:	2e00      	cmp	r6, #0
 80093f8:	db05      	blt.n	8009406 <_printf_i+0x10e>
 80093fa:	6821      	ldr	r1, [r4, #0]
 80093fc:	432e      	orrs	r6, r5
 80093fe:	f021 0104 	bic.w	r1, r1, #4
 8009402:	6021      	str	r1, [r4, #0]
 8009404:	d04b      	beq.n	800949e <_printf_i+0x1a6>
 8009406:	4616      	mov	r6, r2
 8009408:	fbb5 f1f3 	udiv	r1, r5, r3
 800940c:	fb03 5711 	mls	r7, r3, r1, r5
 8009410:	5dc7      	ldrb	r7, [r0, r7]
 8009412:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009416:	462f      	mov	r7, r5
 8009418:	42bb      	cmp	r3, r7
 800941a:	460d      	mov	r5, r1
 800941c:	d9f4      	bls.n	8009408 <_printf_i+0x110>
 800941e:	2b08      	cmp	r3, #8
 8009420:	d10b      	bne.n	800943a <_printf_i+0x142>
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	07df      	lsls	r7, r3, #31
 8009426:	d508      	bpl.n	800943a <_printf_i+0x142>
 8009428:	6923      	ldr	r3, [r4, #16]
 800942a:	6861      	ldr	r1, [r4, #4]
 800942c:	4299      	cmp	r1, r3
 800942e:	bfde      	ittt	le
 8009430:	2330      	movle	r3, #48	@ 0x30
 8009432:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009436:	f106 36ff 	addle.w	r6, r6, #4294967295
 800943a:	1b92      	subs	r2, r2, r6
 800943c:	6122      	str	r2, [r4, #16]
 800943e:	f8cd a000 	str.w	sl, [sp]
 8009442:	464b      	mov	r3, r9
 8009444:	aa03      	add	r2, sp, #12
 8009446:	4621      	mov	r1, r4
 8009448:	4640      	mov	r0, r8
 800944a:	f7ff fee7 	bl	800921c <_printf_common>
 800944e:	3001      	adds	r0, #1
 8009450:	d14a      	bne.n	80094e8 <_printf_i+0x1f0>
 8009452:	f04f 30ff 	mov.w	r0, #4294967295
 8009456:	b004      	add	sp, #16
 8009458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	f043 0320 	orr.w	r3, r3, #32
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	4832      	ldr	r0, [pc, #200]	@ (8009530 <_printf_i+0x238>)
 8009466:	2778      	movs	r7, #120	@ 0x78
 8009468:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	6831      	ldr	r1, [r6, #0]
 8009470:	061f      	lsls	r7, r3, #24
 8009472:	f851 5b04 	ldr.w	r5, [r1], #4
 8009476:	d402      	bmi.n	800947e <_printf_i+0x186>
 8009478:	065f      	lsls	r7, r3, #25
 800947a:	bf48      	it	mi
 800947c:	b2ad      	uxthmi	r5, r5
 800947e:	6031      	str	r1, [r6, #0]
 8009480:	07d9      	lsls	r1, r3, #31
 8009482:	bf44      	itt	mi
 8009484:	f043 0320 	orrmi.w	r3, r3, #32
 8009488:	6023      	strmi	r3, [r4, #0]
 800948a:	b11d      	cbz	r5, 8009494 <_printf_i+0x19c>
 800948c:	2310      	movs	r3, #16
 800948e:	e7ad      	b.n	80093ec <_printf_i+0xf4>
 8009490:	4826      	ldr	r0, [pc, #152]	@ (800952c <_printf_i+0x234>)
 8009492:	e7e9      	b.n	8009468 <_printf_i+0x170>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	f023 0320 	bic.w	r3, r3, #32
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	e7f6      	b.n	800948c <_printf_i+0x194>
 800949e:	4616      	mov	r6, r2
 80094a0:	e7bd      	b.n	800941e <_printf_i+0x126>
 80094a2:	6833      	ldr	r3, [r6, #0]
 80094a4:	6825      	ldr	r5, [r4, #0]
 80094a6:	6961      	ldr	r1, [r4, #20]
 80094a8:	1d18      	adds	r0, r3, #4
 80094aa:	6030      	str	r0, [r6, #0]
 80094ac:	062e      	lsls	r6, r5, #24
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	d501      	bpl.n	80094b6 <_printf_i+0x1be>
 80094b2:	6019      	str	r1, [r3, #0]
 80094b4:	e002      	b.n	80094bc <_printf_i+0x1c4>
 80094b6:	0668      	lsls	r0, r5, #25
 80094b8:	d5fb      	bpl.n	80094b2 <_printf_i+0x1ba>
 80094ba:	8019      	strh	r1, [r3, #0]
 80094bc:	2300      	movs	r3, #0
 80094be:	6123      	str	r3, [r4, #16]
 80094c0:	4616      	mov	r6, r2
 80094c2:	e7bc      	b.n	800943e <_printf_i+0x146>
 80094c4:	6833      	ldr	r3, [r6, #0]
 80094c6:	1d1a      	adds	r2, r3, #4
 80094c8:	6032      	str	r2, [r6, #0]
 80094ca:	681e      	ldr	r6, [r3, #0]
 80094cc:	6862      	ldr	r2, [r4, #4]
 80094ce:	2100      	movs	r1, #0
 80094d0:	4630      	mov	r0, r6
 80094d2:	f7f6 fe95 	bl	8000200 <memchr>
 80094d6:	b108      	cbz	r0, 80094dc <_printf_i+0x1e4>
 80094d8:	1b80      	subs	r0, r0, r6
 80094da:	6060      	str	r0, [r4, #4]
 80094dc:	6863      	ldr	r3, [r4, #4]
 80094de:	6123      	str	r3, [r4, #16]
 80094e0:	2300      	movs	r3, #0
 80094e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094e6:	e7aa      	b.n	800943e <_printf_i+0x146>
 80094e8:	6923      	ldr	r3, [r4, #16]
 80094ea:	4632      	mov	r2, r6
 80094ec:	4649      	mov	r1, r9
 80094ee:	4640      	mov	r0, r8
 80094f0:	47d0      	blx	sl
 80094f2:	3001      	adds	r0, #1
 80094f4:	d0ad      	beq.n	8009452 <_printf_i+0x15a>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	079b      	lsls	r3, r3, #30
 80094fa:	d413      	bmi.n	8009524 <_printf_i+0x22c>
 80094fc:	68e0      	ldr	r0, [r4, #12]
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	4298      	cmp	r0, r3
 8009502:	bfb8      	it	lt
 8009504:	4618      	movlt	r0, r3
 8009506:	e7a6      	b.n	8009456 <_printf_i+0x15e>
 8009508:	2301      	movs	r3, #1
 800950a:	4632      	mov	r2, r6
 800950c:	4649      	mov	r1, r9
 800950e:	4640      	mov	r0, r8
 8009510:	47d0      	blx	sl
 8009512:	3001      	adds	r0, #1
 8009514:	d09d      	beq.n	8009452 <_printf_i+0x15a>
 8009516:	3501      	adds	r5, #1
 8009518:	68e3      	ldr	r3, [r4, #12]
 800951a:	9903      	ldr	r1, [sp, #12]
 800951c:	1a5b      	subs	r3, r3, r1
 800951e:	42ab      	cmp	r3, r5
 8009520:	dcf2      	bgt.n	8009508 <_printf_i+0x210>
 8009522:	e7eb      	b.n	80094fc <_printf_i+0x204>
 8009524:	2500      	movs	r5, #0
 8009526:	f104 0619 	add.w	r6, r4, #25
 800952a:	e7f5      	b.n	8009518 <_printf_i+0x220>
 800952c:	0800bb7e 	.word	0x0800bb7e
 8009530:	0800bb8f 	.word	0x0800bb8f

08009534 <std>:
 8009534:	2300      	movs	r3, #0
 8009536:	b510      	push	{r4, lr}
 8009538:	4604      	mov	r4, r0
 800953a:	e9c0 3300 	strd	r3, r3, [r0]
 800953e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009542:	6083      	str	r3, [r0, #8]
 8009544:	8181      	strh	r1, [r0, #12]
 8009546:	6643      	str	r3, [r0, #100]	@ 0x64
 8009548:	81c2      	strh	r2, [r0, #14]
 800954a:	6183      	str	r3, [r0, #24]
 800954c:	4619      	mov	r1, r3
 800954e:	2208      	movs	r2, #8
 8009550:	305c      	adds	r0, #92	@ 0x5c
 8009552:	f000 f916 	bl	8009782 <memset>
 8009556:	4b0d      	ldr	r3, [pc, #52]	@ (800958c <std+0x58>)
 8009558:	6263      	str	r3, [r4, #36]	@ 0x24
 800955a:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <std+0x5c>)
 800955c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800955e:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <std+0x60>)
 8009560:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009562:	4b0d      	ldr	r3, [pc, #52]	@ (8009598 <std+0x64>)
 8009564:	6323      	str	r3, [r4, #48]	@ 0x30
 8009566:	4b0d      	ldr	r3, [pc, #52]	@ (800959c <std+0x68>)
 8009568:	6224      	str	r4, [r4, #32]
 800956a:	429c      	cmp	r4, r3
 800956c:	d006      	beq.n	800957c <std+0x48>
 800956e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009572:	4294      	cmp	r4, r2
 8009574:	d002      	beq.n	800957c <std+0x48>
 8009576:	33d0      	adds	r3, #208	@ 0xd0
 8009578:	429c      	cmp	r4, r3
 800957a:	d105      	bne.n	8009588 <std+0x54>
 800957c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009584:	f000 b97a 	b.w	800987c <__retarget_lock_init_recursive>
 8009588:	bd10      	pop	{r4, pc}
 800958a:	bf00      	nop
 800958c:	080096fd 	.word	0x080096fd
 8009590:	0800971f 	.word	0x0800971f
 8009594:	08009757 	.word	0x08009757
 8009598:	0800977b 	.word	0x0800977b
 800959c:	20040430 	.word	0x20040430

080095a0 <stdio_exit_handler>:
 80095a0:	4a02      	ldr	r2, [pc, #8]	@ (80095ac <stdio_exit_handler+0xc>)
 80095a2:	4903      	ldr	r1, [pc, #12]	@ (80095b0 <stdio_exit_handler+0x10>)
 80095a4:	4803      	ldr	r0, [pc, #12]	@ (80095b4 <stdio_exit_handler+0x14>)
 80095a6:	f000 b869 	b.w	800967c <_fwalk_sglue>
 80095aa:	bf00      	nop
 80095ac:	2004000c 	.word	0x2004000c
 80095b0:	0800b1e5 	.word	0x0800b1e5
 80095b4:	2004001c 	.word	0x2004001c

080095b8 <cleanup_stdio>:
 80095b8:	6841      	ldr	r1, [r0, #4]
 80095ba:	4b0c      	ldr	r3, [pc, #48]	@ (80095ec <cleanup_stdio+0x34>)
 80095bc:	4299      	cmp	r1, r3
 80095be:	b510      	push	{r4, lr}
 80095c0:	4604      	mov	r4, r0
 80095c2:	d001      	beq.n	80095c8 <cleanup_stdio+0x10>
 80095c4:	f001 fe0e 	bl	800b1e4 <_fflush_r>
 80095c8:	68a1      	ldr	r1, [r4, #8]
 80095ca:	4b09      	ldr	r3, [pc, #36]	@ (80095f0 <cleanup_stdio+0x38>)
 80095cc:	4299      	cmp	r1, r3
 80095ce:	d002      	beq.n	80095d6 <cleanup_stdio+0x1e>
 80095d0:	4620      	mov	r0, r4
 80095d2:	f001 fe07 	bl	800b1e4 <_fflush_r>
 80095d6:	68e1      	ldr	r1, [r4, #12]
 80095d8:	4b06      	ldr	r3, [pc, #24]	@ (80095f4 <cleanup_stdio+0x3c>)
 80095da:	4299      	cmp	r1, r3
 80095dc:	d004      	beq.n	80095e8 <cleanup_stdio+0x30>
 80095de:	4620      	mov	r0, r4
 80095e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e4:	f001 bdfe 	b.w	800b1e4 <_fflush_r>
 80095e8:	bd10      	pop	{r4, pc}
 80095ea:	bf00      	nop
 80095ec:	20040430 	.word	0x20040430
 80095f0:	20040498 	.word	0x20040498
 80095f4:	20040500 	.word	0x20040500

080095f8 <global_stdio_init.part.0>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009628 <global_stdio_init.part.0+0x30>)
 80095fc:	4c0b      	ldr	r4, [pc, #44]	@ (800962c <global_stdio_init.part.0+0x34>)
 80095fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009630 <global_stdio_init.part.0+0x38>)
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	4620      	mov	r0, r4
 8009604:	2200      	movs	r2, #0
 8009606:	2104      	movs	r1, #4
 8009608:	f7ff ff94 	bl	8009534 <std>
 800960c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009610:	2201      	movs	r2, #1
 8009612:	2109      	movs	r1, #9
 8009614:	f7ff ff8e 	bl	8009534 <std>
 8009618:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800961c:	2202      	movs	r2, #2
 800961e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009622:	2112      	movs	r1, #18
 8009624:	f7ff bf86 	b.w	8009534 <std>
 8009628:	20040568 	.word	0x20040568
 800962c:	20040430 	.word	0x20040430
 8009630:	080095a1 	.word	0x080095a1

08009634 <__sfp_lock_acquire>:
 8009634:	4801      	ldr	r0, [pc, #4]	@ (800963c <__sfp_lock_acquire+0x8>)
 8009636:	f000 b922 	b.w	800987e <__retarget_lock_acquire_recursive>
 800963a:	bf00      	nop
 800963c:	20040571 	.word	0x20040571

08009640 <__sfp_lock_release>:
 8009640:	4801      	ldr	r0, [pc, #4]	@ (8009648 <__sfp_lock_release+0x8>)
 8009642:	f000 b91d 	b.w	8009880 <__retarget_lock_release_recursive>
 8009646:	bf00      	nop
 8009648:	20040571 	.word	0x20040571

0800964c <__sinit>:
 800964c:	b510      	push	{r4, lr}
 800964e:	4604      	mov	r4, r0
 8009650:	f7ff fff0 	bl	8009634 <__sfp_lock_acquire>
 8009654:	6a23      	ldr	r3, [r4, #32]
 8009656:	b11b      	cbz	r3, 8009660 <__sinit+0x14>
 8009658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800965c:	f7ff bff0 	b.w	8009640 <__sfp_lock_release>
 8009660:	4b04      	ldr	r3, [pc, #16]	@ (8009674 <__sinit+0x28>)
 8009662:	6223      	str	r3, [r4, #32]
 8009664:	4b04      	ldr	r3, [pc, #16]	@ (8009678 <__sinit+0x2c>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1f5      	bne.n	8009658 <__sinit+0xc>
 800966c:	f7ff ffc4 	bl	80095f8 <global_stdio_init.part.0>
 8009670:	e7f2      	b.n	8009658 <__sinit+0xc>
 8009672:	bf00      	nop
 8009674:	080095b9 	.word	0x080095b9
 8009678:	20040568 	.word	0x20040568

0800967c <_fwalk_sglue>:
 800967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009680:	4607      	mov	r7, r0
 8009682:	4688      	mov	r8, r1
 8009684:	4614      	mov	r4, r2
 8009686:	2600      	movs	r6, #0
 8009688:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800968c:	f1b9 0901 	subs.w	r9, r9, #1
 8009690:	d505      	bpl.n	800969e <_fwalk_sglue+0x22>
 8009692:	6824      	ldr	r4, [r4, #0]
 8009694:	2c00      	cmp	r4, #0
 8009696:	d1f7      	bne.n	8009688 <_fwalk_sglue+0xc>
 8009698:	4630      	mov	r0, r6
 800969a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800969e:	89ab      	ldrh	r3, [r5, #12]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d907      	bls.n	80096b4 <_fwalk_sglue+0x38>
 80096a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096a8:	3301      	adds	r3, #1
 80096aa:	d003      	beq.n	80096b4 <_fwalk_sglue+0x38>
 80096ac:	4629      	mov	r1, r5
 80096ae:	4638      	mov	r0, r7
 80096b0:	47c0      	blx	r8
 80096b2:	4306      	orrs	r6, r0
 80096b4:	3568      	adds	r5, #104	@ 0x68
 80096b6:	e7e9      	b.n	800968c <_fwalk_sglue+0x10>

080096b8 <siprintf>:
 80096b8:	b40e      	push	{r1, r2, r3}
 80096ba:	b510      	push	{r4, lr}
 80096bc:	b09d      	sub	sp, #116	@ 0x74
 80096be:	ab1f      	add	r3, sp, #124	@ 0x7c
 80096c0:	9002      	str	r0, [sp, #8]
 80096c2:	9006      	str	r0, [sp, #24]
 80096c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096c8:	480a      	ldr	r0, [pc, #40]	@ (80096f4 <siprintf+0x3c>)
 80096ca:	9107      	str	r1, [sp, #28]
 80096cc:	9104      	str	r1, [sp, #16]
 80096ce:	490a      	ldr	r1, [pc, #40]	@ (80096f8 <siprintf+0x40>)
 80096d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d4:	9105      	str	r1, [sp, #20]
 80096d6:	2400      	movs	r4, #0
 80096d8:	a902      	add	r1, sp, #8
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80096e0:	f001 fc00 	bl	800aee4 <_svfiprintf_r>
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	701c      	strb	r4, [r3, #0]
 80096e8:	b01d      	add	sp, #116	@ 0x74
 80096ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ee:	b003      	add	sp, #12
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20040018 	.word	0x20040018
 80096f8:	ffff0208 	.word	0xffff0208

080096fc <__sread>:
 80096fc:	b510      	push	{r4, lr}
 80096fe:	460c      	mov	r4, r1
 8009700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009704:	f000 f86c 	bl	80097e0 <_read_r>
 8009708:	2800      	cmp	r0, #0
 800970a:	bfab      	itete	ge
 800970c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800970e:	89a3      	ldrhlt	r3, [r4, #12]
 8009710:	181b      	addge	r3, r3, r0
 8009712:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009716:	bfac      	ite	ge
 8009718:	6563      	strge	r3, [r4, #84]	@ 0x54
 800971a:	81a3      	strhlt	r3, [r4, #12]
 800971c:	bd10      	pop	{r4, pc}

0800971e <__swrite>:
 800971e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009722:	461f      	mov	r7, r3
 8009724:	898b      	ldrh	r3, [r1, #12]
 8009726:	05db      	lsls	r3, r3, #23
 8009728:	4605      	mov	r5, r0
 800972a:	460c      	mov	r4, r1
 800972c:	4616      	mov	r6, r2
 800972e:	d505      	bpl.n	800973c <__swrite+0x1e>
 8009730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009734:	2302      	movs	r3, #2
 8009736:	2200      	movs	r2, #0
 8009738:	f000 f840 	bl	80097bc <_lseek_r>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009742:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	4632      	mov	r2, r6
 800974a:	463b      	mov	r3, r7
 800974c:	4628      	mov	r0, r5
 800974e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009752:	f000 b857 	b.w	8009804 <_write_r>

08009756 <__sseek>:
 8009756:	b510      	push	{r4, lr}
 8009758:	460c      	mov	r4, r1
 800975a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975e:	f000 f82d 	bl	80097bc <_lseek_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	bf15      	itete	ne
 8009768:	6560      	strne	r0, [r4, #84]	@ 0x54
 800976a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800976e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009772:	81a3      	strheq	r3, [r4, #12]
 8009774:	bf18      	it	ne
 8009776:	81a3      	strhne	r3, [r4, #12]
 8009778:	bd10      	pop	{r4, pc}

0800977a <__sclose>:
 800977a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977e:	f000 b80d 	b.w	800979c <_close_r>

08009782 <memset>:
 8009782:	4402      	add	r2, r0
 8009784:	4603      	mov	r3, r0
 8009786:	4293      	cmp	r3, r2
 8009788:	d100      	bne.n	800978c <memset+0xa>
 800978a:	4770      	bx	lr
 800978c:	f803 1b01 	strb.w	r1, [r3], #1
 8009790:	e7f9      	b.n	8009786 <memset+0x4>
	...

08009794 <_localeconv_r>:
 8009794:	4800      	ldr	r0, [pc, #0]	@ (8009798 <_localeconv_r+0x4>)
 8009796:	4770      	bx	lr
 8009798:	20040158 	.word	0x20040158

0800979c <_close_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d06      	ldr	r5, [pc, #24]	@ (80097b8 <_close_r+0x1c>)
 80097a0:	2300      	movs	r3, #0
 80097a2:	4604      	mov	r4, r0
 80097a4:	4608      	mov	r0, r1
 80097a6:	602b      	str	r3, [r5, #0]
 80097a8:	f7f9 ffc1 	bl	800372e <_close>
 80097ac:	1c43      	adds	r3, r0, #1
 80097ae:	d102      	bne.n	80097b6 <_close_r+0x1a>
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	b103      	cbz	r3, 80097b6 <_close_r+0x1a>
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	bd38      	pop	{r3, r4, r5, pc}
 80097b8:	2004056c 	.word	0x2004056c

080097bc <_lseek_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4d07      	ldr	r5, [pc, #28]	@ (80097dc <_lseek_r+0x20>)
 80097c0:	4604      	mov	r4, r0
 80097c2:	4608      	mov	r0, r1
 80097c4:	4611      	mov	r1, r2
 80097c6:	2200      	movs	r2, #0
 80097c8:	602a      	str	r2, [r5, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	f7f9 ffd6 	bl	800377c <_lseek>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_lseek_r+0x1e>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_lseek_r+0x1e>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	2004056c 	.word	0x2004056c

080097e0 <_read_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d07      	ldr	r5, [pc, #28]	@ (8009800 <_read_r+0x20>)
 80097e4:	4604      	mov	r4, r0
 80097e6:	4608      	mov	r0, r1
 80097e8:	4611      	mov	r1, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	602a      	str	r2, [r5, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	f7f9 ff64 	bl	80036bc <_read>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_read_r+0x1e>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_read_r+0x1e>
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	2004056c 	.word	0x2004056c

08009804 <_write_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4d07      	ldr	r5, [pc, #28]	@ (8009824 <_write_r+0x20>)
 8009808:	4604      	mov	r4, r0
 800980a:	4608      	mov	r0, r1
 800980c:	4611      	mov	r1, r2
 800980e:	2200      	movs	r2, #0
 8009810:	602a      	str	r2, [r5, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	f7f9 ff6f 	bl	80036f6 <_write>
 8009818:	1c43      	adds	r3, r0, #1
 800981a:	d102      	bne.n	8009822 <_write_r+0x1e>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	b103      	cbz	r3, 8009822 <_write_r+0x1e>
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	bd38      	pop	{r3, r4, r5, pc}
 8009824:	2004056c 	.word	0x2004056c

08009828 <__errno>:
 8009828:	4b01      	ldr	r3, [pc, #4]	@ (8009830 <__errno+0x8>)
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	20040018 	.word	0x20040018

08009834 <__libc_init_array>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	4d0d      	ldr	r5, [pc, #52]	@ (800986c <__libc_init_array+0x38>)
 8009838:	4c0d      	ldr	r4, [pc, #52]	@ (8009870 <__libc_init_array+0x3c>)
 800983a:	1b64      	subs	r4, r4, r5
 800983c:	10a4      	asrs	r4, r4, #2
 800983e:	2600      	movs	r6, #0
 8009840:	42a6      	cmp	r6, r4
 8009842:	d109      	bne.n	8009858 <__libc_init_array+0x24>
 8009844:	4d0b      	ldr	r5, [pc, #44]	@ (8009874 <__libc_init_array+0x40>)
 8009846:	4c0c      	ldr	r4, [pc, #48]	@ (8009878 <__libc_init_array+0x44>)
 8009848:	f002 f86a 	bl	800b920 <_init>
 800984c:	1b64      	subs	r4, r4, r5
 800984e:	10a4      	asrs	r4, r4, #2
 8009850:	2600      	movs	r6, #0
 8009852:	42a6      	cmp	r6, r4
 8009854:	d105      	bne.n	8009862 <__libc_init_array+0x2e>
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	f855 3b04 	ldr.w	r3, [r5], #4
 800985c:	4798      	blx	r3
 800985e:	3601      	adds	r6, #1
 8009860:	e7ee      	b.n	8009840 <__libc_init_array+0xc>
 8009862:	f855 3b04 	ldr.w	r3, [r5], #4
 8009866:	4798      	blx	r3
 8009868:	3601      	adds	r6, #1
 800986a:	e7f2      	b.n	8009852 <__libc_init_array+0x1e>
 800986c:	0800beec 	.word	0x0800beec
 8009870:	0800beec 	.word	0x0800beec
 8009874:	0800beec 	.word	0x0800beec
 8009878:	0800bef0 	.word	0x0800bef0

0800987c <__retarget_lock_init_recursive>:
 800987c:	4770      	bx	lr

0800987e <__retarget_lock_acquire_recursive>:
 800987e:	4770      	bx	lr

08009880 <__retarget_lock_release_recursive>:
 8009880:	4770      	bx	lr

08009882 <quorem>:
 8009882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009886:	6903      	ldr	r3, [r0, #16]
 8009888:	690c      	ldr	r4, [r1, #16]
 800988a:	42a3      	cmp	r3, r4
 800988c:	4607      	mov	r7, r0
 800988e:	db7e      	blt.n	800998e <quorem+0x10c>
 8009890:	3c01      	subs	r4, #1
 8009892:	f101 0814 	add.w	r8, r1, #20
 8009896:	00a3      	lsls	r3, r4, #2
 8009898:	f100 0514 	add.w	r5, r0, #20
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098ac:	3301      	adds	r3, #1
 80098ae:	429a      	cmp	r2, r3
 80098b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80098b8:	d32e      	bcc.n	8009918 <quorem+0x96>
 80098ba:	f04f 0a00 	mov.w	sl, #0
 80098be:	46c4      	mov	ip, r8
 80098c0:	46ae      	mov	lr, r5
 80098c2:	46d3      	mov	fp, sl
 80098c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098c8:	b298      	uxth	r0, r3
 80098ca:	fb06 a000 	mla	r0, r6, r0, sl
 80098ce:	0c02      	lsrs	r2, r0, #16
 80098d0:	0c1b      	lsrs	r3, r3, #16
 80098d2:	fb06 2303 	mla	r3, r6, r3, r2
 80098d6:	f8de 2000 	ldr.w	r2, [lr]
 80098da:	b280      	uxth	r0, r0
 80098dc:	b292      	uxth	r2, r2
 80098de:	1a12      	subs	r2, r2, r0
 80098e0:	445a      	add	r2, fp
 80098e2:	f8de 0000 	ldr.w	r0, [lr]
 80098e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80098f4:	b292      	uxth	r2, r2
 80098f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80098fa:	45e1      	cmp	r9, ip
 80098fc:	f84e 2b04 	str.w	r2, [lr], #4
 8009900:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009904:	d2de      	bcs.n	80098c4 <quorem+0x42>
 8009906:	9b00      	ldr	r3, [sp, #0]
 8009908:	58eb      	ldr	r3, [r5, r3]
 800990a:	b92b      	cbnz	r3, 8009918 <quorem+0x96>
 800990c:	9b01      	ldr	r3, [sp, #4]
 800990e:	3b04      	subs	r3, #4
 8009910:	429d      	cmp	r5, r3
 8009912:	461a      	mov	r2, r3
 8009914:	d32f      	bcc.n	8009976 <quorem+0xf4>
 8009916:	613c      	str	r4, [r7, #16]
 8009918:	4638      	mov	r0, r7
 800991a:	f001 f97f 	bl	800ac1c <__mcmp>
 800991e:	2800      	cmp	r0, #0
 8009920:	db25      	blt.n	800996e <quorem+0xec>
 8009922:	4629      	mov	r1, r5
 8009924:	2000      	movs	r0, #0
 8009926:	f858 2b04 	ldr.w	r2, [r8], #4
 800992a:	f8d1 c000 	ldr.w	ip, [r1]
 800992e:	fa1f fe82 	uxth.w	lr, r2
 8009932:	fa1f f38c 	uxth.w	r3, ip
 8009936:	eba3 030e 	sub.w	r3, r3, lr
 800993a:	4403      	add	r3, r0
 800993c:	0c12      	lsrs	r2, r2, #16
 800993e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009942:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800994c:	45c1      	cmp	r9, r8
 800994e:	f841 3b04 	str.w	r3, [r1], #4
 8009952:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009956:	d2e6      	bcs.n	8009926 <quorem+0xa4>
 8009958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800995c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009960:	b922      	cbnz	r2, 800996c <quorem+0xea>
 8009962:	3b04      	subs	r3, #4
 8009964:	429d      	cmp	r5, r3
 8009966:	461a      	mov	r2, r3
 8009968:	d30b      	bcc.n	8009982 <quorem+0x100>
 800996a:	613c      	str	r4, [r7, #16]
 800996c:	3601      	adds	r6, #1
 800996e:	4630      	mov	r0, r6
 8009970:	b003      	add	sp, #12
 8009972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009976:	6812      	ldr	r2, [r2, #0]
 8009978:	3b04      	subs	r3, #4
 800997a:	2a00      	cmp	r2, #0
 800997c:	d1cb      	bne.n	8009916 <quorem+0x94>
 800997e:	3c01      	subs	r4, #1
 8009980:	e7c6      	b.n	8009910 <quorem+0x8e>
 8009982:	6812      	ldr	r2, [r2, #0]
 8009984:	3b04      	subs	r3, #4
 8009986:	2a00      	cmp	r2, #0
 8009988:	d1ef      	bne.n	800996a <quorem+0xe8>
 800998a:	3c01      	subs	r4, #1
 800998c:	e7ea      	b.n	8009964 <quorem+0xe2>
 800998e:	2000      	movs	r0, #0
 8009990:	e7ee      	b.n	8009970 <quorem+0xee>
 8009992:	0000      	movs	r0, r0
 8009994:	0000      	movs	r0, r0
	...

08009998 <_dtoa_r>:
 8009998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	69c7      	ldr	r7, [r0, #28]
 800999e:	b097      	sub	sp, #92	@ 0x5c
 80099a0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80099a4:	ec55 4b10 	vmov	r4, r5, d0
 80099a8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80099aa:	9107      	str	r1, [sp, #28]
 80099ac:	4681      	mov	r9, r0
 80099ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80099b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80099b2:	b97f      	cbnz	r7, 80099d4 <_dtoa_r+0x3c>
 80099b4:	2010      	movs	r0, #16
 80099b6:	f000 fe09 	bl	800a5cc <malloc>
 80099ba:	4602      	mov	r2, r0
 80099bc:	f8c9 001c 	str.w	r0, [r9, #28]
 80099c0:	b920      	cbnz	r0, 80099cc <_dtoa_r+0x34>
 80099c2:	4ba9      	ldr	r3, [pc, #676]	@ (8009c68 <_dtoa_r+0x2d0>)
 80099c4:	21ef      	movs	r1, #239	@ 0xef
 80099c6:	48a9      	ldr	r0, [pc, #676]	@ (8009c6c <_dtoa_r+0x2d4>)
 80099c8:	f001 fc6c 	bl	800b2a4 <__assert_func>
 80099cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099d0:	6007      	str	r7, [r0, #0]
 80099d2:	60c7      	str	r7, [r0, #12]
 80099d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099d8:	6819      	ldr	r1, [r3, #0]
 80099da:	b159      	cbz	r1, 80099f4 <_dtoa_r+0x5c>
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	604a      	str	r2, [r1, #4]
 80099e0:	2301      	movs	r3, #1
 80099e2:	4093      	lsls	r3, r2
 80099e4:	608b      	str	r3, [r1, #8]
 80099e6:	4648      	mov	r0, r9
 80099e8:	f000 fee6 	bl	800a7b8 <_Bfree>
 80099ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099f0:	2200      	movs	r2, #0
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	1e2b      	subs	r3, r5, #0
 80099f6:	bfb9      	ittee	lt
 80099f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80099fc:	9305      	strlt	r3, [sp, #20]
 80099fe:	2300      	movge	r3, #0
 8009a00:	6033      	strge	r3, [r6, #0]
 8009a02:	9f05      	ldr	r7, [sp, #20]
 8009a04:	4b9a      	ldr	r3, [pc, #616]	@ (8009c70 <_dtoa_r+0x2d8>)
 8009a06:	bfbc      	itt	lt
 8009a08:	2201      	movlt	r2, #1
 8009a0a:	6032      	strlt	r2, [r6, #0]
 8009a0c:	43bb      	bics	r3, r7
 8009a0e:	d112      	bne.n	8009a36 <_dtoa_r+0x9e>
 8009a10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009a12:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a16:	6013      	str	r3, [r2, #0]
 8009a18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a1c:	4323      	orrs	r3, r4
 8009a1e:	f000 855a 	beq.w	800a4d6 <_dtoa_r+0xb3e>
 8009a22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a24:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009c84 <_dtoa_r+0x2ec>
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 855c 	beq.w	800a4e6 <_dtoa_r+0xb4e>
 8009a2e:	f10a 0303 	add.w	r3, sl, #3
 8009a32:	f000 bd56 	b.w	800a4e2 <_dtoa_r+0xb4a>
 8009a36:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	ec51 0b17 	vmov	r0, r1, d7
 8009a40:	2300      	movs	r3, #0
 8009a42:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009a46:	f7f7 f857 	bl	8000af8 <__aeabi_dcmpeq>
 8009a4a:	4680      	mov	r8, r0
 8009a4c:	b158      	cbz	r0, 8009a66 <_dtoa_r+0xce>
 8009a4e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009a50:	2301      	movs	r3, #1
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a56:	b113      	cbz	r3, 8009a5e <_dtoa_r+0xc6>
 8009a58:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009a5a:	4b86      	ldr	r3, [pc, #536]	@ (8009c74 <_dtoa_r+0x2dc>)
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009c88 <_dtoa_r+0x2f0>
 8009a62:	f000 bd40 	b.w	800a4e6 <_dtoa_r+0xb4e>
 8009a66:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009a6a:	aa14      	add	r2, sp, #80	@ 0x50
 8009a6c:	a915      	add	r1, sp, #84	@ 0x54
 8009a6e:	4648      	mov	r0, r9
 8009a70:	f001 f984 	bl	800ad7c <__d2b>
 8009a74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a78:	9002      	str	r0, [sp, #8]
 8009a7a:	2e00      	cmp	r6, #0
 8009a7c:	d078      	beq.n	8009b70 <_dtoa_r+0x1d8>
 8009a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a80:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a98:	4619      	mov	r1, r3
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4b76      	ldr	r3, [pc, #472]	@ (8009c78 <_dtoa_r+0x2e0>)
 8009a9e:	f7f6 fc0b 	bl	80002b8 <__aeabi_dsub>
 8009aa2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009c50 <_dtoa_r+0x2b8>)
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	f7f6 fdbe 	bl	8000628 <__aeabi_dmul>
 8009aac:	a36a      	add	r3, pc, #424	@ (adr r3, 8009c58 <_dtoa_r+0x2c0>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fc03 	bl	80002bc <__adddf3>
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4630      	mov	r0, r6
 8009aba:	460d      	mov	r5, r1
 8009abc:	f7f6 fd4a 	bl	8000554 <__aeabi_i2d>
 8009ac0:	a367      	add	r3, pc, #412	@ (adr r3, 8009c60 <_dtoa_r+0x2c8>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fdaf 	bl	8000628 <__aeabi_dmul>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	f7f6 fbf3 	bl	80002bc <__adddf3>
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	460d      	mov	r5, r1
 8009ada:	f7f7 f855 	bl	8000b88 <__aeabi_d2iz>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f7f7 f810 	bl	8000b0c <__aeabi_dcmplt>
 8009aec:	b140      	cbz	r0, 8009b00 <_dtoa_r+0x168>
 8009aee:	4638      	mov	r0, r7
 8009af0:	f7f6 fd30 	bl	8000554 <__aeabi_i2d>
 8009af4:	4622      	mov	r2, r4
 8009af6:	462b      	mov	r3, r5
 8009af8:	f7f6 fffe 	bl	8000af8 <__aeabi_dcmpeq>
 8009afc:	b900      	cbnz	r0, 8009b00 <_dtoa_r+0x168>
 8009afe:	3f01      	subs	r7, #1
 8009b00:	2f16      	cmp	r7, #22
 8009b02:	d852      	bhi.n	8009baa <_dtoa_r+0x212>
 8009b04:	4b5d      	ldr	r3, [pc, #372]	@ (8009c7c <_dtoa_r+0x2e4>)
 8009b06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b12:	f7f6 fffb 	bl	8000b0c <__aeabi_dcmplt>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d049      	beq.n	8009bae <_dtoa_r+0x216>
 8009b1a:	3f01      	subs	r7, #1
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b22:	1b9b      	subs	r3, r3, r6
 8009b24:	1e5a      	subs	r2, r3, #1
 8009b26:	bf45      	ittet	mi
 8009b28:	f1c3 0301 	rsbmi	r3, r3, #1
 8009b2c:	9300      	strmi	r3, [sp, #0]
 8009b2e:	2300      	movpl	r3, #0
 8009b30:	2300      	movmi	r3, #0
 8009b32:	9206      	str	r2, [sp, #24]
 8009b34:	bf54      	ite	pl
 8009b36:	9300      	strpl	r3, [sp, #0]
 8009b38:	9306      	strmi	r3, [sp, #24]
 8009b3a:	2f00      	cmp	r7, #0
 8009b3c:	db39      	blt.n	8009bb2 <_dtoa_r+0x21a>
 8009b3e:	9b06      	ldr	r3, [sp, #24]
 8009b40:	970d      	str	r7, [sp, #52]	@ 0x34
 8009b42:	443b      	add	r3, r7
 8009b44:	9306      	str	r3, [sp, #24]
 8009b46:	2300      	movs	r3, #0
 8009b48:	9308      	str	r3, [sp, #32]
 8009b4a:	9b07      	ldr	r3, [sp, #28]
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	d863      	bhi.n	8009c18 <_dtoa_r+0x280>
 8009b50:	2b05      	cmp	r3, #5
 8009b52:	bfc4      	itt	gt
 8009b54:	3b04      	subgt	r3, #4
 8009b56:	9307      	strgt	r3, [sp, #28]
 8009b58:	9b07      	ldr	r3, [sp, #28]
 8009b5a:	f1a3 0302 	sub.w	r3, r3, #2
 8009b5e:	bfcc      	ite	gt
 8009b60:	2400      	movgt	r4, #0
 8009b62:	2401      	movle	r4, #1
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d863      	bhi.n	8009c30 <_dtoa_r+0x298>
 8009b68:	e8df f003 	tbb	[pc, r3]
 8009b6c:	2b375452 	.word	0x2b375452
 8009b70:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009b74:	441e      	add	r6, r3
 8009b76:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	bfc1      	itttt	gt
 8009b7e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b82:	409f      	lslgt	r7, r3
 8009b84:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b88:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b8c:	bfd6      	itet	le
 8009b8e:	f1c3 0320 	rsble	r3, r3, #32
 8009b92:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b96:	fa04 f003 	lslle.w	r0, r4, r3
 8009b9a:	f7f6 fccb 	bl	8000534 <__aeabi_ui2d>
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ba4:	3e01      	subs	r6, #1
 8009ba6:	9212      	str	r2, [sp, #72]	@ 0x48
 8009ba8:	e776      	b.n	8009a98 <_dtoa_r+0x100>
 8009baa:	2301      	movs	r3, #1
 8009bac:	e7b7      	b.n	8009b1e <_dtoa_r+0x186>
 8009bae:	9010      	str	r0, [sp, #64]	@ 0x40
 8009bb0:	e7b6      	b.n	8009b20 <_dtoa_r+0x188>
 8009bb2:	9b00      	ldr	r3, [sp, #0]
 8009bb4:	1bdb      	subs	r3, r3, r7
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	427b      	negs	r3, r7
 8009bba:	9308      	str	r3, [sp, #32]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009bc0:	e7c3      	b.n	8009b4a <_dtoa_r+0x1b2>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bc8:	eb07 0b03 	add.w	fp, r7, r3
 8009bcc:	f10b 0301 	add.w	r3, fp, #1
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	9303      	str	r3, [sp, #12]
 8009bd4:	bfb8      	it	lt
 8009bd6:	2301      	movlt	r3, #1
 8009bd8:	e006      	b.n	8009be8 <_dtoa_r+0x250>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	dd28      	ble.n	8009c36 <_dtoa_r+0x29e>
 8009be4:	469b      	mov	fp, r3
 8009be6:	9303      	str	r3, [sp, #12]
 8009be8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009bec:	2100      	movs	r1, #0
 8009bee:	2204      	movs	r2, #4
 8009bf0:	f102 0514 	add.w	r5, r2, #20
 8009bf4:	429d      	cmp	r5, r3
 8009bf6:	d926      	bls.n	8009c46 <_dtoa_r+0x2ae>
 8009bf8:	6041      	str	r1, [r0, #4]
 8009bfa:	4648      	mov	r0, r9
 8009bfc:	f000 fd9c 	bl	800a738 <_Balloc>
 8009c00:	4682      	mov	sl, r0
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d142      	bne.n	8009c8c <_dtoa_r+0x2f4>
 8009c06:	4b1e      	ldr	r3, [pc, #120]	@ (8009c80 <_dtoa_r+0x2e8>)
 8009c08:	4602      	mov	r2, r0
 8009c0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c0e:	e6da      	b.n	80099c6 <_dtoa_r+0x2e>
 8009c10:	2300      	movs	r3, #0
 8009c12:	e7e3      	b.n	8009bdc <_dtoa_r+0x244>
 8009c14:	2300      	movs	r3, #0
 8009c16:	e7d5      	b.n	8009bc4 <_dtoa_r+0x22c>
 8009c18:	2401      	movs	r4, #1
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9307      	str	r3, [sp, #28]
 8009c1e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009c20:	f04f 3bff 	mov.w	fp, #4294967295
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8cd b00c 	str.w	fp, [sp, #12]
 8009c2a:	2312      	movs	r3, #18
 8009c2c:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c2e:	e7db      	b.n	8009be8 <_dtoa_r+0x250>
 8009c30:	2301      	movs	r3, #1
 8009c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c34:	e7f4      	b.n	8009c20 <_dtoa_r+0x288>
 8009c36:	f04f 0b01 	mov.w	fp, #1
 8009c3a:	f8cd b00c 	str.w	fp, [sp, #12]
 8009c3e:	465b      	mov	r3, fp
 8009c40:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009c44:	e7d0      	b.n	8009be8 <_dtoa_r+0x250>
 8009c46:	3101      	adds	r1, #1
 8009c48:	0052      	lsls	r2, r2, #1
 8009c4a:	e7d1      	b.n	8009bf0 <_dtoa_r+0x258>
 8009c4c:	f3af 8000 	nop.w
 8009c50:	636f4361 	.word	0x636f4361
 8009c54:	3fd287a7 	.word	0x3fd287a7
 8009c58:	8b60c8b3 	.word	0x8b60c8b3
 8009c5c:	3fc68a28 	.word	0x3fc68a28
 8009c60:	509f79fb 	.word	0x509f79fb
 8009c64:	3fd34413 	.word	0x3fd34413
 8009c68:	0800bbad 	.word	0x0800bbad
 8009c6c:	0800bbc4 	.word	0x0800bbc4
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	0800bb7d 	.word	0x0800bb7d
 8009c78:	3ff80000 	.word	0x3ff80000
 8009c7c:	0800bd18 	.word	0x0800bd18
 8009c80:	0800bc1c 	.word	0x0800bc1c
 8009c84:	0800bba9 	.word	0x0800bba9
 8009c88:	0800bb7c 	.word	0x0800bb7c
 8009c8c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009c90:	6018      	str	r0, [r3, #0]
 8009c92:	9b03      	ldr	r3, [sp, #12]
 8009c94:	2b0e      	cmp	r3, #14
 8009c96:	f200 80a1 	bhi.w	8009ddc <_dtoa_r+0x444>
 8009c9a:	2c00      	cmp	r4, #0
 8009c9c:	f000 809e 	beq.w	8009ddc <_dtoa_r+0x444>
 8009ca0:	2f00      	cmp	r7, #0
 8009ca2:	dd33      	ble.n	8009d0c <_dtoa_r+0x374>
 8009ca4:	4b9c      	ldr	r3, [pc, #624]	@ (8009f18 <_dtoa_r+0x580>)
 8009ca6:	f007 020f 	and.w	r2, r7, #15
 8009caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cae:	ed93 7b00 	vldr	d7, [r3]
 8009cb2:	05f8      	lsls	r0, r7, #23
 8009cb4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009cb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009cbc:	d516      	bpl.n	8009cec <_dtoa_r+0x354>
 8009cbe:	4b97      	ldr	r3, [pc, #604]	@ (8009f1c <_dtoa_r+0x584>)
 8009cc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009cc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cc8:	f7f6 fdd8 	bl	800087c <__aeabi_ddiv>
 8009ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cd0:	f004 040f 	and.w	r4, r4, #15
 8009cd4:	2603      	movs	r6, #3
 8009cd6:	4d91      	ldr	r5, [pc, #580]	@ (8009f1c <_dtoa_r+0x584>)
 8009cd8:	b954      	cbnz	r4, 8009cf0 <_dtoa_r+0x358>
 8009cda:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009cde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ce2:	f7f6 fdcb 	bl	800087c <__aeabi_ddiv>
 8009ce6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cea:	e028      	b.n	8009d3e <_dtoa_r+0x3a6>
 8009cec:	2602      	movs	r6, #2
 8009cee:	e7f2      	b.n	8009cd6 <_dtoa_r+0x33e>
 8009cf0:	07e1      	lsls	r1, r4, #31
 8009cf2:	d508      	bpl.n	8009d06 <_dtoa_r+0x36e>
 8009cf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009cf8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cfc:	f7f6 fc94 	bl	8000628 <__aeabi_dmul>
 8009d00:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d04:	3601      	adds	r6, #1
 8009d06:	1064      	asrs	r4, r4, #1
 8009d08:	3508      	adds	r5, #8
 8009d0a:	e7e5      	b.n	8009cd8 <_dtoa_r+0x340>
 8009d0c:	f000 80af 	beq.w	8009e6e <_dtoa_r+0x4d6>
 8009d10:	427c      	negs	r4, r7
 8009d12:	4b81      	ldr	r3, [pc, #516]	@ (8009f18 <_dtoa_r+0x580>)
 8009d14:	4d81      	ldr	r5, [pc, #516]	@ (8009f1c <_dtoa_r+0x584>)
 8009d16:	f004 020f 	and.w	r2, r4, #15
 8009d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d26:	f7f6 fc7f 	bl	8000628 <__aeabi_dmul>
 8009d2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d2e:	1124      	asrs	r4, r4, #4
 8009d30:	2300      	movs	r3, #0
 8009d32:	2602      	movs	r6, #2
 8009d34:	2c00      	cmp	r4, #0
 8009d36:	f040 808f 	bne.w	8009e58 <_dtoa_r+0x4c0>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d1d3      	bne.n	8009ce6 <_dtoa_r+0x34e>
 8009d3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d40:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 8094 	beq.w	8009e72 <_dtoa_r+0x4da>
 8009d4a:	4b75      	ldr	r3, [pc, #468]	@ (8009f20 <_dtoa_r+0x588>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	4620      	mov	r0, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	f7f6 fedb 	bl	8000b0c <__aeabi_dcmplt>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f000 808b 	beq.w	8009e72 <_dtoa_r+0x4da>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8087 	beq.w	8009e72 <_dtoa_r+0x4da>
 8009d64:	f1bb 0f00 	cmp.w	fp, #0
 8009d68:	dd34      	ble.n	8009dd4 <_dtoa_r+0x43c>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	4b6d      	ldr	r3, [pc, #436]	@ (8009f24 <_dtoa_r+0x58c>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7f6 fc59 	bl	8000628 <__aeabi_dmul>
 8009d76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d7a:	f107 38ff 	add.w	r8, r7, #4294967295
 8009d7e:	3601      	adds	r6, #1
 8009d80:	465c      	mov	r4, fp
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7f6 fbe6 	bl	8000554 <__aeabi_i2d>
 8009d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d8c:	f7f6 fc4c 	bl	8000628 <__aeabi_dmul>
 8009d90:	4b65      	ldr	r3, [pc, #404]	@ (8009f28 <_dtoa_r+0x590>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	f7f6 fa92 	bl	80002bc <__adddf3>
 8009d98:	4605      	mov	r5, r0
 8009d9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d9e:	2c00      	cmp	r4, #0
 8009da0:	d16a      	bne.n	8009e78 <_dtoa_r+0x4e0>
 8009da2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009da6:	4b61      	ldr	r3, [pc, #388]	@ (8009f2c <_dtoa_r+0x594>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	f7f6 fa85 	bl	80002b8 <__aeabi_dsub>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009db6:	462a      	mov	r2, r5
 8009db8:	4633      	mov	r3, r6
 8009dba:	f7f6 fec5 	bl	8000b48 <__aeabi_dcmpgt>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f040 8298 	bne.w	800a2f4 <_dtoa_r+0x95c>
 8009dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dc8:	462a      	mov	r2, r5
 8009dca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009dce:	f7f6 fe9d 	bl	8000b0c <__aeabi_dcmplt>
 8009dd2:	bb38      	cbnz	r0, 8009e24 <_dtoa_r+0x48c>
 8009dd4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009dd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009ddc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f2c0 8157 	blt.w	800a092 <_dtoa_r+0x6fa>
 8009de4:	2f0e      	cmp	r7, #14
 8009de6:	f300 8154 	bgt.w	800a092 <_dtoa_r+0x6fa>
 8009dea:	4b4b      	ldr	r3, [pc, #300]	@ (8009f18 <_dtoa_r+0x580>)
 8009dec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009df0:	ed93 7b00 	vldr	d7, [r3]
 8009df4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	ed8d 7b00 	vstr	d7, [sp]
 8009dfc:	f280 80e5 	bge.w	8009fca <_dtoa_r+0x632>
 8009e00:	9b03      	ldr	r3, [sp, #12]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f300 80e1 	bgt.w	8009fca <_dtoa_r+0x632>
 8009e08:	d10c      	bne.n	8009e24 <_dtoa_r+0x48c>
 8009e0a:	4b48      	ldr	r3, [pc, #288]	@ (8009f2c <_dtoa_r+0x594>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	ec51 0b17 	vmov	r0, r1, d7
 8009e12:	f7f6 fc09 	bl	8000628 <__aeabi_dmul>
 8009e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e1a:	f7f6 fe8b 	bl	8000b34 <__aeabi_dcmpge>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f000 8266 	beq.w	800a2f0 <_dtoa_r+0x958>
 8009e24:	2400      	movs	r4, #0
 8009e26:	4625      	mov	r5, r4
 8009e28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e2a:	4656      	mov	r6, sl
 8009e2c:	ea6f 0803 	mvn.w	r8, r3
 8009e30:	2700      	movs	r7, #0
 8009e32:	4621      	mov	r1, r4
 8009e34:	4648      	mov	r0, r9
 8009e36:	f000 fcbf 	bl	800a7b8 <_Bfree>
 8009e3a:	2d00      	cmp	r5, #0
 8009e3c:	f000 80bd 	beq.w	8009fba <_dtoa_r+0x622>
 8009e40:	b12f      	cbz	r7, 8009e4e <_dtoa_r+0x4b6>
 8009e42:	42af      	cmp	r7, r5
 8009e44:	d003      	beq.n	8009e4e <_dtoa_r+0x4b6>
 8009e46:	4639      	mov	r1, r7
 8009e48:	4648      	mov	r0, r9
 8009e4a:	f000 fcb5 	bl	800a7b8 <_Bfree>
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4648      	mov	r0, r9
 8009e52:	f000 fcb1 	bl	800a7b8 <_Bfree>
 8009e56:	e0b0      	b.n	8009fba <_dtoa_r+0x622>
 8009e58:	07e2      	lsls	r2, r4, #31
 8009e5a:	d505      	bpl.n	8009e68 <_dtoa_r+0x4d0>
 8009e5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e60:	f7f6 fbe2 	bl	8000628 <__aeabi_dmul>
 8009e64:	3601      	adds	r6, #1
 8009e66:	2301      	movs	r3, #1
 8009e68:	1064      	asrs	r4, r4, #1
 8009e6a:	3508      	adds	r5, #8
 8009e6c:	e762      	b.n	8009d34 <_dtoa_r+0x39c>
 8009e6e:	2602      	movs	r6, #2
 8009e70:	e765      	b.n	8009d3e <_dtoa_r+0x3a6>
 8009e72:	9c03      	ldr	r4, [sp, #12]
 8009e74:	46b8      	mov	r8, r7
 8009e76:	e784      	b.n	8009d82 <_dtoa_r+0x3ea>
 8009e78:	4b27      	ldr	r3, [pc, #156]	@ (8009f18 <_dtoa_r+0x580>)
 8009e7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e84:	4454      	add	r4, sl
 8009e86:	2900      	cmp	r1, #0
 8009e88:	d054      	beq.n	8009f34 <_dtoa_r+0x59c>
 8009e8a:	4929      	ldr	r1, [pc, #164]	@ (8009f30 <_dtoa_r+0x598>)
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	f7f6 fcf5 	bl	800087c <__aeabi_ddiv>
 8009e92:	4633      	mov	r3, r6
 8009e94:	462a      	mov	r2, r5
 8009e96:	f7f6 fa0f 	bl	80002b8 <__aeabi_dsub>
 8009e9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e9e:	4656      	mov	r6, sl
 8009ea0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ea4:	f7f6 fe70 	bl	8000b88 <__aeabi_d2iz>
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	f7f6 fb53 	bl	8000554 <__aeabi_i2d>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eb6:	f7f6 f9ff 	bl	80002b8 <__aeabi_dsub>
 8009eba:	3530      	adds	r5, #48	@ 0x30
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ec4:	f806 5b01 	strb.w	r5, [r6], #1
 8009ec8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ecc:	f7f6 fe1e 	bl	8000b0c <__aeabi_dcmplt>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d172      	bne.n	8009fba <_dtoa_r+0x622>
 8009ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ed8:	4911      	ldr	r1, [pc, #68]	@ (8009f20 <_dtoa_r+0x588>)
 8009eda:	2000      	movs	r0, #0
 8009edc:	f7f6 f9ec 	bl	80002b8 <__aeabi_dsub>
 8009ee0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ee4:	f7f6 fe12 	bl	8000b0c <__aeabi_dcmplt>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	f040 80b4 	bne.w	800a056 <_dtoa_r+0x6be>
 8009eee:	42a6      	cmp	r6, r4
 8009ef0:	f43f af70 	beq.w	8009dd4 <_dtoa_r+0x43c>
 8009ef4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8009f24 <_dtoa_r+0x58c>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	f7f6 fb94 	bl	8000628 <__aeabi_dmul>
 8009f00:	4b08      	ldr	r3, [pc, #32]	@ (8009f24 <_dtoa_r+0x58c>)
 8009f02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009f06:	2200      	movs	r2, #0
 8009f08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f0c:	f7f6 fb8c 	bl	8000628 <__aeabi_dmul>
 8009f10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f14:	e7c4      	b.n	8009ea0 <_dtoa_r+0x508>
 8009f16:	bf00      	nop
 8009f18:	0800bd18 	.word	0x0800bd18
 8009f1c:	0800bcf0 	.word	0x0800bcf0
 8009f20:	3ff00000 	.word	0x3ff00000
 8009f24:	40240000 	.word	0x40240000
 8009f28:	401c0000 	.word	0x401c0000
 8009f2c:	40140000 	.word	0x40140000
 8009f30:	3fe00000 	.word	0x3fe00000
 8009f34:	4631      	mov	r1, r6
 8009f36:	4628      	mov	r0, r5
 8009f38:	f7f6 fb76 	bl	8000628 <__aeabi_dmul>
 8009f3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009f40:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009f42:	4656      	mov	r6, sl
 8009f44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f48:	f7f6 fe1e 	bl	8000b88 <__aeabi_d2iz>
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	f7f6 fb01 	bl	8000554 <__aeabi_i2d>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f5a:	f7f6 f9ad 	bl	80002b8 <__aeabi_dsub>
 8009f5e:	3530      	adds	r5, #48	@ 0x30
 8009f60:	f806 5b01 	strb.w	r5, [r6], #1
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	42a6      	cmp	r6, r4
 8009f6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f6e:	f04f 0200 	mov.w	r2, #0
 8009f72:	d124      	bne.n	8009fbe <_dtoa_r+0x626>
 8009f74:	4baf      	ldr	r3, [pc, #700]	@ (800a234 <_dtoa_r+0x89c>)
 8009f76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009f7a:	f7f6 f99f 	bl	80002bc <__adddf3>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f86:	f7f6 fddf 	bl	8000b48 <__aeabi_dcmpgt>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d163      	bne.n	800a056 <_dtoa_r+0x6be>
 8009f8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009f92:	49a8      	ldr	r1, [pc, #672]	@ (800a234 <_dtoa_r+0x89c>)
 8009f94:	2000      	movs	r0, #0
 8009f96:	f7f6 f98f 	bl	80002b8 <__aeabi_dsub>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fa2:	f7f6 fdb3 	bl	8000b0c <__aeabi_dcmplt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	f43f af14 	beq.w	8009dd4 <_dtoa_r+0x43c>
 8009fac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009fae:	1e73      	subs	r3, r6, #1
 8009fb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009fb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fb6:	2b30      	cmp	r3, #48	@ 0x30
 8009fb8:	d0f8      	beq.n	8009fac <_dtoa_r+0x614>
 8009fba:	4647      	mov	r7, r8
 8009fbc:	e03b      	b.n	800a036 <_dtoa_r+0x69e>
 8009fbe:	4b9e      	ldr	r3, [pc, #632]	@ (800a238 <_dtoa_r+0x8a0>)
 8009fc0:	f7f6 fb32 	bl	8000628 <__aeabi_dmul>
 8009fc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc8:	e7bc      	b.n	8009f44 <_dtoa_r+0x5ac>
 8009fca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009fce:	4656      	mov	r6, sl
 8009fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f7f6 fc50 	bl	800087c <__aeabi_ddiv>
 8009fdc:	f7f6 fdd4 	bl	8000b88 <__aeabi_d2iz>
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	f7f6 fab7 	bl	8000554 <__aeabi_i2d>
 8009fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fea:	f7f6 fb1d 	bl	8000628 <__aeabi_dmul>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ffa:	f7f6 f95d 	bl	80002b8 <__aeabi_dsub>
 8009ffe:	f806 4b01 	strb.w	r4, [r6], #1
 800a002:	9d03      	ldr	r5, [sp, #12]
 800a004:	eba6 040a 	sub.w	r4, r6, sl
 800a008:	42a5      	cmp	r5, r4
 800a00a:	4602      	mov	r2, r0
 800a00c:	460b      	mov	r3, r1
 800a00e:	d133      	bne.n	800a078 <_dtoa_r+0x6e0>
 800a010:	f7f6 f954 	bl	80002bc <__adddf3>
 800a014:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a018:	4604      	mov	r4, r0
 800a01a:	460d      	mov	r5, r1
 800a01c:	f7f6 fd94 	bl	8000b48 <__aeabi_dcmpgt>
 800a020:	b9c0      	cbnz	r0, 800a054 <_dtoa_r+0x6bc>
 800a022:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a026:	4620      	mov	r0, r4
 800a028:	4629      	mov	r1, r5
 800a02a:	f7f6 fd65 	bl	8000af8 <__aeabi_dcmpeq>
 800a02e:	b110      	cbz	r0, 800a036 <_dtoa_r+0x69e>
 800a030:	f018 0f01 	tst.w	r8, #1
 800a034:	d10e      	bne.n	800a054 <_dtoa_r+0x6bc>
 800a036:	9902      	ldr	r1, [sp, #8]
 800a038:	4648      	mov	r0, r9
 800a03a:	f000 fbbd 	bl	800a7b8 <_Bfree>
 800a03e:	2300      	movs	r3, #0
 800a040:	7033      	strb	r3, [r6, #0]
 800a042:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a044:	3701      	adds	r7, #1
 800a046:	601f      	str	r7, [r3, #0]
 800a048:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 824b 	beq.w	800a4e6 <_dtoa_r+0xb4e>
 800a050:	601e      	str	r6, [r3, #0]
 800a052:	e248      	b.n	800a4e6 <_dtoa_r+0xb4e>
 800a054:	46b8      	mov	r8, r7
 800a056:	4633      	mov	r3, r6
 800a058:	461e      	mov	r6, r3
 800a05a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a05e:	2a39      	cmp	r2, #57	@ 0x39
 800a060:	d106      	bne.n	800a070 <_dtoa_r+0x6d8>
 800a062:	459a      	cmp	sl, r3
 800a064:	d1f8      	bne.n	800a058 <_dtoa_r+0x6c0>
 800a066:	2230      	movs	r2, #48	@ 0x30
 800a068:	f108 0801 	add.w	r8, r8, #1
 800a06c:	f88a 2000 	strb.w	r2, [sl]
 800a070:	781a      	ldrb	r2, [r3, #0]
 800a072:	3201      	adds	r2, #1
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	e7a0      	b.n	8009fba <_dtoa_r+0x622>
 800a078:	4b6f      	ldr	r3, [pc, #444]	@ (800a238 <_dtoa_r+0x8a0>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	f7f6 fad4 	bl	8000628 <__aeabi_dmul>
 800a080:	2200      	movs	r2, #0
 800a082:	2300      	movs	r3, #0
 800a084:	4604      	mov	r4, r0
 800a086:	460d      	mov	r5, r1
 800a088:	f7f6 fd36 	bl	8000af8 <__aeabi_dcmpeq>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d09f      	beq.n	8009fd0 <_dtoa_r+0x638>
 800a090:	e7d1      	b.n	800a036 <_dtoa_r+0x69e>
 800a092:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a094:	2a00      	cmp	r2, #0
 800a096:	f000 80ea 	beq.w	800a26e <_dtoa_r+0x8d6>
 800a09a:	9a07      	ldr	r2, [sp, #28]
 800a09c:	2a01      	cmp	r2, #1
 800a09e:	f300 80cd 	bgt.w	800a23c <_dtoa_r+0x8a4>
 800a0a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	f000 80c1 	beq.w	800a22c <_dtoa_r+0x894>
 800a0aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0ae:	9c08      	ldr	r4, [sp, #32]
 800a0b0:	9e00      	ldr	r6, [sp, #0]
 800a0b2:	9a00      	ldr	r2, [sp, #0]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	9200      	str	r2, [sp, #0]
 800a0b8:	9a06      	ldr	r2, [sp, #24]
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	441a      	add	r2, r3
 800a0be:	4648      	mov	r0, r9
 800a0c0:	9206      	str	r2, [sp, #24]
 800a0c2:	f000 fc2d 	bl	800a920 <__i2b>
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	b166      	cbz	r6, 800a0e4 <_dtoa_r+0x74c>
 800a0ca:	9b06      	ldr	r3, [sp, #24]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	dd09      	ble.n	800a0e4 <_dtoa_r+0x74c>
 800a0d0:	42b3      	cmp	r3, r6
 800a0d2:	9a00      	ldr	r2, [sp, #0]
 800a0d4:	bfa8      	it	ge
 800a0d6:	4633      	movge	r3, r6
 800a0d8:	1ad2      	subs	r2, r2, r3
 800a0da:	9200      	str	r2, [sp, #0]
 800a0dc:	9a06      	ldr	r2, [sp, #24]
 800a0de:	1af6      	subs	r6, r6, r3
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	9306      	str	r3, [sp, #24]
 800a0e4:	9b08      	ldr	r3, [sp, #32]
 800a0e6:	b30b      	cbz	r3, 800a12c <_dtoa_r+0x794>
 800a0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 80c6 	beq.w	800a27c <_dtoa_r+0x8e4>
 800a0f0:	2c00      	cmp	r4, #0
 800a0f2:	f000 80c0 	beq.w	800a276 <_dtoa_r+0x8de>
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	4648      	mov	r0, r9
 800a0fc:	f000 fcc8 	bl	800aa90 <__pow5mult>
 800a100:	9a02      	ldr	r2, [sp, #8]
 800a102:	4601      	mov	r1, r0
 800a104:	4605      	mov	r5, r0
 800a106:	4648      	mov	r0, r9
 800a108:	f000 fc20 	bl	800a94c <__multiply>
 800a10c:	9902      	ldr	r1, [sp, #8]
 800a10e:	4680      	mov	r8, r0
 800a110:	4648      	mov	r0, r9
 800a112:	f000 fb51 	bl	800a7b8 <_Bfree>
 800a116:	9b08      	ldr	r3, [sp, #32]
 800a118:	1b1b      	subs	r3, r3, r4
 800a11a:	9308      	str	r3, [sp, #32]
 800a11c:	f000 80b1 	beq.w	800a282 <_dtoa_r+0x8ea>
 800a120:	9a08      	ldr	r2, [sp, #32]
 800a122:	4641      	mov	r1, r8
 800a124:	4648      	mov	r0, r9
 800a126:	f000 fcb3 	bl	800aa90 <__pow5mult>
 800a12a:	9002      	str	r0, [sp, #8]
 800a12c:	2101      	movs	r1, #1
 800a12e:	4648      	mov	r0, r9
 800a130:	f000 fbf6 	bl	800a920 <__i2b>
 800a134:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a136:	4604      	mov	r4, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 81d8 	beq.w	800a4ee <_dtoa_r+0xb56>
 800a13e:	461a      	mov	r2, r3
 800a140:	4601      	mov	r1, r0
 800a142:	4648      	mov	r0, r9
 800a144:	f000 fca4 	bl	800aa90 <__pow5mult>
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	4604      	mov	r4, r0
 800a14e:	f300 809f 	bgt.w	800a290 <_dtoa_r+0x8f8>
 800a152:	9b04      	ldr	r3, [sp, #16]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f040 8097 	bne.w	800a288 <_dtoa_r+0x8f0>
 800a15a:	9b05      	ldr	r3, [sp, #20]
 800a15c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 8093 	bne.w	800a28c <_dtoa_r+0x8f4>
 800a166:	9b05      	ldr	r3, [sp, #20]
 800a168:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a16c:	0d1b      	lsrs	r3, r3, #20
 800a16e:	051b      	lsls	r3, r3, #20
 800a170:	b133      	cbz	r3, 800a180 <_dtoa_r+0x7e8>
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	3301      	adds	r3, #1
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	9b06      	ldr	r3, [sp, #24]
 800a17a:	3301      	adds	r3, #1
 800a17c:	9306      	str	r3, [sp, #24]
 800a17e:	2301      	movs	r3, #1
 800a180:	9308      	str	r3, [sp, #32]
 800a182:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 81b8 	beq.w	800a4fa <_dtoa_r+0xb62>
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a190:	6918      	ldr	r0, [r3, #16]
 800a192:	f000 fb79 	bl	800a888 <__hi0bits>
 800a196:	f1c0 0020 	rsb	r0, r0, #32
 800a19a:	9b06      	ldr	r3, [sp, #24]
 800a19c:	4418      	add	r0, r3
 800a19e:	f010 001f 	ands.w	r0, r0, #31
 800a1a2:	f000 8082 	beq.w	800a2aa <_dtoa_r+0x912>
 800a1a6:	f1c0 0320 	rsb	r3, r0, #32
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	dd73      	ble.n	800a296 <_dtoa_r+0x8fe>
 800a1ae:	9b00      	ldr	r3, [sp, #0]
 800a1b0:	f1c0 001c 	rsb	r0, r0, #28
 800a1b4:	4403      	add	r3, r0
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	9b06      	ldr	r3, [sp, #24]
 800a1ba:	4403      	add	r3, r0
 800a1bc:	4406      	add	r6, r0
 800a1be:	9306      	str	r3, [sp, #24]
 800a1c0:	9b00      	ldr	r3, [sp, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dd05      	ble.n	800a1d2 <_dtoa_r+0x83a>
 800a1c6:	9902      	ldr	r1, [sp, #8]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4648      	mov	r0, r9
 800a1cc:	f000 fcba 	bl	800ab44 <__lshift>
 800a1d0:	9002      	str	r0, [sp, #8]
 800a1d2:	9b06      	ldr	r3, [sp, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dd05      	ble.n	800a1e4 <_dtoa_r+0x84c>
 800a1d8:	4621      	mov	r1, r4
 800a1da:	461a      	mov	r2, r3
 800a1dc:	4648      	mov	r0, r9
 800a1de:	f000 fcb1 	bl	800ab44 <__lshift>
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d061      	beq.n	800a2ae <_dtoa_r+0x916>
 800a1ea:	9802      	ldr	r0, [sp, #8]
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f000 fd15 	bl	800ac1c <__mcmp>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	da5b      	bge.n	800a2ae <_dtoa_r+0x916>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	9902      	ldr	r1, [sp, #8]
 800a1fa:	220a      	movs	r2, #10
 800a1fc:	4648      	mov	r0, r9
 800a1fe:	f000 fafd 	bl	800a7fc <__multadd>
 800a202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a204:	9002      	str	r0, [sp, #8]
 800a206:	f107 38ff 	add.w	r8, r7, #4294967295
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f000 8177 	beq.w	800a4fe <_dtoa_r+0xb66>
 800a210:	4629      	mov	r1, r5
 800a212:	2300      	movs	r3, #0
 800a214:	220a      	movs	r2, #10
 800a216:	4648      	mov	r0, r9
 800a218:	f000 faf0 	bl	800a7fc <__multadd>
 800a21c:	f1bb 0f00 	cmp.w	fp, #0
 800a220:	4605      	mov	r5, r0
 800a222:	dc6f      	bgt.n	800a304 <_dtoa_r+0x96c>
 800a224:	9b07      	ldr	r3, [sp, #28]
 800a226:	2b02      	cmp	r3, #2
 800a228:	dc49      	bgt.n	800a2be <_dtoa_r+0x926>
 800a22a:	e06b      	b.n	800a304 <_dtoa_r+0x96c>
 800a22c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a22e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a232:	e73c      	b.n	800a0ae <_dtoa_r+0x716>
 800a234:	3fe00000 	.word	0x3fe00000
 800a238:	40240000 	.word	0x40240000
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	1e5c      	subs	r4, r3, #1
 800a240:	9b08      	ldr	r3, [sp, #32]
 800a242:	42a3      	cmp	r3, r4
 800a244:	db09      	blt.n	800a25a <_dtoa_r+0x8c2>
 800a246:	1b1c      	subs	r4, r3, r4
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f6bf af30 	bge.w	800a0b0 <_dtoa_r+0x718>
 800a250:	9b00      	ldr	r3, [sp, #0]
 800a252:	9a03      	ldr	r2, [sp, #12]
 800a254:	1a9e      	subs	r6, r3, r2
 800a256:	2300      	movs	r3, #0
 800a258:	e72b      	b.n	800a0b2 <_dtoa_r+0x71a>
 800a25a:	9b08      	ldr	r3, [sp, #32]
 800a25c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a25e:	9408      	str	r4, [sp, #32]
 800a260:	1ae3      	subs	r3, r4, r3
 800a262:	441a      	add	r2, r3
 800a264:	9e00      	ldr	r6, [sp, #0]
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	920d      	str	r2, [sp, #52]	@ 0x34
 800a26a:	2400      	movs	r4, #0
 800a26c:	e721      	b.n	800a0b2 <_dtoa_r+0x71a>
 800a26e:	9c08      	ldr	r4, [sp, #32]
 800a270:	9e00      	ldr	r6, [sp, #0]
 800a272:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a274:	e728      	b.n	800a0c8 <_dtoa_r+0x730>
 800a276:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a27a:	e751      	b.n	800a120 <_dtoa_r+0x788>
 800a27c:	9a08      	ldr	r2, [sp, #32]
 800a27e:	9902      	ldr	r1, [sp, #8]
 800a280:	e750      	b.n	800a124 <_dtoa_r+0x78c>
 800a282:	f8cd 8008 	str.w	r8, [sp, #8]
 800a286:	e751      	b.n	800a12c <_dtoa_r+0x794>
 800a288:	2300      	movs	r3, #0
 800a28a:	e779      	b.n	800a180 <_dtoa_r+0x7e8>
 800a28c:	9b04      	ldr	r3, [sp, #16]
 800a28e:	e777      	b.n	800a180 <_dtoa_r+0x7e8>
 800a290:	2300      	movs	r3, #0
 800a292:	9308      	str	r3, [sp, #32]
 800a294:	e779      	b.n	800a18a <_dtoa_r+0x7f2>
 800a296:	d093      	beq.n	800a1c0 <_dtoa_r+0x828>
 800a298:	9a00      	ldr	r2, [sp, #0]
 800a29a:	331c      	adds	r3, #28
 800a29c:	441a      	add	r2, r3
 800a29e:	9200      	str	r2, [sp, #0]
 800a2a0:	9a06      	ldr	r2, [sp, #24]
 800a2a2:	441a      	add	r2, r3
 800a2a4:	441e      	add	r6, r3
 800a2a6:	9206      	str	r2, [sp, #24]
 800a2a8:	e78a      	b.n	800a1c0 <_dtoa_r+0x828>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	e7f4      	b.n	800a298 <_dtoa_r+0x900>
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	46b8      	mov	r8, r7
 800a2b4:	dc20      	bgt.n	800a2f8 <_dtoa_r+0x960>
 800a2b6:	469b      	mov	fp, r3
 800a2b8:	9b07      	ldr	r3, [sp, #28]
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	dd1e      	ble.n	800a2fc <_dtoa_r+0x964>
 800a2be:	f1bb 0f00 	cmp.w	fp, #0
 800a2c2:	f47f adb1 	bne.w	8009e28 <_dtoa_r+0x490>
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	465b      	mov	r3, fp
 800a2ca:	2205      	movs	r2, #5
 800a2cc:	4648      	mov	r0, r9
 800a2ce:	f000 fa95 	bl	800a7fc <__multadd>
 800a2d2:	4601      	mov	r1, r0
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	9802      	ldr	r0, [sp, #8]
 800a2d8:	f000 fca0 	bl	800ac1c <__mcmp>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	f77f ada3 	ble.w	8009e28 <_dtoa_r+0x490>
 800a2e2:	4656      	mov	r6, sl
 800a2e4:	2331      	movs	r3, #49	@ 0x31
 800a2e6:	f806 3b01 	strb.w	r3, [r6], #1
 800a2ea:	f108 0801 	add.w	r8, r8, #1
 800a2ee:	e59f      	b.n	8009e30 <_dtoa_r+0x498>
 800a2f0:	9c03      	ldr	r4, [sp, #12]
 800a2f2:	46b8      	mov	r8, r7
 800a2f4:	4625      	mov	r5, r4
 800a2f6:	e7f4      	b.n	800a2e2 <_dtoa_r+0x94a>
 800a2f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 8101 	beq.w	800a506 <_dtoa_r+0xb6e>
 800a304:	2e00      	cmp	r6, #0
 800a306:	dd05      	ble.n	800a314 <_dtoa_r+0x97c>
 800a308:	4629      	mov	r1, r5
 800a30a:	4632      	mov	r2, r6
 800a30c:	4648      	mov	r0, r9
 800a30e:	f000 fc19 	bl	800ab44 <__lshift>
 800a312:	4605      	mov	r5, r0
 800a314:	9b08      	ldr	r3, [sp, #32]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d05c      	beq.n	800a3d4 <_dtoa_r+0xa3c>
 800a31a:	6869      	ldr	r1, [r5, #4]
 800a31c:	4648      	mov	r0, r9
 800a31e:	f000 fa0b 	bl	800a738 <_Balloc>
 800a322:	4606      	mov	r6, r0
 800a324:	b928      	cbnz	r0, 800a332 <_dtoa_r+0x99a>
 800a326:	4b82      	ldr	r3, [pc, #520]	@ (800a530 <_dtoa_r+0xb98>)
 800a328:	4602      	mov	r2, r0
 800a32a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a32e:	f7ff bb4a 	b.w	80099c6 <_dtoa_r+0x2e>
 800a332:	692a      	ldr	r2, [r5, #16]
 800a334:	3202      	adds	r2, #2
 800a336:	0092      	lsls	r2, r2, #2
 800a338:	f105 010c 	add.w	r1, r5, #12
 800a33c:	300c      	adds	r0, #12
 800a33e:	f000 ffa3 	bl	800b288 <memcpy>
 800a342:	2201      	movs	r2, #1
 800a344:	4631      	mov	r1, r6
 800a346:	4648      	mov	r0, r9
 800a348:	f000 fbfc 	bl	800ab44 <__lshift>
 800a34c:	f10a 0301 	add.w	r3, sl, #1
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	eb0a 030b 	add.w	r3, sl, fp
 800a356:	9308      	str	r3, [sp, #32]
 800a358:	9b04      	ldr	r3, [sp, #16]
 800a35a:	f003 0301 	and.w	r3, r3, #1
 800a35e:	462f      	mov	r7, r5
 800a360:	9306      	str	r3, [sp, #24]
 800a362:	4605      	mov	r5, r0
 800a364:	9b00      	ldr	r3, [sp, #0]
 800a366:	9802      	ldr	r0, [sp, #8]
 800a368:	4621      	mov	r1, r4
 800a36a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a36e:	f7ff fa88 	bl	8009882 <quorem>
 800a372:	4603      	mov	r3, r0
 800a374:	3330      	adds	r3, #48	@ 0x30
 800a376:	9003      	str	r0, [sp, #12]
 800a378:	4639      	mov	r1, r7
 800a37a:	9802      	ldr	r0, [sp, #8]
 800a37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a37e:	f000 fc4d 	bl	800ac1c <__mcmp>
 800a382:	462a      	mov	r2, r5
 800a384:	9004      	str	r0, [sp, #16]
 800a386:	4621      	mov	r1, r4
 800a388:	4648      	mov	r0, r9
 800a38a:	f000 fc63 	bl	800ac54 <__mdiff>
 800a38e:	68c2      	ldr	r2, [r0, #12]
 800a390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a392:	4606      	mov	r6, r0
 800a394:	bb02      	cbnz	r2, 800a3d8 <_dtoa_r+0xa40>
 800a396:	4601      	mov	r1, r0
 800a398:	9802      	ldr	r0, [sp, #8]
 800a39a:	f000 fc3f 	bl	800ac1c <__mcmp>
 800a39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4648      	mov	r0, r9
 800a3a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a3a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3aa:	f000 fa05 	bl	800a7b8 <_Bfree>
 800a3ae:	9b07      	ldr	r3, [sp, #28]
 800a3b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a3b2:	9e00      	ldr	r6, [sp, #0]
 800a3b4:	ea42 0103 	orr.w	r1, r2, r3
 800a3b8:	9b06      	ldr	r3, [sp, #24]
 800a3ba:	4319      	orrs	r1, r3
 800a3bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3be:	d10d      	bne.n	800a3dc <_dtoa_r+0xa44>
 800a3c0:	2b39      	cmp	r3, #57	@ 0x39
 800a3c2:	d027      	beq.n	800a414 <_dtoa_r+0xa7c>
 800a3c4:	9a04      	ldr	r2, [sp, #16]
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	dd01      	ble.n	800a3ce <_dtoa_r+0xa36>
 800a3ca:	9b03      	ldr	r3, [sp, #12]
 800a3cc:	3331      	adds	r3, #49	@ 0x31
 800a3ce:	f88b 3000 	strb.w	r3, [fp]
 800a3d2:	e52e      	b.n	8009e32 <_dtoa_r+0x49a>
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	e7b9      	b.n	800a34c <_dtoa_r+0x9b4>
 800a3d8:	2201      	movs	r2, #1
 800a3da:	e7e2      	b.n	800a3a2 <_dtoa_r+0xa0a>
 800a3dc:	9904      	ldr	r1, [sp, #16]
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	db04      	blt.n	800a3ec <_dtoa_r+0xa54>
 800a3e2:	9807      	ldr	r0, [sp, #28]
 800a3e4:	4301      	orrs	r1, r0
 800a3e6:	9806      	ldr	r0, [sp, #24]
 800a3e8:	4301      	orrs	r1, r0
 800a3ea:	d120      	bne.n	800a42e <_dtoa_r+0xa96>
 800a3ec:	2a00      	cmp	r2, #0
 800a3ee:	ddee      	ble.n	800a3ce <_dtoa_r+0xa36>
 800a3f0:	9902      	ldr	r1, [sp, #8]
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	4648      	mov	r0, r9
 800a3f8:	f000 fba4 	bl	800ab44 <__lshift>
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	9002      	str	r0, [sp, #8]
 800a400:	f000 fc0c 	bl	800ac1c <__mcmp>
 800a404:	2800      	cmp	r0, #0
 800a406:	9b00      	ldr	r3, [sp, #0]
 800a408:	dc02      	bgt.n	800a410 <_dtoa_r+0xa78>
 800a40a:	d1e0      	bne.n	800a3ce <_dtoa_r+0xa36>
 800a40c:	07da      	lsls	r2, r3, #31
 800a40e:	d5de      	bpl.n	800a3ce <_dtoa_r+0xa36>
 800a410:	2b39      	cmp	r3, #57	@ 0x39
 800a412:	d1da      	bne.n	800a3ca <_dtoa_r+0xa32>
 800a414:	2339      	movs	r3, #57	@ 0x39
 800a416:	f88b 3000 	strb.w	r3, [fp]
 800a41a:	4633      	mov	r3, r6
 800a41c:	461e      	mov	r6, r3
 800a41e:	3b01      	subs	r3, #1
 800a420:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a424:	2a39      	cmp	r2, #57	@ 0x39
 800a426:	d04e      	beq.n	800a4c6 <_dtoa_r+0xb2e>
 800a428:	3201      	adds	r2, #1
 800a42a:	701a      	strb	r2, [r3, #0]
 800a42c:	e501      	b.n	8009e32 <_dtoa_r+0x49a>
 800a42e:	2a00      	cmp	r2, #0
 800a430:	dd03      	ble.n	800a43a <_dtoa_r+0xaa2>
 800a432:	2b39      	cmp	r3, #57	@ 0x39
 800a434:	d0ee      	beq.n	800a414 <_dtoa_r+0xa7c>
 800a436:	3301      	adds	r3, #1
 800a438:	e7c9      	b.n	800a3ce <_dtoa_r+0xa36>
 800a43a:	9a00      	ldr	r2, [sp, #0]
 800a43c:	9908      	ldr	r1, [sp, #32]
 800a43e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a442:	428a      	cmp	r2, r1
 800a444:	d028      	beq.n	800a498 <_dtoa_r+0xb00>
 800a446:	9902      	ldr	r1, [sp, #8]
 800a448:	2300      	movs	r3, #0
 800a44a:	220a      	movs	r2, #10
 800a44c:	4648      	mov	r0, r9
 800a44e:	f000 f9d5 	bl	800a7fc <__multadd>
 800a452:	42af      	cmp	r7, r5
 800a454:	9002      	str	r0, [sp, #8]
 800a456:	f04f 0300 	mov.w	r3, #0
 800a45a:	f04f 020a 	mov.w	r2, #10
 800a45e:	4639      	mov	r1, r7
 800a460:	4648      	mov	r0, r9
 800a462:	d107      	bne.n	800a474 <_dtoa_r+0xadc>
 800a464:	f000 f9ca 	bl	800a7fc <__multadd>
 800a468:	4607      	mov	r7, r0
 800a46a:	4605      	mov	r5, r0
 800a46c:	9b00      	ldr	r3, [sp, #0]
 800a46e:	3301      	adds	r3, #1
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	e777      	b.n	800a364 <_dtoa_r+0x9cc>
 800a474:	f000 f9c2 	bl	800a7fc <__multadd>
 800a478:	4629      	mov	r1, r5
 800a47a:	4607      	mov	r7, r0
 800a47c:	2300      	movs	r3, #0
 800a47e:	220a      	movs	r2, #10
 800a480:	4648      	mov	r0, r9
 800a482:	f000 f9bb 	bl	800a7fc <__multadd>
 800a486:	4605      	mov	r5, r0
 800a488:	e7f0      	b.n	800a46c <_dtoa_r+0xad4>
 800a48a:	f1bb 0f00 	cmp.w	fp, #0
 800a48e:	bfcc      	ite	gt
 800a490:	465e      	movgt	r6, fp
 800a492:	2601      	movle	r6, #1
 800a494:	4456      	add	r6, sl
 800a496:	2700      	movs	r7, #0
 800a498:	9902      	ldr	r1, [sp, #8]
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	2201      	movs	r2, #1
 800a49e:	4648      	mov	r0, r9
 800a4a0:	f000 fb50 	bl	800ab44 <__lshift>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	9002      	str	r0, [sp, #8]
 800a4a8:	f000 fbb8 	bl	800ac1c <__mcmp>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	dcb4      	bgt.n	800a41a <_dtoa_r+0xa82>
 800a4b0:	d102      	bne.n	800a4b8 <_dtoa_r+0xb20>
 800a4b2:	9b00      	ldr	r3, [sp, #0]
 800a4b4:	07db      	lsls	r3, r3, #31
 800a4b6:	d4b0      	bmi.n	800a41a <_dtoa_r+0xa82>
 800a4b8:	4633      	mov	r3, r6
 800a4ba:	461e      	mov	r6, r3
 800a4bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4c0:	2a30      	cmp	r2, #48	@ 0x30
 800a4c2:	d0fa      	beq.n	800a4ba <_dtoa_r+0xb22>
 800a4c4:	e4b5      	b.n	8009e32 <_dtoa_r+0x49a>
 800a4c6:	459a      	cmp	sl, r3
 800a4c8:	d1a8      	bne.n	800a41c <_dtoa_r+0xa84>
 800a4ca:	2331      	movs	r3, #49	@ 0x31
 800a4cc:	f108 0801 	add.w	r8, r8, #1
 800a4d0:	f88a 3000 	strb.w	r3, [sl]
 800a4d4:	e4ad      	b.n	8009e32 <_dtoa_r+0x49a>
 800a4d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a534 <_dtoa_r+0xb9c>
 800a4dc:	b11b      	cbz	r3, 800a4e6 <_dtoa_r+0xb4e>
 800a4de:	f10a 0308 	add.w	r3, sl, #8
 800a4e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a4e4:	6013      	str	r3, [r2, #0]
 800a4e6:	4650      	mov	r0, sl
 800a4e8:	b017      	add	sp, #92	@ 0x5c
 800a4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ee:	9b07      	ldr	r3, [sp, #28]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	f77f ae2e 	ble.w	800a152 <_dtoa_r+0x7ba>
 800a4f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4f8:	9308      	str	r3, [sp, #32]
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	e64d      	b.n	800a19a <_dtoa_r+0x802>
 800a4fe:	f1bb 0f00 	cmp.w	fp, #0
 800a502:	f77f aed9 	ble.w	800a2b8 <_dtoa_r+0x920>
 800a506:	4656      	mov	r6, sl
 800a508:	9802      	ldr	r0, [sp, #8]
 800a50a:	4621      	mov	r1, r4
 800a50c:	f7ff f9b9 	bl	8009882 <quorem>
 800a510:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a514:	f806 3b01 	strb.w	r3, [r6], #1
 800a518:	eba6 020a 	sub.w	r2, r6, sl
 800a51c:	4593      	cmp	fp, r2
 800a51e:	ddb4      	ble.n	800a48a <_dtoa_r+0xaf2>
 800a520:	9902      	ldr	r1, [sp, #8]
 800a522:	2300      	movs	r3, #0
 800a524:	220a      	movs	r2, #10
 800a526:	4648      	mov	r0, r9
 800a528:	f000 f968 	bl	800a7fc <__multadd>
 800a52c:	9002      	str	r0, [sp, #8]
 800a52e:	e7eb      	b.n	800a508 <_dtoa_r+0xb70>
 800a530:	0800bc1c 	.word	0x0800bc1c
 800a534:	0800bba0 	.word	0x0800bba0

0800a538 <_free_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4605      	mov	r5, r0
 800a53c:	2900      	cmp	r1, #0
 800a53e:	d041      	beq.n	800a5c4 <_free_r+0x8c>
 800a540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a544:	1f0c      	subs	r4, r1, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfb8      	it	lt
 800a54a:	18e4      	addlt	r4, r4, r3
 800a54c:	f000 f8e8 	bl	800a720 <__malloc_lock>
 800a550:	4a1d      	ldr	r2, [pc, #116]	@ (800a5c8 <_free_r+0x90>)
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	b933      	cbnz	r3, 800a564 <_free_r+0x2c>
 800a556:	6063      	str	r3, [r4, #4]
 800a558:	6014      	str	r4, [r2, #0]
 800a55a:	4628      	mov	r0, r5
 800a55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a560:	f000 b8e4 	b.w	800a72c <__malloc_unlock>
 800a564:	42a3      	cmp	r3, r4
 800a566:	d908      	bls.n	800a57a <_free_r+0x42>
 800a568:	6820      	ldr	r0, [r4, #0]
 800a56a:	1821      	adds	r1, r4, r0
 800a56c:	428b      	cmp	r3, r1
 800a56e:	bf01      	itttt	eq
 800a570:	6819      	ldreq	r1, [r3, #0]
 800a572:	685b      	ldreq	r3, [r3, #4]
 800a574:	1809      	addeq	r1, r1, r0
 800a576:	6021      	streq	r1, [r4, #0]
 800a578:	e7ed      	b.n	800a556 <_free_r+0x1e>
 800a57a:	461a      	mov	r2, r3
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	b10b      	cbz	r3, 800a584 <_free_r+0x4c>
 800a580:	42a3      	cmp	r3, r4
 800a582:	d9fa      	bls.n	800a57a <_free_r+0x42>
 800a584:	6811      	ldr	r1, [r2, #0]
 800a586:	1850      	adds	r0, r2, r1
 800a588:	42a0      	cmp	r0, r4
 800a58a:	d10b      	bne.n	800a5a4 <_free_r+0x6c>
 800a58c:	6820      	ldr	r0, [r4, #0]
 800a58e:	4401      	add	r1, r0
 800a590:	1850      	adds	r0, r2, r1
 800a592:	4283      	cmp	r3, r0
 800a594:	6011      	str	r1, [r2, #0]
 800a596:	d1e0      	bne.n	800a55a <_free_r+0x22>
 800a598:	6818      	ldr	r0, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	6053      	str	r3, [r2, #4]
 800a59e:	4408      	add	r0, r1
 800a5a0:	6010      	str	r0, [r2, #0]
 800a5a2:	e7da      	b.n	800a55a <_free_r+0x22>
 800a5a4:	d902      	bls.n	800a5ac <_free_r+0x74>
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	e7d6      	b.n	800a55a <_free_r+0x22>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	1821      	adds	r1, r4, r0
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf04      	itt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	6063      	str	r3, [r4, #4]
 800a5ba:	bf04      	itt	eq
 800a5bc:	1809      	addeq	r1, r1, r0
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	6054      	str	r4, [r2, #4]
 800a5c2:	e7ca      	b.n	800a55a <_free_r+0x22>
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20040578 	.word	0x20040578

0800a5cc <malloc>:
 800a5cc:	4b02      	ldr	r3, [pc, #8]	@ (800a5d8 <malloc+0xc>)
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	f000 b825 	b.w	800a620 <_malloc_r>
 800a5d6:	bf00      	nop
 800a5d8:	20040018 	.word	0x20040018

0800a5dc <sbrk_aligned>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	4e0f      	ldr	r6, [pc, #60]	@ (800a61c <sbrk_aligned+0x40>)
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	6831      	ldr	r1, [r6, #0]
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	b911      	cbnz	r1, 800a5ee <sbrk_aligned+0x12>
 800a5e8:	f000 fe3e 	bl	800b268 <_sbrk_r>
 800a5ec:	6030      	str	r0, [r6, #0]
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f000 fe39 	bl	800b268 <_sbrk_r>
 800a5f6:	1c43      	adds	r3, r0, #1
 800a5f8:	d103      	bne.n	800a602 <sbrk_aligned+0x26>
 800a5fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a5fe:	4620      	mov	r0, r4
 800a600:	bd70      	pop	{r4, r5, r6, pc}
 800a602:	1cc4      	adds	r4, r0, #3
 800a604:	f024 0403 	bic.w	r4, r4, #3
 800a608:	42a0      	cmp	r0, r4
 800a60a:	d0f8      	beq.n	800a5fe <sbrk_aligned+0x22>
 800a60c:	1a21      	subs	r1, r4, r0
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 fe2a 	bl	800b268 <_sbrk_r>
 800a614:	3001      	adds	r0, #1
 800a616:	d1f2      	bne.n	800a5fe <sbrk_aligned+0x22>
 800a618:	e7ef      	b.n	800a5fa <sbrk_aligned+0x1e>
 800a61a:	bf00      	nop
 800a61c:	20040574 	.word	0x20040574

0800a620 <_malloc_r>:
 800a620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a624:	1ccd      	adds	r5, r1, #3
 800a626:	f025 0503 	bic.w	r5, r5, #3
 800a62a:	3508      	adds	r5, #8
 800a62c:	2d0c      	cmp	r5, #12
 800a62e:	bf38      	it	cc
 800a630:	250c      	movcc	r5, #12
 800a632:	2d00      	cmp	r5, #0
 800a634:	4606      	mov	r6, r0
 800a636:	db01      	blt.n	800a63c <_malloc_r+0x1c>
 800a638:	42a9      	cmp	r1, r5
 800a63a:	d904      	bls.n	800a646 <_malloc_r+0x26>
 800a63c:	230c      	movs	r3, #12
 800a63e:	6033      	str	r3, [r6, #0]
 800a640:	2000      	movs	r0, #0
 800a642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a646:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a71c <_malloc_r+0xfc>
 800a64a:	f000 f869 	bl	800a720 <__malloc_lock>
 800a64e:	f8d8 3000 	ldr.w	r3, [r8]
 800a652:	461c      	mov	r4, r3
 800a654:	bb44      	cbnz	r4, 800a6a8 <_malloc_r+0x88>
 800a656:	4629      	mov	r1, r5
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff ffbf 	bl	800a5dc <sbrk_aligned>
 800a65e:	1c43      	adds	r3, r0, #1
 800a660:	4604      	mov	r4, r0
 800a662:	d158      	bne.n	800a716 <_malloc_r+0xf6>
 800a664:	f8d8 4000 	ldr.w	r4, [r8]
 800a668:	4627      	mov	r7, r4
 800a66a:	2f00      	cmp	r7, #0
 800a66c:	d143      	bne.n	800a6f6 <_malloc_r+0xd6>
 800a66e:	2c00      	cmp	r4, #0
 800a670:	d04b      	beq.n	800a70a <_malloc_r+0xea>
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	4639      	mov	r1, r7
 800a676:	4630      	mov	r0, r6
 800a678:	eb04 0903 	add.w	r9, r4, r3
 800a67c:	f000 fdf4 	bl	800b268 <_sbrk_r>
 800a680:	4581      	cmp	r9, r0
 800a682:	d142      	bne.n	800a70a <_malloc_r+0xea>
 800a684:	6821      	ldr	r1, [r4, #0]
 800a686:	1a6d      	subs	r5, r5, r1
 800a688:	4629      	mov	r1, r5
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffa6 	bl	800a5dc <sbrk_aligned>
 800a690:	3001      	adds	r0, #1
 800a692:	d03a      	beq.n	800a70a <_malloc_r+0xea>
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	442b      	add	r3, r5
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	f8d8 3000 	ldr.w	r3, [r8]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	bb62      	cbnz	r2, 800a6fc <_malloc_r+0xdc>
 800a6a2:	f8c8 7000 	str.w	r7, [r8]
 800a6a6:	e00f      	b.n	800a6c8 <_malloc_r+0xa8>
 800a6a8:	6822      	ldr	r2, [r4, #0]
 800a6aa:	1b52      	subs	r2, r2, r5
 800a6ac:	d420      	bmi.n	800a6f0 <_malloc_r+0xd0>
 800a6ae:	2a0b      	cmp	r2, #11
 800a6b0:	d917      	bls.n	800a6e2 <_malloc_r+0xc2>
 800a6b2:	1961      	adds	r1, r4, r5
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	6025      	str	r5, [r4, #0]
 800a6b8:	bf18      	it	ne
 800a6ba:	6059      	strne	r1, [r3, #4]
 800a6bc:	6863      	ldr	r3, [r4, #4]
 800a6be:	bf08      	it	eq
 800a6c0:	f8c8 1000 	streq.w	r1, [r8]
 800a6c4:	5162      	str	r2, [r4, r5]
 800a6c6:	604b      	str	r3, [r1, #4]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f82f 	bl	800a72c <__malloc_unlock>
 800a6ce:	f104 000b 	add.w	r0, r4, #11
 800a6d2:	1d23      	adds	r3, r4, #4
 800a6d4:	f020 0007 	bic.w	r0, r0, #7
 800a6d8:	1ac2      	subs	r2, r0, r3
 800a6da:	bf1c      	itt	ne
 800a6dc:	1a1b      	subne	r3, r3, r0
 800a6de:	50a3      	strne	r3, [r4, r2]
 800a6e0:	e7af      	b.n	800a642 <_malloc_r+0x22>
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	42a3      	cmp	r3, r4
 800a6e6:	bf0c      	ite	eq
 800a6e8:	f8c8 2000 	streq.w	r2, [r8]
 800a6ec:	605a      	strne	r2, [r3, #4]
 800a6ee:	e7eb      	b.n	800a6c8 <_malloc_r+0xa8>
 800a6f0:	4623      	mov	r3, r4
 800a6f2:	6864      	ldr	r4, [r4, #4]
 800a6f4:	e7ae      	b.n	800a654 <_malloc_r+0x34>
 800a6f6:	463c      	mov	r4, r7
 800a6f8:	687f      	ldr	r7, [r7, #4]
 800a6fa:	e7b6      	b.n	800a66a <_malloc_r+0x4a>
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	42a3      	cmp	r3, r4
 800a702:	d1fb      	bne.n	800a6fc <_malloc_r+0xdc>
 800a704:	2300      	movs	r3, #0
 800a706:	6053      	str	r3, [r2, #4]
 800a708:	e7de      	b.n	800a6c8 <_malloc_r+0xa8>
 800a70a:	230c      	movs	r3, #12
 800a70c:	6033      	str	r3, [r6, #0]
 800a70e:	4630      	mov	r0, r6
 800a710:	f000 f80c 	bl	800a72c <__malloc_unlock>
 800a714:	e794      	b.n	800a640 <_malloc_r+0x20>
 800a716:	6005      	str	r5, [r0, #0]
 800a718:	e7d6      	b.n	800a6c8 <_malloc_r+0xa8>
 800a71a:	bf00      	nop
 800a71c:	20040578 	.word	0x20040578

0800a720 <__malloc_lock>:
 800a720:	4801      	ldr	r0, [pc, #4]	@ (800a728 <__malloc_lock+0x8>)
 800a722:	f7ff b8ac 	b.w	800987e <__retarget_lock_acquire_recursive>
 800a726:	bf00      	nop
 800a728:	20040570 	.word	0x20040570

0800a72c <__malloc_unlock>:
 800a72c:	4801      	ldr	r0, [pc, #4]	@ (800a734 <__malloc_unlock+0x8>)
 800a72e:	f7ff b8a7 	b.w	8009880 <__retarget_lock_release_recursive>
 800a732:	bf00      	nop
 800a734:	20040570 	.word	0x20040570

0800a738 <_Balloc>:
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	69c6      	ldr	r6, [r0, #28]
 800a73c:	4604      	mov	r4, r0
 800a73e:	460d      	mov	r5, r1
 800a740:	b976      	cbnz	r6, 800a760 <_Balloc+0x28>
 800a742:	2010      	movs	r0, #16
 800a744:	f7ff ff42 	bl	800a5cc <malloc>
 800a748:	4602      	mov	r2, r0
 800a74a:	61e0      	str	r0, [r4, #28]
 800a74c:	b920      	cbnz	r0, 800a758 <_Balloc+0x20>
 800a74e:	4b18      	ldr	r3, [pc, #96]	@ (800a7b0 <_Balloc+0x78>)
 800a750:	4818      	ldr	r0, [pc, #96]	@ (800a7b4 <_Balloc+0x7c>)
 800a752:	216b      	movs	r1, #107	@ 0x6b
 800a754:	f000 fda6 	bl	800b2a4 <__assert_func>
 800a758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a75c:	6006      	str	r6, [r0, #0]
 800a75e:	60c6      	str	r6, [r0, #12]
 800a760:	69e6      	ldr	r6, [r4, #28]
 800a762:	68f3      	ldr	r3, [r6, #12]
 800a764:	b183      	cbz	r3, 800a788 <_Balloc+0x50>
 800a766:	69e3      	ldr	r3, [r4, #28]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a76e:	b9b8      	cbnz	r0, 800a7a0 <_Balloc+0x68>
 800a770:	2101      	movs	r1, #1
 800a772:	fa01 f605 	lsl.w	r6, r1, r5
 800a776:	1d72      	adds	r2, r6, #5
 800a778:	0092      	lsls	r2, r2, #2
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 fdb0 	bl	800b2e0 <_calloc_r>
 800a780:	b160      	cbz	r0, 800a79c <_Balloc+0x64>
 800a782:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a786:	e00e      	b.n	800a7a6 <_Balloc+0x6e>
 800a788:	2221      	movs	r2, #33	@ 0x21
 800a78a:	2104      	movs	r1, #4
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 fda7 	bl	800b2e0 <_calloc_r>
 800a792:	69e3      	ldr	r3, [r4, #28]
 800a794:	60f0      	str	r0, [r6, #12]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e4      	bne.n	800a766 <_Balloc+0x2e>
 800a79c:	2000      	movs	r0, #0
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	6802      	ldr	r2, [r0, #0]
 800a7a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7ac:	e7f7      	b.n	800a79e <_Balloc+0x66>
 800a7ae:	bf00      	nop
 800a7b0:	0800bbad 	.word	0x0800bbad
 800a7b4:	0800bc2d 	.word	0x0800bc2d

0800a7b8 <_Bfree>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	69c6      	ldr	r6, [r0, #28]
 800a7bc:	4605      	mov	r5, r0
 800a7be:	460c      	mov	r4, r1
 800a7c0:	b976      	cbnz	r6, 800a7e0 <_Bfree+0x28>
 800a7c2:	2010      	movs	r0, #16
 800a7c4:	f7ff ff02 	bl	800a5cc <malloc>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	61e8      	str	r0, [r5, #28]
 800a7cc:	b920      	cbnz	r0, 800a7d8 <_Bfree+0x20>
 800a7ce:	4b09      	ldr	r3, [pc, #36]	@ (800a7f4 <_Bfree+0x3c>)
 800a7d0:	4809      	ldr	r0, [pc, #36]	@ (800a7f8 <_Bfree+0x40>)
 800a7d2:	218f      	movs	r1, #143	@ 0x8f
 800a7d4:	f000 fd66 	bl	800b2a4 <__assert_func>
 800a7d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7dc:	6006      	str	r6, [r0, #0]
 800a7de:	60c6      	str	r6, [r0, #12]
 800a7e0:	b13c      	cbz	r4, 800a7f2 <_Bfree+0x3a>
 800a7e2:	69eb      	ldr	r3, [r5, #28]
 800a7e4:	6862      	ldr	r2, [r4, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7ec:	6021      	str	r1, [r4, #0]
 800a7ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	0800bbad 	.word	0x0800bbad
 800a7f8:	0800bc2d 	.word	0x0800bc2d

0800a7fc <__multadd>:
 800a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a800:	690d      	ldr	r5, [r1, #16]
 800a802:	4607      	mov	r7, r0
 800a804:	460c      	mov	r4, r1
 800a806:	461e      	mov	r6, r3
 800a808:	f101 0c14 	add.w	ip, r1, #20
 800a80c:	2000      	movs	r0, #0
 800a80e:	f8dc 3000 	ldr.w	r3, [ip]
 800a812:	b299      	uxth	r1, r3
 800a814:	fb02 6101 	mla	r1, r2, r1, r6
 800a818:	0c1e      	lsrs	r6, r3, #16
 800a81a:	0c0b      	lsrs	r3, r1, #16
 800a81c:	fb02 3306 	mla	r3, r2, r6, r3
 800a820:	b289      	uxth	r1, r1
 800a822:	3001      	adds	r0, #1
 800a824:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a828:	4285      	cmp	r5, r0
 800a82a:	f84c 1b04 	str.w	r1, [ip], #4
 800a82e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a832:	dcec      	bgt.n	800a80e <__multadd+0x12>
 800a834:	b30e      	cbz	r6, 800a87a <__multadd+0x7e>
 800a836:	68a3      	ldr	r3, [r4, #8]
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dc19      	bgt.n	800a870 <__multadd+0x74>
 800a83c:	6861      	ldr	r1, [r4, #4]
 800a83e:	4638      	mov	r0, r7
 800a840:	3101      	adds	r1, #1
 800a842:	f7ff ff79 	bl	800a738 <_Balloc>
 800a846:	4680      	mov	r8, r0
 800a848:	b928      	cbnz	r0, 800a856 <__multadd+0x5a>
 800a84a:	4602      	mov	r2, r0
 800a84c:	4b0c      	ldr	r3, [pc, #48]	@ (800a880 <__multadd+0x84>)
 800a84e:	480d      	ldr	r0, [pc, #52]	@ (800a884 <__multadd+0x88>)
 800a850:	21ba      	movs	r1, #186	@ 0xba
 800a852:	f000 fd27 	bl	800b2a4 <__assert_func>
 800a856:	6922      	ldr	r2, [r4, #16]
 800a858:	3202      	adds	r2, #2
 800a85a:	f104 010c 	add.w	r1, r4, #12
 800a85e:	0092      	lsls	r2, r2, #2
 800a860:	300c      	adds	r0, #12
 800a862:	f000 fd11 	bl	800b288 <memcpy>
 800a866:	4621      	mov	r1, r4
 800a868:	4638      	mov	r0, r7
 800a86a:	f7ff ffa5 	bl	800a7b8 <_Bfree>
 800a86e:	4644      	mov	r4, r8
 800a870:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a874:	3501      	adds	r5, #1
 800a876:	615e      	str	r6, [r3, #20]
 800a878:	6125      	str	r5, [r4, #16]
 800a87a:	4620      	mov	r0, r4
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	0800bc1c 	.word	0x0800bc1c
 800a884:	0800bc2d 	.word	0x0800bc2d

0800a888 <__hi0bits>:
 800a888:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a88c:	4603      	mov	r3, r0
 800a88e:	bf36      	itet	cc
 800a890:	0403      	lslcc	r3, r0, #16
 800a892:	2000      	movcs	r0, #0
 800a894:	2010      	movcc	r0, #16
 800a896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a89a:	bf3c      	itt	cc
 800a89c:	021b      	lslcc	r3, r3, #8
 800a89e:	3008      	addcc	r0, #8
 800a8a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8a4:	bf3c      	itt	cc
 800a8a6:	011b      	lslcc	r3, r3, #4
 800a8a8:	3004      	addcc	r0, #4
 800a8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ae:	bf3c      	itt	cc
 800a8b0:	009b      	lslcc	r3, r3, #2
 800a8b2:	3002      	addcc	r0, #2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	db05      	blt.n	800a8c4 <__hi0bits+0x3c>
 800a8b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8bc:	f100 0001 	add.w	r0, r0, #1
 800a8c0:	bf08      	it	eq
 800a8c2:	2020      	moveq	r0, #32
 800a8c4:	4770      	bx	lr

0800a8c6 <__lo0bits>:
 800a8c6:	6803      	ldr	r3, [r0, #0]
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	f013 0007 	ands.w	r0, r3, #7
 800a8ce:	d00b      	beq.n	800a8e8 <__lo0bits+0x22>
 800a8d0:	07d9      	lsls	r1, r3, #31
 800a8d2:	d421      	bmi.n	800a918 <__lo0bits+0x52>
 800a8d4:	0798      	lsls	r0, r3, #30
 800a8d6:	bf49      	itett	mi
 800a8d8:	085b      	lsrmi	r3, r3, #1
 800a8da:	089b      	lsrpl	r3, r3, #2
 800a8dc:	2001      	movmi	r0, #1
 800a8de:	6013      	strmi	r3, [r2, #0]
 800a8e0:	bf5c      	itt	pl
 800a8e2:	6013      	strpl	r3, [r2, #0]
 800a8e4:	2002      	movpl	r0, #2
 800a8e6:	4770      	bx	lr
 800a8e8:	b299      	uxth	r1, r3
 800a8ea:	b909      	cbnz	r1, 800a8f0 <__lo0bits+0x2a>
 800a8ec:	0c1b      	lsrs	r3, r3, #16
 800a8ee:	2010      	movs	r0, #16
 800a8f0:	b2d9      	uxtb	r1, r3
 800a8f2:	b909      	cbnz	r1, 800a8f8 <__lo0bits+0x32>
 800a8f4:	3008      	adds	r0, #8
 800a8f6:	0a1b      	lsrs	r3, r3, #8
 800a8f8:	0719      	lsls	r1, r3, #28
 800a8fa:	bf04      	itt	eq
 800a8fc:	091b      	lsreq	r3, r3, #4
 800a8fe:	3004      	addeq	r0, #4
 800a900:	0799      	lsls	r1, r3, #30
 800a902:	bf04      	itt	eq
 800a904:	089b      	lsreq	r3, r3, #2
 800a906:	3002      	addeq	r0, #2
 800a908:	07d9      	lsls	r1, r3, #31
 800a90a:	d403      	bmi.n	800a914 <__lo0bits+0x4e>
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	f100 0001 	add.w	r0, r0, #1
 800a912:	d003      	beq.n	800a91c <__lo0bits+0x56>
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	4770      	bx	lr
 800a918:	2000      	movs	r0, #0
 800a91a:	4770      	bx	lr
 800a91c:	2020      	movs	r0, #32
 800a91e:	4770      	bx	lr

0800a920 <__i2b>:
 800a920:	b510      	push	{r4, lr}
 800a922:	460c      	mov	r4, r1
 800a924:	2101      	movs	r1, #1
 800a926:	f7ff ff07 	bl	800a738 <_Balloc>
 800a92a:	4602      	mov	r2, r0
 800a92c:	b928      	cbnz	r0, 800a93a <__i2b+0x1a>
 800a92e:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <__i2b+0x24>)
 800a930:	4805      	ldr	r0, [pc, #20]	@ (800a948 <__i2b+0x28>)
 800a932:	f240 1145 	movw	r1, #325	@ 0x145
 800a936:	f000 fcb5 	bl	800b2a4 <__assert_func>
 800a93a:	2301      	movs	r3, #1
 800a93c:	6144      	str	r4, [r0, #20]
 800a93e:	6103      	str	r3, [r0, #16]
 800a940:	bd10      	pop	{r4, pc}
 800a942:	bf00      	nop
 800a944:	0800bc1c 	.word	0x0800bc1c
 800a948:	0800bc2d 	.word	0x0800bc2d

0800a94c <__multiply>:
 800a94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a950:	4617      	mov	r7, r2
 800a952:	690a      	ldr	r2, [r1, #16]
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	429a      	cmp	r2, r3
 800a958:	bfa8      	it	ge
 800a95a:	463b      	movge	r3, r7
 800a95c:	4689      	mov	r9, r1
 800a95e:	bfa4      	itt	ge
 800a960:	460f      	movge	r7, r1
 800a962:	4699      	movge	r9, r3
 800a964:	693d      	ldr	r5, [r7, #16]
 800a966:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	eb05 060a 	add.w	r6, r5, sl
 800a972:	42b3      	cmp	r3, r6
 800a974:	b085      	sub	sp, #20
 800a976:	bfb8      	it	lt
 800a978:	3101      	addlt	r1, #1
 800a97a:	f7ff fedd 	bl	800a738 <_Balloc>
 800a97e:	b930      	cbnz	r0, 800a98e <__multiply+0x42>
 800a980:	4602      	mov	r2, r0
 800a982:	4b41      	ldr	r3, [pc, #260]	@ (800aa88 <__multiply+0x13c>)
 800a984:	4841      	ldr	r0, [pc, #260]	@ (800aa8c <__multiply+0x140>)
 800a986:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a98a:	f000 fc8b 	bl	800b2a4 <__assert_func>
 800a98e:	f100 0414 	add.w	r4, r0, #20
 800a992:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a996:	4623      	mov	r3, r4
 800a998:	2200      	movs	r2, #0
 800a99a:	4573      	cmp	r3, lr
 800a99c:	d320      	bcc.n	800a9e0 <__multiply+0x94>
 800a99e:	f107 0814 	add.w	r8, r7, #20
 800a9a2:	f109 0114 	add.w	r1, r9, #20
 800a9a6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a9aa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a9ae:	9302      	str	r3, [sp, #8]
 800a9b0:	1beb      	subs	r3, r5, r7
 800a9b2:	3b15      	subs	r3, #21
 800a9b4:	f023 0303 	bic.w	r3, r3, #3
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	3715      	adds	r7, #21
 800a9bc:	42bd      	cmp	r5, r7
 800a9be:	bf38      	it	cc
 800a9c0:	2304      	movcc	r3, #4
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	9b02      	ldr	r3, [sp, #8]
 800a9c6:	9103      	str	r1, [sp, #12]
 800a9c8:	428b      	cmp	r3, r1
 800a9ca:	d80c      	bhi.n	800a9e6 <__multiply+0x9a>
 800a9cc:	2e00      	cmp	r6, #0
 800a9ce:	dd03      	ble.n	800a9d8 <__multiply+0x8c>
 800a9d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d055      	beq.n	800aa84 <__multiply+0x138>
 800a9d8:	6106      	str	r6, [r0, #16]
 800a9da:	b005      	add	sp, #20
 800a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e0:	f843 2b04 	str.w	r2, [r3], #4
 800a9e4:	e7d9      	b.n	800a99a <__multiply+0x4e>
 800a9e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9ea:	f1ba 0f00 	cmp.w	sl, #0
 800a9ee:	d01f      	beq.n	800aa30 <__multiply+0xe4>
 800a9f0:	46c4      	mov	ip, r8
 800a9f2:	46a1      	mov	r9, r4
 800a9f4:	2700      	movs	r7, #0
 800a9f6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a9fa:	f8d9 3000 	ldr.w	r3, [r9]
 800a9fe:	fa1f fb82 	uxth.w	fp, r2
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa08:	443b      	add	r3, r7
 800aa0a:	f8d9 7000 	ldr.w	r7, [r9]
 800aa0e:	0c12      	lsrs	r2, r2, #16
 800aa10:	0c3f      	lsrs	r7, r7, #16
 800aa12:	fb0a 7202 	mla	r2, sl, r2, r7
 800aa16:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa20:	4565      	cmp	r5, ip
 800aa22:	f849 3b04 	str.w	r3, [r9], #4
 800aa26:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800aa2a:	d8e4      	bhi.n	800a9f6 <__multiply+0xaa>
 800aa2c:	9b01      	ldr	r3, [sp, #4]
 800aa2e:	50e7      	str	r7, [r4, r3]
 800aa30:	9b03      	ldr	r3, [sp, #12]
 800aa32:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa36:	3104      	adds	r1, #4
 800aa38:	f1b9 0f00 	cmp.w	r9, #0
 800aa3c:	d020      	beq.n	800aa80 <__multiply+0x134>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	4647      	mov	r7, r8
 800aa42:	46a4      	mov	ip, r4
 800aa44:	f04f 0a00 	mov.w	sl, #0
 800aa48:	f8b7 b000 	ldrh.w	fp, [r7]
 800aa4c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800aa50:	fb09 220b 	mla	r2, r9, fp, r2
 800aa54:	4452      	add	r2, sl
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa5c:	f84c 3b04 	str.w	r3, [ip], #4
 800aa60:	f857 3b04 	ldr.w	r3, [r7], #4
 800aa64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa68:	f8bc 3000 	ldrh.w	r3, [ip]
 800aa6c:	fb09 330a 	mla	r3, r9, sl, r3
 800aa70:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800aa74:	42bd      	cmp	r5, r7
 800aa76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa7a:	d8e5      	bhi.n	800aa48 <__multiply+0xfc>
 800aa7c:	9a01      	ldr	r2, [sp, #4]
 800aa7e:	50a3      	str	r3, [r4, r2]
 800aa80:	3404      	adds	r4, #4
 800aa82:	e79f      	b.n	800a9c4 <__multiply+0x78>
 800aa84:	3e01      	subs	r6, #1
 800aa86:	e7a1      	b.n	800a9cc <__multiply+0x80>
 800aa88:	0800bc1c 	.word	0x0800bc1c
 800aa8c:	0800bc2d 	.word	0x0800bc2d

0800aa90 <__pow5mult>:
 800aa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	4615      	mov	r5, r2
 800aa96:	f012 0203 	ands.w	r2, r2, #3
 800aa9a:	4607      	mov	r7, r0
 800aa9c:	460e      	mov	r6, r1
 800aa9e:	d007      	beq.n	800aab0 <__pow5mult+0x20>
 800aaa0:	4c25      	ldr	r4, [pc, #148]	@ (800ab38 <__pow5mult+0xa8>)
 800aaa2:	3a01      	subs	r2, #1
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaaa:	f7ff fea7 	bl	800a7fc <__multadd>
 800aaae:	4606      	mov	r6, r0
 800aab0:	10ad      	asrs	r5, r5, #2
 800aab2:	d03d      	beq.n	800ab30 <__pow5mult+0xa0>
 800aab4:	69fc      	ldr	r4, [r7, #28]
 800aab6:	b97c      	cbnz	r4, 800aad8 <__pow5mult+0x48>
 800aab8:	2010      	movs	r0, #16
 800aaba:	f7ff fd87 	bl	800a5cc <malloc>
 800aabe:	4602      	mov	r2, r0
 800aac0:	61f8      	str	r0, [r7, #28]
 800aac2:	b928      	cbnz	r0, 800aad0 <__pow5mult+0x40>
 800aac4:	4b1d      	ldr	r3, [pc, #116]	@ (800ab3c <__pow5mult+0xac>)
 800aac6:	481e      	ldr	r0, [pc, #120]	@ (800ab40 <__pow5mult+0xb0>)
 800aac8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aacc:	f000 fbea 	bl	800b2a4 <__assert_func>
 800aad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aad4:	6004      	str	r4, [r0, #0]
 800aad6:	60c4      	str	r4, [r0, #12]
 800aad8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aadc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aae0:	b94c      	cbnz	r4, 800aaf6 <__pow5mult+0x66>
 800aae2:	f240 2171 	movw	r1, #625	@ 0x271
 800aae6:	4638      	mov	r0, r7
 800aae8:	f7ff ff1a 	bl	800a920 <__i2b>
 800aaec:	2300      	movs	r3, #0
 800aaee:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	6003      	str	r3, [r0, #0]
 800aaf6:	f04f 0900 	mov.w	r9, #0
 800aafa:	07eb      	lsls	r3, r5, #31
 800aafc:	d50a      	bpl.n	800ab14 <__pow5mult+0x84>
 800aafe:	4631      	mov	r1, r6
 800ab00:	4622      	mov	r2, r4
 800ab02:	4638      	mov	r0, r7
 800ab04:	f7ff ff22 	bl	800a94c <__multiply>
 800ab08:	4631      	mov	r1, r6
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	f7ff fe53 	bl	800a7b8 <_Bfree>
 800ab12:	4646      	mov	r6, r8
 800ab14:	106d      	asrs	r5, r5, #1
 800ab16:	d00b      	beq.n	800ab30 <__pow5mult+0xa0>
 800ab18:	6820      	ldr	r0, [r4, #0]
 800ab1a:	b938      	cbnz	r0, 800ab2c <__pow5mult+0x9c>
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff ff13 	bl	800a94c <__multiply>
 800ab26:	6020      	str	r0, [r4, #0]
 800ab28:	f8c0 9000 	str.w	r9, [r0]
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	e7e4      	b.n	800aafa <__pow5mult+0x6a>
 800ab30:	4630      	mov	r0, r6
 800ab32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab36:	bf00      	nop
 800ab38:	0800bce0 	.word	0x0800bce0
 800ab3c:	0800bbad 	.word	0x0800bbad
 800ab40:	0800bc2d 	.word	0x0800bc2d

0800ab44 <__lshift>:
 800ab44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab48:	460c      	mov	r4, r1
 800ab4a:	6849      	ldr	r1, [r1, #4]
 800ab4c:	6923      	ldr	r3, [r4, #16]
 800ab4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab52:	68a3      	ldr	r3, [r4, #8]
 800ab54:	4607      	mov	r7, r0
 800ab56:	4691      	mov	r9, r2
 800ab58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab5c:	f108 0601 	add.w	r6, r8, #1
 800ab60:	42b3      	cmp	r3, r6
 800ab62:	db0b      	blt.n	800ab7c <__lshift+0x38>
 800ab64:	4638      	mov	r0, r7
 800ab66:	f7ff fde7 	bl	800a738 <_Balloc>
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	b948      	cbnz	r0, 800ab82 <__lshift+0x3e>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	4b28      	ldr	r3, [pc, #160]	@ (800ac14 <__lshift+0xd0>)
 800ab72:	4829      	ldr	r0, [pc, #164]	@ (800ac18 <__lshift+0xd4>)
 800ab74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab78:	f000 fb94 	bl	800b2a4 <__assert_func>
 800ab7c:	3101      	adds	r1, #1
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	e7ee      	b.n	800ab60 <__lshift+0x1c>
 800ab82:	2300      	movs	r3, #0
 800ab84:	f100 0114 	add.w	r1, r0, #20
 800ab88:	f100 0210 	add.w	r2, r0, #16
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	4553      	cmp	r3, sl
 800ab90:	db33      	blt.n	800abfa <__lshift+0xb6>
 800ab92:	6920      	ldr	r0, [r4, #16]
 800ab94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab98:	f104 0314 	add.w	r3, r4, #20
 800ab9c:	f019 091f 	ands.w	r9, r9, #31
 800aba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aba4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aba8:	d02b      	beq.n	800ac02 <__lshift+0xbe>
 800abaa:	f1c9 0e20 	rsb	lr, r9, #32
 800abae:	468a      	mov	sl, r1
 800abb0:	2200      	movs	r2, #0
 800abb2:	6818      	ldr	r0, [r3, #0]
 800abb4:	fa00 f009 	lsl.w	r0, r0, r9
 800abb8:	4310      	orrs	r0, r2
 800abba:	f84a 0b04 	str.w	r0, [sl], #4
 800abbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc2:	459c      	cmp	ip, r3
 800abc4:	fa22 f20e 	lsr.w	r2, r2, lr
 800abc8:	d8f3      	bhi.n	800abb2 <__lshift+0x6e>
 800abca:	ebac 0304 	sub.w	r3, ip, r4
 800abce:	3b15      	subs	r3, #21
 800abd0:	f023 0303 	bic.w	r3, r3, #3
 800abd4:	3304      	adds	r3, #4
 800abd6:	f104 0015 	add.w	r0, r4, #21
 800abda:	4560      	cmp	r0, ip
 800abdc:	bf88      	it	hi
 800abde:	2304      	movhi	r3, #4
 800abe0:	50ca      	str	r2, [r1, r3]
 800abe2:	b10a      	cbz	r2, 800abe8 <__lshift+0xa4>
 800abe4:	f108 0602 	add.w	r6, r8, #2
 800abe8:	3e01      	subs	r6, #1
 800abea:	4638      	mov	r0, r7
 800abec:	612e      	str	r6, [r5, #16]
 800abee:	4621      	mov	r1, r4
 800abf0:	f7ff fde2 	bl	800a7b8 <_Bfree>
 800abf4:	4628      	mov	r0, r5
 800abf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfa:	f842 0f04 	str.w	r0, [r2, #4]!
 800abfe:	3301      	adds	r3, #1
 800ac00:	e7c5      	b.n	800ab8e <__lshift+0x4a>
 800ac02:	3904      	subs	r1, #4
 800ac04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac0c:	459c      	cmp	ip, r3
 800ac0e:	d8f9      	bhi.n	800ac04 <__lshift+0xc0>
 800ac10:	e7ea      	b.n	800abe8 <__lshift+0xa4>
 800ac12:	bf00      	nop
 800ac14:	0800bc1c 	.word	0x0800bc1c
 800ac18:	0800bc2d 	.word	0x0800bc2d

0800ac1c <__mcmp>:
 800ac1c:	690a      	ldr	r2, [r1, #16]
 800ac1e:	4603      	mov	r3, r0
 800ac20:	6900      	ldr	r0, [r0, #16]
 800ac22:	1a80      	subs	r0, r0, r2
 800ac24:	b530      	push	{r4, r5, lr}
 800ac26:	d10e      	bne.n	800ac46 <__mcmp+0x2a>
 800ac28:	3314      	adds	r3, #20
 800ac2a:	3114      	adds	r1, #20
 800ac2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac3c:	4295      	cmp	r5, r2
 800ac3e:	d003      	beq.n	800ac48 <__mcmp+0x2c>
 800ac40:	d205      	bcs.n	800ac4e <__mcmp+0x32>
 800ac42:	f04f 30ff 	mov.w	r0, #4294967295
 800ac46:	bd30      	pop	{r4, r5, pc}
 800ac48:	42a3      	cmp	r3, r4
 800ac4a:	d3f3      	bcc.n	800ac34 <__mcmp+0x18>
 800ac4c:	e7fb      	b.n	800ac46 <__mcmp+0x2a>
 800ac4e:	2001      	movs	r0, #1
 800ac50:	e7f9      	b.n	800ac46 <__mcmp+0x2a>
	...

0800ac54 <__mdiff>:
 800ac54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac58:	4689      	mov	r9, r1
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	4648      	mov	r0, r9
 800ac60:	4614      	mov	r4, r2
 800ac62:	f7ff ffdb 	bl	800ac1c <__mcmp>
 800ac66:	1e05      	subs	r5, r0, #0
 800ac68:	d112      	bne.n	800ac90 <__mdiff+0x3c>
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7ff fd63 	bl	800a738 <_Balloc>
 800ac72:	4602      	mov	r2, r0
 800ac74:	b928      	cbnz	r0, 800ac82 <__mdiff+0x2e>
 800ac76:	4b3f      	ldr	r3, [pc, #252]	@ (800ad74 <__mdiff+0x120>)
 800ac78:	f240 2137 	movw	r1, #567	@ 0x237
 800ac7c:	483e      	ldr	r0, [pc, #248]	@ (800ad78 <__mdiff+0x124>)
 800ac7e:	f000 fb11 	bl	800b2a4 <__assert_func>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac88:	4610      	mov	r0, r2
 800ac8a:	b003      	add	sp, #12
 800ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac90:	bfbc      	itt	lt
 800ac92:	464b      	movlt	r3, r9
 800ac94:	46a1      	movlt	r9, r4
 800ac96:	4630      	mov	r0, r6
 800ac98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac9c:	bfba      	itte	lt
 800ac9e:	461c      	movlt	r4, r3
 800aca0:	2501      	movlt	r5, #1
 800aca2:	2500      	movge	r5, #0
 800aca4:	f7ff fd48 	bl	800a738 <_Balloc>
 800aca8:	4602      	mov	r2, r0
 800acaa:	b918      	cbnz	r0, 800acb4 <__mdiff+0x60>
 800acac:	4b31      	ldr	r3, [pc, #196]	@ (800ad74 <__mdiff+0x120>)
 800acae:	f240 2145 	movw	r1, #581	@ 0x245
 800acb2:	e7e3      	b.n	800ac7c <__mdiff+0x28>
 800acb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800acb8:	6926      	ldr	r6, [r4, #16]
 800acba:	60c5      	str	r5, [r0, #12]
 800acbc:	f109 0310 	add.w	r3, r9, #16
 800acc0:	f109 0514 	add.w	r5, r9, #20
 800acc4:	f104 0e14 	add.w	lr, r4, #20
 800acc8:	f100 0b14 	add.w	fp, r0, #20
 800accc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800acd0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	46d9      	mov	r9, fp
 800acd8:	f04f 0c00 	mov.w	ip, #0
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ace2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ace6:	9301      	str	r3, [sp, #4]
 800ace8:	fa1f f38a 	uxth.w	r3, sl
 800acec:	4619      	mov	r1, r3
 800acee:	b283      	uxth	r3, r0
 800acf0:	1acb      	subs	r3, r1, r3
 800acf2:	0c00      	lsrs	r0, r0, #16
 800acf4:	4463      	add	r3, ip
 800acf6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800acfa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad04:	4576      	cmp	r6, lr
 800ad06:	f849 3b04 	str.w	r3, [r9], #4
 800ad0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad0e:	d8e5      	bhi.n	800acdc <__mdiff+0x88>
 800ad10:	1b33      	subs	r3, r6, r4
 800ad12:	3b15      	subs	r3, #21
 800ad14:	f023 0303 	bic.w	r3, r3, #3
 800ad18:	3415      	adds	r4, #21
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	42a6      	cmp	r6, r4
 800ad1e:	bf38      	it	cc
 800ad20:	2304      	movcc	r3, #4
 800ad22:	441d      	add	r5, r3
 800ad24:	445b      	add	r3, fp
 800ad26:	461e      	mov	r6, r3
 800ad28:	462c      	mov	r4, r5
 800ad2a:	4544      	cmp	r4, r8
 800ad2c:	d30e      	bcc.n	800ad4c <__mdiff+0xf8>
 800ad2e:	f108 0103 	add.w	r1, r8, #3
 800ad32:	1b49      	subs	r1, r1, r5
 800ad34:	f021 0103 	bic.w	r1, r1, #3
 800ad38:	3d03      	subs	r5, #3
 800ad3a:	45a8      	cmp	r8, r5
 800ad3c:	bf38      	it	cc
 800ad3e:	2100      	movcc	r1, #0
 800ad40:	440b      	add	r3, r1
 800ad42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad46:	b191      	cbz	r1, 800ad6e <__mdiff+0x11a>
 800ad48:	6117      	str	r7, [r2, #16]
 800ad4a:	e79d      	b.n	800ac88 <__mdiff+0x34>
 800ad4c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad50:	46e6      	mov	lr, ip
 800ad52:	0c08      	lsrs	r0, r1, #16
 800ad54:	fa1c fc81 	uxtah	ip, ip, r1
 800ad58:	4471      	add	r1, lr
 800ad5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad5e:	b289      	uxth	r1, r1
 800ad60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad64:	f846 1b04 	str.w	r1, [r6], #4
 800ad68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad6c:	e7dd      	b.n	800ad2a <__mdiff+0xd6>
 800ad6e:	3f01      	subs	r7, #1
 800ad70:	e7e7      	b.n	800ad42 <__mdiff+0xee>
 800ad72:	bf00      	nop
 800ad74:	0800bc1c 	.word	0x0800bc1c
 800ad78:	0800bc2d 	.word	0x0800bc2d

0800ad7c <__d2b>:
 800ad7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad80:	460f      	mov	r7, r1
 800ad82:	2101      	movs	r1, #1
 800ad84:	ec59 8b10 	vmov	r8, r9, d0
 800ad88:	4616      	mov	r6, r2
 800ad8a:	f7ff fcd5 	bl	800a738 <_Balloc>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	b930      	cbnz	r0, 800ada0 <__d2b+0x24>
 800ad92:	4602      	mov	r2, r0
 800ad94:	4b23      	ldr	r3, [pc, #140]	@ (800ae24 <__d2b+0xa8>)
 800ad96:	4824      	ldr	r0, [pc, #144]	@ (800ae28 <__d2b+0xac>)
 800ad98:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad9c:	f000 fa82 	bl	800b2a4 <__assert_func>
 800ada0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ada4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ada8:	b10d      	cbz	r5, 800adae <__d2b+0x32>
 800adaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adae:	9301      	str	r3, [sp, #4]
 800adb0:	f1b8 0300 	subs.w	r3, r8, #0
 800adb4:	d023      	beq.n	800adfe <__d2b+0x82>
 800adb6:	4668      	mov	r0, sp
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	f7ff fd84 	bl	800a8c6 <__lo0bits>
 800adbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800adc2:	b1d0      	cbz	r0, 800adfa <__d2b+0x7e>
 800adc4:	f1c0 0320 	rsb	r3, r0, #32
 800adc8:	fa02 f303 	lsl.w	r3, r2, r3
 800adcc:	430b      	orrs	r3, r1
 800adce:	40c2      	lsrs	r2, r0
 800add0:	6163      	str	r3, [r4, #20]
 800add2:	9201      	str	r2, [sp, #4]
 800add4:	9b01      	ldr	r3, [sp, #4]
 800add6:	61a3      	str	r3, [r4, #24]
 800add8:	2b00      	cmp	r3, #0
 800adda:	bf0c      	ite	eq
 800addc:	2201      	moveq	r2, #1
 800adde:	2202      	movne	r2, #2
 800ade0:	6122      	str	r2, [r4, #16]
 800ade2:	b1a5      	cbz	r5, 800ae0e <__d2b+0x92>
 800ade4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ade8:	4405      	add	r5, r0
 800adea:	603d      	str	r5, [r7, #0]
 800adec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800adf0:	6030      	str	r0, [r6, #0]
 800adf2:	4620      	mov	r0, r4
 800adf4:	b003      	add	sp, #12
 800adf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adfa:	6161      	str	r1, [r4, #20]
 800adfc:	e7ea      	b.n	800add4 <__d2b+0x58>
 800adfe:	a801      	add	r0, sp, #4
 800ae00:	f7ff fd61 	bl	800a8c6 <__lo0bits>
 800ae04:	9b01      	ldr	r3, [sp, #4]
 800ae06:	6163      	str	r3, [r4, #20]
 800ae08:	3020      	adds	r0, #32
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	e7e8      	b.n	800ade0 <__d2b+0x64>
 800ae0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae16:	6038      	str	r0, [r7, #0]
 800ae18:	6918      	ldr	r0, [r3, #16]
 800ae1a:	f7ff fd35 	bl	800a888 <__hi0bits>
 800ae1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae22:	e7e5      	b.n	800adf0 <__d2b+0x74>
 800ae24:	0800bc1c 	.word	0x0800bc1c
 800ae28:	0800bc2d 	.word	0x0800bc2d

0800ae2c <__ssputs_r>:
 800ae2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae30:	688e      	ldr	r6, [r1, #8]
 800ae32:	461f      	mov	r7, r3
 800ae34:	42be      	cmp	r6, r7
 800ae36:	680b      	ldr	r3, [r1, #0]
 800ae38:	4682      	mov	sl, r0
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	4690      	mov	r8, r2
 800ae3e:	d82d      	bhi.n	800ae9c <__ssputs_r+0x70>
 800ae40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae48:	d026      	beq.n	800ae98 <__ssputs_r+0x6c>
 800ae4a:	6965      	ldr	r5, [r4, #20]
 800ae4c:	6909      	ldr	r1, [r1, #16]
 800ae4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae52:	eba3 0901 	sub.w	r9, r3, r1
 800ae56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae5a:	1c7b      	adds	r3, r7, #1
 800ae5c:	444b      	add	r3, r9
 800ae5e:	106d      	asrs	r5, r5, #1
 800ae60:	429d      	cmp	r5, r3
 800ae62:	bf38      	it	cc
 800ae64:	461d      	movcc	r5, r3
 800ae66:	0553      	lsls	r3, r2, #21
 800ae68:	d527      	bpl.n	800aeba <__ssputs_r+0x8e>
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	f7ff fbd8 	bl	800a620 <_malloc_r>
 800ae70:	4606      	mov	r6, r0
 800ae72:	b360      	cbz	r0, 800aece <__ssputs_r+0xa2>
 800ae74:	6921      	ldr	r1, [r4, #16]
 800ae76:	464a      	mov	r2, r9
 800ae78:	f000 fa06 	bl	800b288 <memcpy>
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae86:	81a3      	strh	r3, [r4, #12]
 800ae88:	6126      	str	r6, [r4, #16]
 800ae8a:	6165      	str	r5, [r4, #20]
 800ae8c:	444e      	add	r6, r9
 800ae8e:	eba5 0509 	sub.w	r5, r5, r9
 800ae92:	6026      	str	r6, [r4, #0]
 800ae94:	60a5      	str	r5, [r4, #8]
 800ae96:	463e      	mov	r6, r7
 800ae98:	42be      	cmp	r6, r7
 800ae9a:	d900      	bls.n	800ae9e <__ssputs_r+0x72>
 800ae9c:	463e      	mov	r6, r7
 800ae9e:	6820      	ldr	r0, [r4, #0]
 800aea0:	4632      	mov	r2, r6
 800aea2:	4641      	mov	r1, r8
 800aea4:	f000 f9c6 	bl	800b234 <memmove>
 800aea8:	68a3      	ldr	r3, [r4, #8]
 800aeaa:	1b9b      	subs	r3, r3, r6
 800aeac:	60a3      	str	r3, [r4, #8]
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	4433      	add	r3, r6
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeba:	462a      	mov	r2, r5
 800aebc:	f000 fa36 	bl	800b32c <_realloc_r>
 800aec0:	4606      	mov	r6, r0
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d1e0      	bne.n	800ae88 <__ssputs_r+0x5c>
 800aec6:	6921      	ldr	r1, [r4, #16]
 800aec8:	4650      	mov	r0, sl
 800aeca:	f7ff fb35 	bl	800a538 <_free_r>
 800aece:	230c      	movs	r3, #12
 800aed0:	f8ca 3000 	str.w	r3, [sl]
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	f04f 30ff 	mov.w	r0, #4294967295
 800aee0:	e7e9      	b.n	800aeb6 <__ssputs_r+0x8a>
	...

0800aee4 <_svfiprintf_r>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	4698      	mov	r8, r3
 800aeea:	898b      	ldrh	r3, [r1, #12]
 800aeec:	061b      	lsls	r3, r3, #24
 800aeee:	b09d      	sub	sp, #116	@ 0x74
 800aef0:	4607      	mov	r7, r0
 800aef2:	460d      	mov	r5, r1
 800aef4:	4614      	mov	r4, r2
 800aef6:	d510      	bpl.n	800af1a <_svfiprintf_r+0x36>
 800aef8:	690b      	ldr	r3, [r1, #16]
 800aefa:	b973      	cbnz	r3, 800af1a <_svfiprintf_r+0x36>
 800aefc:	2140      	movs	r1, #64	@ 0x40
 800aefe:	f7ff fb8f 	bl	800a620 <_malloc_r>
 800af02:	6028      	str	r0, [r5, #0]
 800af04:	6128      	str	r0, [r5, #16]
 800af06:	b930      	cbnz	r0, 800af16 <_svfiprintf_r+0x32>
 800af08:	230c      	movs	r3, #12
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	f04f 30ff 	mov.w	r0, #4294967295
 800af10:	b01d      	add	sp, #116	@ 0x74
 800af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af16:	2340      	movs	r3, #64	@ 0x40
 800af18:	616b      	str	r3, [r5, #20]
 800af1a:	2300      	movs	r3, #0
 800af1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af1e:	2320      	movs	r3, #32
 800af20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af24:	f8cd 800c 	str.w	r8, [sp, #12]
 800af28:	2330      	movs	r3, #48	@ 0x30
 800af2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0c8 <_svfiprintf_r+0x1e4>
 800af2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af32:	f04f 0901 	mov.w	r9, #1
 800af36:	4623      	mov	r3, r4
 800af38:	469a      	mov	sl, r3
 800af3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af3e:	b10a      	cbz	r2, 800af44 <_svfiprintf_r+0x60>
 800af40:	2a25      	cmp	r2, #37	@ 0x25
 800af42:	d1f9      	bne.n	800af38 <_svfiprintf_r+0x54>
 800af44:	ebba 0b04 	subs.w	fp, sl, r4
 800af48:	d00b      	beq.n	800af62 <_svfiprintf_r+0x7e>
 800af4a:	465b      	mov	r3, fp
 800af4c:	4622      	mov	r2, r4
 800af4e:	4629      	mov	r1, r5
 800af50:	4638      	mov	r0, r7
 800af52:	f7ff ff6b 	bl	800ae2c <__ssputs_r>
 800af56:	3001      	adds	r0, #1
 800af58:	f000 80a7 	beq.w	800b0aa <_svfiprintf_r+0x1c6>
 800af5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af5e:	445a      	add	r2, fp
 800af60:	9209      	str	r2, [sp, #36]	@ 0x24
 800af62:	f89a 3000 	ldrb.w	r3, [sl]
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 809f 	beq.w	800b0aa <_svfiprintf_r+0x1c6>
 800af6c:	2300      	movs	r3, #0
 800af6e:	f04f 32ff 	mov.w	r2, #4294967295
 800af72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af76:	f10a 0a01 	add.w	sl, sl, #1
 800af7a:	9304      	str	r3, [sp, #16]
 800af7c:	9307      	str	r3, [sp, #28]
 800af7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af82:	931a      	str	r3, [sp, #104]	@ 0x68
 800af84:	4654      	mov	r4, sl
 800af86:	2205      	movs	r2, #5
 800af88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af8c:	484e      	ldr	r0, [pc, #312]	@ (800b0c8 <_svfiprintf_r+0x1e4>)
 800af8e:	f7f5 f937 	bl	8000200 <memchr>
 800af92:	9a04      	ldr	r2, [sp, #16]
 800af94:	b9d8      	cbnz	r0, 800afce <_svfiprintf_r+0xea>
 800af96:	06d0      	lsls	r0, r2, #27
 800af98:	bf44      	itt	mi
 800af9a:	2320      	movmi	r3, #32
 800af9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afa0:	0711      	lsls	r1, r2, #28
 800afa2:	bf44      	itt	mi
 800afa4:	232b      	movmi	r3, #43	@ 0x2b
 800afa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afaa:	f89a 3000 	ldrb.w	r3, [sl]
 800afae:	2b2a      	cmp	r3, #42	@ 0x2a
 800afb0:	d015      	beq.n	800afde <_svfiprintf_r+0xfa>
 800afb2:	9a07      	ldr	r2, [sp, #28]
 800afb4:	4654      	mov	r4, sl
 800afb6:	2000      	movs	r0, #0
 800afb8:	f04f 0c0a 	mov.w	ip, #10
 800afbc:	4621      	mov	r1, r4
 800afbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afc2:	3b30      	subs	r3, #48	@ 0x30
 800afc4:	2b09      	cmp	r3, #9
 800afc6:	d94b      	bls.n	800b060 <_svfiprintf_r+0x17c>
 800afc8:	b1b0      	cbz	r0, 800aff8 <_svfiprintf_r+0x114>
 800afca:	9207      	str	r2, [sp, #28]
 800afcc:	e014      	b.n	800aff8 <_svfiprintf_r+0x114>
 800afce:	eba0 0308 	sub.w	r3, r0, r8
 800afd2:	fa09 f303 	lsl.w	r3, r9, r3
 800afd6:	4313      	orrs	r3, r2
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	46a2      	mov	sl, r4
 800afdc:	e7d2      	b.n	800af84 <_svfiprintf_r+0xa0>
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	1d19      	adds	r1, r3, #4
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	9103      	str	r1, [sp, #12]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	bfbb      	ittet	lt
 800afea:	425b      	neglt	r3, r3
 800afec:	f042 0202 	orrlt.w	r2, r2, #2
 800aff0:	9307      	strge	r3, [sp, #28]
 800aff2:	9307      	strlt	r3, [sp, #28]
 800aff4:	bfb8      	it	lt
 800aff6:	9204      	strlt	r2, [sp, #16]
 800aff8:	7823      	ldrb	r3, [r4, #0]
 800affa:	2b2e      	cmp	r3, #46	@ 0x2e
 800affc:	d10a      	bne.n	800b014 <_svfiprintf_r+0x130>
 800affe:	7863      	ldrb	r3, [r4, #1]
 800b000:	2b2a      	cmp	r3, #42	@ 0x2a
 800b002:	d132      	bne.n	800b06a <_svfiprintf_r+0x186>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	1d1a      	adds	r2, r3, #4
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	9203      	str	r2, [sp, #12]
 800b00c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b010:	3402      	adds	r4, #2
 800b012:	9305      	str	r3, [sp, #20]
 800b014:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0d8 <_svfiprintf_r+0x1f4>
 800b018:	7821      	ldrb	r1, [r4, #0]
 800b01a:	2203      	movs	r2, #3
 800b01c:	4650      	mov	r0, sl
 800b01e:	f7f5 f8ef 	bl	8000200 <memchr>
 800b022:	b138      	cbz	r0, 800b034 <_svfiprintf_r+0x150>
 800b024:	9b04      	ldr	r3, [sp, #16]
 800b026:	eba0 000a 	sub.w	r0, r0, sl
 800b02a:	2240      	movs	r2, #64	@ 0x40
 800b02c:	4082      	lsls	r2, r0
 800b02e:	4313      	orrs	r3, r2
 800b030:	3401      	adds	r4, #1
 800b032:	9304      	str	r3, [sp, #16]
 800b034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b038:	4824      	ldr	r0, [pc, #144]	@ (800b0cc <_svfiprintf_r+0x1e8>)
 800b03a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b03e:	2206      	movs	r2, #6
 800b040:	f7f5 f8de 	bl	8000200 <memchr>
 800b044:	2800      	cmp	r0, #0
 800b046:	d036      	beq.n	800b0b6 <_svfiprintf_r+0x1d2>
 800b048:	4b21      	ldr	r3, [pc, #132]	@ (800b0d0 <_svfiprintf_r+0x1ec>)
 800b04a:	bb1b      	cbnz	r3, 800b094 <_svfiprintf_r+0x1b0>
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	3307      	adds	r3, #7
 800b050:	f023 0307 	bic.w	r3, r3, #7
 800b054:	3308      	adds	r3, #8
 800b056:	9303      	str	r3, [sp, #12]
 800b058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b05a:	4433      	add	r3, r6
 800b05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b05e:	e76a      	b.n	800af36 <_svfiprintf_r+0x52>
 800b060:	fb0c 3202 	mla	r2, ip, r2, r3
 800b064:	460c      	mov	r4, r1
 800b066:	2001      	movs	r0, #1
 800b068:	e7a8      	b.n	800afbc <_svfiprintf_r+0xd8>
 800b06a:	2300      	movs	r3, #0
 800b06c:	3401      	adds	r4, #1
 800b06e:	9305      	str	r3, [sp, #20]
 800b070:	4619      	mov	r1, r3
 800b072:	f04f 0c0a 	mov.w	ip, #10
 800b076:	4620      	mov	r0, r4
 800b078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b07c:	3a30      	subs	r2, #48	@ 0x30
 800b07e:	2a09      	cmp	r2, #9
 800b080:	d903      	bls.n	800b08a <_svfiprintf_r+0x1a6>
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0c6      	beq.n	800b014 <_svfiprintf_r+0x130>
 800b086:	9105      	str	r1, [sp, #20]
 800b088:	e7c4      	b.n	800b014 <_svfiprintf_r+0x130>
 800b08a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b08e:	4604      	mov	r4, r0
 800b090:	2301      	movs	r3, #1
 800b092:	e7f0      	b.n	800b076 <_svfiprintf_r+0x192>
 800b094:	ab03      	add	r3, sp, #12
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	462a      	mov	r2, r5
 800b09a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0d4 <_svfiprintf_r+0x1f0>)
 800b09c:	a904      	add	r1, sp, #16
 800b09e:	4638      	mov	r0, r7
 800b0a0:	f7fd fe92 	bl	8008dc8 <_printf_float>
 800b0a4:	1c42      	adds	r2, r0, #1
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	d1d6      	bne.n	800b058 <_svfiprintf_r+0x174>
 800b0aa:	89ab      	ldrh	r3, [r5, #12]
 800b0ac:	065b      	lsls	r3, r3, #25
 800b0ae:	f53f af2d 	bmi.w	800af0c <_svfiprintf_r+0x28>
 800b0b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0b4:	e72c      	b.n	800af10 <_svfiprintf_r+0x2c>
 800b0b6:	ab03      	add	r3, sp, #12
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	462a      	mov	r2, r5
 800b0bc:	4b05      	ldr	r3, [pc, #20]	@ (800b0d4 <_svfiprintf_r+0x1f0>)
 800b0be:	a904      	add	r1, sp, #16
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	f7fe f919 	bl	80092f8 <_printf_i>
 800b0c6:	e7ed      	b.n	800b0a4 <_svfiprintf_r+0x1c0>
 800b0c8:	0800bc86 	.word	0x0800bc86
 800b0cc:	0800bc90 	.word	0x0800bc90
 800b0d0:	08008dc9 	.word	0x08008dc9
 800b0d4:	0800ae2d 	.word	0x0800ae2d
 800b0d8:	0800bc8c 	.word	0x0800bc8c

0800b0dc <__sflush_r>:
 800b0dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e4:	0716      	lsls	r6, r2, #28
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	d454      	bmi.n	800b196 <__sflush_r+0xba>
 800b0ec:	684b      	ldr	r3, [r1, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	dc02      	bgt.n	800b0f8 <__sflush_r+0x1c>
 800b0f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	dd48      	ble.n	800b18a <__sflush_r+0xae>
 800b0f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0fa:	2e00      	cmp	r6, #0
 800b0fc:	d045      	beq.n	800b18a <__sflush_r+0xae>
 800b0fe:	2300      	movs	r3, #0
 800b100:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b104:	682f      	ldr	r7, [r5, #0]
 800b106:	6a21      	ldr	r1, [r4, #32]
 800b108:	602b      	str	r3, [r5, #0]
 800b10a:	d030      	beq.n	800b16e <__sflush_r+0x92>
 800b10c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b10e:	89a3      	ldrh	r3, [r4, #12]
 800b110:	0759      	lsls	r1, r3, #29
 800b112:	d505      	bpl.n	800b120 <__sflush_r+0x44>
 800b114:	6863      	ldr	r3, [r4, #4]
 800b116:	1ad2      	subs	r2, r2, r3
 800b118:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b11a:	b10b      	cbz	r3, 800b120 <__sflush_r+0x44>
 800b11c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b11e:	1ad2      	subs	r2, r2, r3
 800b120:	2300      	movs	r3, #0
 800b122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b124:	6a21      	ldr	r1, [r4, #32]
 800b126:	4628      	mov	r0, r5
 800b128:	47b0      	blx	r6
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	d106      	bne.n	800b13e <__sflush_r+0x62>
 800b130:	6829      	ldr	r1, [r5, #0]
 800b132:	291d      	cmp	r1, #29
 800b134:	d82b      	bhi.n	800b18e <__sflush_r+0xb2>
 800b136:	4a2a      	ldr	r2, [pc, #168]	@ (800b1e0 <__sflush_r+0x104>)
 800b138:	40ca      	lsrs	r2, r1
 800b13a:	07d6      	lsls	r6, r2, #31
 800b13c:	d527      	bpl.n	800b18e <__sflush_r+0xb2>
 800b13e:	2200      	movs	r2, #0
 800b140:	6062      	str	r2, [r4, #4]
 800b142:	04d9      	lsls	r1, r3, #19
 800b144:	6922      	ldr	r2, [r4, #16]
 800b146:	6022      	str	r2, [r4, #0]
 800b148:	d504      	bpl.n	800b154 <__sflush_r+0x78>
 800b14a:	1c42      	adds	r2, r0, #1
 800b14c:	d101      	bne.n	800b152 <__sflush_r+0x76>
 800b14e:	682b      	ldr	r3, [r5, #0]
 800b150:	b903      	cbnz	r3, 800b154 <__sflush_r+0x78>
 800b152:	6560      	str	r0, [r4, #84]	@ 0x54
 800b154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b156:	602f      	str	r7, [r5, #0]
 800b158:	b1b9      	cbz	r1, 800b18a <__sflush_r+0xae>
 800b15a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b15e:	4299      	cmp	r1, r3
 800b160:	d002      	beq.n	800b168 <__sflush_r+0x8c>
 800b162:	4628      	mov	r0, r5
 800b164:	f7ff f9e8 	bl	800a538 <_free_r>
 800b168:	2300      	movs	r3, #0
 800b16a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b16c:	e00d      	b.n	800b18a <__sflush_r+0xae>
 800b16e:	2301      	movs	r3, #1
 800b170:	4628      	mov	r0, r5
 800b172:	47b0      	blx	r6
 800b174:	4602      	mov	r2, r0
 800b176:	1c50      	adds	r0, r2, #1
 800b178:	d1c9      	bne.n	800b10e <__sflush_r+0x32>
 800b17a:	682b      	ldr	r3, [r5, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d0c6      	beq.n	800b10e <__sflush_r+0x32>
 800b180:	2b1d      	cmp	r3, #29
 800b182:	d001      	beq.n	800b188 <__sflush_r+0xac>
 800b184:	2b16      	cmp	r3, #22
 800b186:	d11e      	bne.n	800b1c6 <__sflush_r+0xea>
 800b188:	602f      	str	r7, [r5, #0]
 800b18a:	2000      	movs	r0, #0
 800b18c:	e022      	b.n	800b1d4 <__sflush_r+0xf8>
 800b18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b192:	b21b      	sxth	r3, r3
 800b194:	e01b      	b.n	800b1ce <__sflush_r+0xf2>
 800b196:	690f      	ldr	r7, [r1, #16]
 800b198:	2f00      	cmp	r7, #0
 800b19a:	d0f6      	beq.n	800b18a <__sflush_r+0xae>
 800b19c:	0793      	lsls	r3, r2, #30
 800b19e:	680e      	ldr	r6, [r1, #0]
 800b1a0:	bf08      	it	eq
 800b1a2:	694b      	ldreq	r3, [r1, #20]
 800b1a4:	600f      	str	r7, [r1, #0]
 800b1a6:	bf18      	it	ne
 800b1a8:	2300      	movne	r3, #0
 800b1aa:	eba6 0807 	sub.w	r8, r6, r7
 800b1ae:	608b      	str	r3, [r1, #8]
 800b1b0:	f1b8 0f00 	cmp.w	r8, #0
 800b1b4:	dde9      	ble.n	800b18a <__sflush_r+0xae>
 800b1b6:	6a21      	ldr	r1, [r4, #32]
 800b1b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1ba:	4643      	mov	r3, r8
 800b1bc:	463a      	mov	r2, r7
 800b1be:	4628      	mov	r0, r5
 800b1c0:	47b0      	blx	r6
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	dc08      	bgt.n	800b1d8 <__sflush_r+0xfc>
 800b1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ce:	81a3      	strh	r3, [r4, #12]
 800b1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d8:	4407      	add	r7, r0
 800b1da:	eba8 0800 	sub.w	r8, r8, r0
 800b1de:	e7e7      	b.n	800b1b0 <__sflush_r+0xd4>
 800b1e0:	20400001 	.word	0x20400001

0800b1e4 <_fflush_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	690b      	ldr	r3, [r1, #16]
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	b913      	cbnz	r3, 800b1f4 <_fflush_r+0x10>
 800b1ee:	2500      	movs	r5, #0
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	bd38      	pop	{r3, r4, r5, pc}
 800b1f4:	b118      	cbz	r0, 800b1fe <_fflush_r+0x1a>
 800b1f6:	6a03      	ldr	r3, [r0, #32]
 800b1f8:	b90b      	cbnz	r3, 800b1fe <_fflush_r+0x1a>
 800b1fa:	f7fe fa27 	bl	800964c <__sinit>
 800b1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0f3      	beq.n	800b1ee <_fflush_r+0xa>
 800b206:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b208:	07d0      	lsls	r0, r2, #31
 800b20a:	d404      	bmi.n	800b216 <_fflush_r+0x32>
 800b20c:	0599      	lsls	r1, r3, #22
 800b20e:	d402      	bmi.n	800b216 <_fflush_r+0x32>
 800b210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b212:	f7fe fb34 	bl	800987e <__retarget_lock_acquire_recursive>
 800b216:	4628      	mov	r0, r5
 800b218:	4621      	mov	r1, r4
 800b21a:	f7ff ff5f 	bl	800b0dc <__sflush_r>
 800b21e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b220:	07da      	lsls	r2, r3, #31
 800b222:	4605      	mov	r5, r0
 800b224:	d4e4      	bmi.n	800b1f0 <_fflush_r+0xc>
 800b226:	89a3      	ldrh	r3, [r4, #12]
 800b228:	059b      	lsls	r3, r3, #22
 800b22a:	d4e1      	bmi.n	800b1f0 <_fflush_r+0xc>
 800b22c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b22e:	f7fe fb27 	bl	8009880 <__retarget_lock_release_recursive>
 800b232:	e7dd      	b.n	800b1f0 <_fflush_r+0xc>

0800b234 <memmove>:
 800b234:	4288      	cmp	r0, r1
 800b236:	b510      	push	{r4, lr}
 800b238:	eb01 0402 	add.w	r4, r1, r2
 800b23c:	d902      	bls.n	800b244 <memmove+0x10>
 800b23e:	4284      	cmp	r4, r0
 800b240:	4623      	mov	r3, r4
 800b242:	d807      	bhi.n	800b254 <memmove+0x20>
 800b244:	1e43      	subs	r3, r0, #1
 800b246:	42a1      	cmp	r1, r4
 800b248:	d008      	beq.n	800b25c <memmove+0x28>
 800b24a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b24e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b252:	e7f8      	b.n	800b246 <memmove+0x12>
 800b254:	4402      	add	r2, r0
 800b256:	4601      	mov	r1, r0
 800b258:	428a      	cmp	r2, r1
 800b25a:	d100      	bne.n	800b25e <memmove+0x2a>
 800b25c:	bd10      	pop	{r4, pc}
 800b25e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b266:	e7f7      	b.n	800b258 <memmove+0x24>

0800b268 <_sbrk_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d06      	ldr	r5, [pc, #24]	@ (800b284 <_sbrk_r+0x1c>)
 800b26c:	2300      	movs	r3, #0
 800b26e:	4604      	mov	r4, r0
 800b270:	4608      	mov	r0, r1
 800b272:	602b      	str	r3, [r5, #0]
 800b274:	f7f8 fa90 	bl	8003798 <_sbrk>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_sbrk_r+0x1a>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_sbrk_r+0x1a>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	2004056c 	.word	0x2004056c

0800b288 <memcpy>:
 800b288:	440a      	add	r2, r1
 800b28a:	4291      	cmp	r1, r2
 800b28c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b290:	d100      	bne.n	800b294 <memcpy+0xc>
 800b292:	4770      	bx	lr
 800b294:	b510      	push	{r4, lr}
 800b296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b29a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b29e:	4291      	cmp	r1, r2
 800b2a0:	d1f9      	bne.n	800b296 <memcpy+0xe>
 800b2a2:	bd10      	pop	{r4, pc}

0800b2a4 <__assert_func>:
 800b2a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2a6:	4614      	mov	r4, r2
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	4b09      	ldr	r3, [pc, #36]	@ (800b2d0 <__assert_func+0x2c>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	68d8      	ldr	r0, [r3, #12]
 800b2b2:	b14c      	cbz	r4, 800b2c8 <__assert_func+0x24>
 800b2b4:	4b07      	ldr	r3, [pc, #28]	@ (800b2d4 <__assert_func+0x30>)
 800b2b6:	9100      	str	r1, [sp, #0]
 800b2b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2bc:	4906      	ldr	r1, [pc, #24]	@ (800b2d8 <__assert_func+0x34>)
 800b2be:	462b      	mov	r3, r5
 800b2c0:	f000 f870 	bl	800b3a4 <fiprintf>
 800b2c4:	f000 f880 	bl	800b3c8 <abort>
 800b2c8:	4b04      	ldr	r3, [pc, #16]	@ (800b2dc <__assert_func+0x38>)
 800b2ca:	461c      	mov	r4, r3
 800b2cc:	e7f3      	b.n	800b2b6 <__assert_func+0x12>
 800b2ce:	bf00      	nop
 800b2d0:	20040018 	.word	0x20040018
 800b2d4:	0800bca1 	.word	0x0800bca1
 800b2d8:	0800bcae 	.word	0x0800bcae
 800b2dc:	0800bcdc 	.word	0x0800bcdc

0800b2e0 <_calloc_r>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	fba1 5402 	umull	r5, r4, r1, r2
 800b2e6:	b934      	cbnz	r4, 800b2f6 <_calloc_r+0x16>
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7ff f999 	bl	800a620 <_malloc_r>
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	b928      	cbnz	r0, 800b2fe <_calloc_r+0x1e>
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	bd70      	pop	{r4, r5, r6, pc}
 800b2f6:	220c      	movs	r2, #12
 800b2f8:	6002      	str	r2, [r0, #0]
 800b2fa:	2600      	movs	r6, #0
 800b2fc:	e7f9      	b.n	800b2f2 <_calloc_r+0x12>
 800b2fe:	462a      	mov	r2, r5
 800b300:	4621      	mov	r1, r4
 800b302:	f7fe fa3e 	bl	8009782 <memset>
 800b306:	e7f4      	b.n	800b2f2 <_calloc_r+0x12>

0800b308 <__ascii_mbtowc>:
 800b308:	b082      	sub	sp, #8
 800b30a:	b901      	cbnz	r1, 800b30e <__ascii_mbtowc+0x6>
 800b30c:	a901      	add	r1, sp, #4
 800b30e:	b142      	cbz	r2, 800b322 <__ascii_mbtowc+0x1a>
 800b310:	b14b      	cbz	r3, 800b326 <__ascii_mbtowc+0x1e>
 800b312:	7813      	ldrb	r3, [r2, #0]
 800b314:	600b      	str	r3, [r1, #0]
 800b316:	7812      	ldrb	r2, [r2, #0]
 800b318:	1e10      	subs	r0, r2, #0
 800b31a:	bf18      	it	ne
 800b31c:	2001      	movne	r0, #1
 800b31e:	b002      	add	sp, #8
 800b320:	4770      	bx	lr
 800b322:	4610      	mov	r0, r2
 800b324:	e7fb      	b.n	800b31e <__ascii_mbtowc+0x16>
 800b326:	f06f 0001 	mvn.w	r0, #1
 800b32a:	e7f8      	b.n	800b31e <__ascii_mbtowc+0x16>

0800b32c <_realloc_r>:
 800b32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b330:	4607      	mov	r7, r0
 800b332:	4614      	mov	r4, r2
 800b334:	460d      	mov	r5, r1
 800b336:	b921      	cbnz	r1, 800b342 <_realloc_r+0x16>
 800b338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b33c:	4611      	mov	r1, r2
 800b33e:	f7ff b96f 	b.w	800a620 <_malloc_r>
 800b342:	b92a      	cbnz	r2, 800b350 <_realloc_r+0x24>
 800b344:	f7ff f8f8 	bl	800a538 <_free_r>
 800b348:	4625      	mov	r5, r4
 800b34a:	4628      	mov	r0, r5
 800b34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b350:	f000 f841 	bl	800b3d6 <_malloc_usable_size_r>
 800b354:	4284      	cmp	r4, r0
 800b356:	4606      	mov	r6, r0
 800b358:	d802      	bhi.n	800b360 <_realloc_r+0x34>
 800b35a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b35e:	d8f4      	bhi.n	800b34a <_realloc_r+0x1e>
 800b360:	4621      	mov	r1, r4
 800b362:	4638      	mov	r0, r7
 800b364:	f7ff f95c 	bl	800a620 <_malloc_r>
 800b368:	4680      	mov	r8, r0
 800b36a:	b908      	cbnz	r0, 800b370 <_realloc_r+0x44>
 800b36c:	4645      	mov	r5, r8
 800b36e:	e7ec      	b.n	800b34a <_realloc_r+0x1e>
 800b370:	42b4      	cmp	r4, r6
 800b372:	4622      	mov	r2, r4
 800b374:	4629      	mov	r1, r5
 800b376:	bf28      	it	cs
 800b378:	4632      	movcs	r2, r6
 800b37a:	f7ff ff85 	bl	800b288 <memcpy>
 800b37e:	4629      	mov	r1, r5
 800b380:	4638      	mov	r0, r7
 800b382:	f7ff f8d9 	bl	800a538 <_free_r>
 800b386:	e7f1      	b.n	800b36c <_realloc_r+0x40>

0800b388 <__ascii_wctomb>:
 800b388:	4603      	mov	r3, r0
 800b38a:	4608      	mov	r0, r1
 800b38c:	b141      	cbz	r1, 800b3a0 <__ascii_wctomb+0x18>
 800b38e:	2aff      	cmp	r2, #255	@ 0xff
 800b390:	d904      	bls.n	800b39c <__ascii_wctomb+0x14>
 800b392:	228a      	movs	r2, #138	@ 0x8a
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	f04f 30ff 	mov.w	r0, #4294967295
 800b39a:	4770      	bx	lr
 800b39c:	700a      	strb	r2, [r1, #0]
 800b39e:	2001      	movs	r0, #1
 800b3a0:	4770      	bx	lr
	...

0800b3a4 <fiprintf>:
 800b3a4:	b40e      	push	{r1, r2, r3}
 800b3a6:	b503      	push	{r0, r1, lr}
 800b3a8:	4601      	mov	r1, r0
 800b3aa:	ab03      	add	r3, sp, #12
 800b3ac:	4805      	ldr	r0, [pc, #20]	@ (800b3c4 <fiprintf+0x20>)
 800b3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3b2:	6800      	ldr	r0, [r0, #0]
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	f000 f83f 	bl	800b438 <_vfiprintf_r>
 800b3ba:	b002      	add	sp, #8
 800b3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3c0:	b003      	add	sp, #12
 800b3c2:	4770      	bx	lr
 800b3c4:	20040018 	.word	0x20040018

0800b3c8 <abort>:
 800b3c8:	b508      	push	{r3, lr}
 800b3ca:	2006      	movs	r0, #6
 800b3cc:	f000 fa08 	bl	800b7e0 <raise>
 800b3d0:	2001      	movs	r0, #1
 800b3d2:	f7f8 f968 	bl	80036a6 <_exit>

0800b3d6 <_malloc_usable_size_r>:
 800b3d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3da:	1f18      	subs	r0, r3, #4
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	bfbc      	itt	lt
 800b3e0:	580b      	ldrlt	r3, [r1, r0]
 800b3e2:	18c0      	addlt	r0, r0, r3
 800b3e4:	4770      	bx	lr

0800b3e6 <__sfputc_r>:
 800b3e6:	6893      	ldr	r3, [r2, #8]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	b410      	push	{r4}
 800b3ee:	6093      	str	r3, [r2, #8]
 800b3f0:	da08      	bge.n	800b404 <__sfputc_r+0x1e>
 800b3f2:	6994      	ldr	r4, [r2, #24]
 800b3f4:	42a3      	cmp	r3, r4
 800b3f6:	db01      	blt.n	800b3fc <__sfputc_r+0x16>
 800b3f8:	290a      	cmp	r1, #10
 800b3fa:	d103      	bne.n	800b404 <__sfputc_r+0x1e>
 800b3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b400:	f000 b932 	b.w	800b668 <__swbuf_r>
 800b404:	6813      	ldr	r3, [r2, #0]
 800b406:	1c58      	adds	r0, r3, #1
 800b408:	6010      	str	r0, [r2, #0]
 800b40a:	7019      	strb	r1, [r3, #0]
 800b40c:	4608      	mov	r0, r1
 800b40e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <__sfputs_r>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	4606      	mov	r6, r0
 800b418:	460f      	mov	r7, r1
 800b41a:	4614      	mov	r4, r2
 800b41c:	18d5      	adds	r5, r2, r3
 800b41e:	42ac      	cmp	r4, r5
 800b420:	d101      	bne.n	800b426 <__sfputs_r+0x12>
 800b422:	2000      	movs	r0, #0
 800b424:	e007      	b.n	800b436 <__sfputs_r+0x22>
 800b426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b42a:	463a      	mov	r2, r7
 800b42c:	4630      	mov	r0, r6
 800b42e:	f7ff ffda 	bl	800b3e6 <__sfputc_r>
 800b432:	1c43      	adds	r3, r0, #1
 800b434:	d1f3      	bne.n	800b41e <__sfputs_r+0xa>
 800b436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b438 <_vfiprintf_r>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	460d      	mov	r5, r1
 800b43e:	b09d      	sub	sp, #116	@ 0x74
 800b440:	4614      	mov	r4, r2
 800b442:	4698      	mov	r8, r3
 800b444:	4606      	mov	r6, r0
 800b446:	b118      	cbz	r0, 800b450 <_vfiprintf_r+0x18>
 800b448:	6a03      	ldr	r3, [r0, #32]
 800b44a:	b90b      	cbnz	r3, 800b450 <_vfiprintf_r+0x18>
 800b44c:	f7fe f8fe 	bl	800964c <__sinit>
 800b450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b452:	07d9      	lsls	r1, r3, #31
 800b454:	d405      	bmi.n	800b462 <_vfiprintf_r+0x2a>
 800b456:	89ab      	ldrh	r3, [r5, #12]
 800b458:	059a      	lsls	r2, r3, #22
 800b45a:	d402      	bmi.n	800b462 <_vfiprintf_r+0x2a>
 800b45c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b45e:	f7fe fa0e 	bl	800987e <__retarget_lock_acquire_recursive>
 800b462:	89ab      	ldrh	r3, [r5, #12]
 800b464:	071b      	lsls	r3, r3, #28
 800b466:	d501      	bpl.n	800b46c <_vfiprintf_r+0x34>
 800b468:	692b      	ldr	r3, [r5, #16]
 800b46a:	b99b      	cbnz	r3, 800b494 <_vfiprintf_r+0x5c>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4630      	mov	r0, r6
 800b470:	f000 f938 	bl	800b6e4 <__swsetup_r>
 800b474:	b170      	cbz	r0, 800b494 <_vfiprintf_r+0x5c>
 800b476:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b478:	07dc      	lsls	r4, r3, #31
 800b47a:	d504      	bpl.n	800b486 <_vfiprintf_r+0x4e>
 800b47c:	f04f 30ff 	mov.w	r0, #4294967295
 800b480:	b01d      	add	sp, #116	@ 0x74
 800b482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b486:	89ab      	ldrh	r3, [r5, #12]
 800b488:	0598      	lsls	r0, r3, #22
 800b48a:	d4f7      	bmi.n	800b47c <_vfiprintf_r+0x44>
 800b48c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b48e:	f7fe f9f7 	bl	8009880 <__retarget_lock_release_recursive>
 800b492:	e7f3      	b.n	800b47c <_vfiprintf_r+0x44>
 800b494:	2300      	movs	r3, #0
 800b496:	9309      	str	r3, [sp, #36]	@ 0x24
 800b498:	2320      	movs	r3, #32
 800b49a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b49e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4a2:	2330      	movs	r3, #48	@ 0x30
 800b4a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b654 <_vfiprintf_r+0x21c>
 800b4a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4ac:	f04f 0901 	mov.w	r9, #1
 800b4b0:	4623      	mov	r3, r4
 800b4b2:	469a      	mov	sl, r3
 800b4b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4b8:	b10a      	cbz	r2, 800b4be <_vfiprintf_r+0x86>
 800b4ba:	2a25      	cmp	r2, #37	@ 0x25
 800b4bc:	d1f9      	bne.n	800b4b2 <_vfiprintf_r+0x7a>
 800b4be:	ebba 0b04 	subs.w	fp, sl, r4
 800b4c2:	d00b      	beq.n	800b4dc <_vfiprintf_r+0xa4>
 800b4c4:	465b      	mov	r3, fp
 800b4c6:	4622      	mov	r2, r4
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	f7ff ffa2 	bl	800b414 <__sfputs_r>
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	f000 80a7 	beq.w	800b624 <_vfiprintf_r+0x1ec>
 800b4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4d8:	445a      	add	r2, fp
 800b4da:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f000 809f 	beq.w	800b624 <_vfiprintf_r+0x1ec>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4f0:	f10a 0a01 	add.w	sl, sl, #1
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	9307      	str	r3, [sp, #28]
 800b4f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4fe:	4654      	mov	r4, sl
 800b500:	2205      	movs	r2, #5
 800b502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b506:	4853      	ldr	r0, [pc, #332]	@ (800b654 <_vfiprintf_r+0x21c>)
 800b508:	f7f4 fe7a 	bl	8000200 <memchr>
 800b50c:	9a04      	ldr	r2, [sp, #16]
 800b50e:	b9d8      	cbnz	r0, 800b548 <_vfiprintf_r+0x110>
 800b510:	06d1      	lsls	r1, r2, #27
 800b512:	bf44      	itt	mi
 800b514:	2320      	movmi	r3, #32
 800b516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b51a:	0713      	lsls	r3, r2, #28
 800b51c:	bf44      	itt	mi
 800b51e:	232b      	movmi	r3, #43	@ 0x2b
 800b520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b524:	f89a 3000 	ldrb.w	r3, [sl]
 800b528:	2b2a      	cmp	r3, #42	@ 0x2a
 800b52a:	d015      	beq.n	800b558 <_vfiprintf_r+0x120>
 800b52c:	9a07      	ldr	r2, [sp, #28]
 800b52e:	4654      	mov	r4, sl
 800b530:	2000      	movs	r0, #0
 800b532:	f04f 0c0a 	mov.w	ip, #10
 800b536:	4621      	mov	r1, r4
 800b538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b53c:	3b30      	subs	r3, #48	@ 0x30
 800b53e:	2b09      	cmp	r3, #9
 800b540:	d94b      	bls.n	800b5da <_vfiprintf_r+0x1a2>
 800b542:	b1b0      	cbz	r0, 800b572 <_vfiprintf_r+0x13a>
 800b544:	9207      	str	r2, [sp, #28]
 800b546:	e014      	b.n	800b572 <_vfiprintf_r+0x13a>
 800b548:	eba0 0308 	sub.w	r3, r0, r8
 800b54c:	fa09 f303 	lsl.w	r3, r9, r3
 800b550:	4313      	orrs	r3, r2
 800b552:	9304      	str	r3, [sp, #16]
 800b554:	46a2      	mov	sl, r4
 800b556:	e7d2      	b.n	800b4fe <_vfiprintf_r+0xc6>
 800b558:	9b03      	ldr	r3, [sp, #12]
 800b55a:	1d19      	adds	r1, r3, #4
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	9103      	str	r1, [sp, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	bfbb      	ittet	lt
 800b564:	425b      	neglt	r3, r3
 800b566:	f042 0202 	orrlt.w	r2, r2, #2
 800b56a:	9307      	strge	r3, [sp, #28]
 800b56c:	9307      	strlt	r3, [sp, #28]
 800b56e:	bfb8      	it	lt
 800b570:	9204      	strlt	r2, [sp, #16]
 800b572:	7823      	ldrb	r3, [r4, #0]
 800b574:	2b2e      	cmp	r3, #46	@ 0x2e
 800b576:	d10a      	bne.n	800b58e <_vfiprintf_r+0x156>
 800b578:	7863      	ldrb	r3, [r4, #1]
 800b57a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b57c:	d132      	bne.n	800b5e4 <_vfiprintf_r+0x1ac>
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	1d1a      	adds	r2, r3, #4
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	9203      	str	r2, [sp, #12]
 800b586:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b58a:	3402      	adds	r4, #2
 800b58c:	9305      	str	r3, [sp, #20]
 800b58e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b664 <_vfiprintf_r+0x22c>
 800b592:	7821      	ldrb	r1, [r4, #0]
 800b594:	2203      	movs	r2, #3
 800b596:	4650      	mov	r0, sl
 800b598:	f7f4 fe32 	bl	8000200 <memchr>
 800b59c:	b138      	cbz	r0, 800b5ae <_vfiprintf_r+0x176>
 800b59e:	9b04      	ldr	r3, [sp, #16]
 800b5a0:	eba0 000a 	sub.w	r0, r0, sl
 800b5a4:	2240      	movs	r2, #64	@ 0x40
 800b5a6:	4082      	lsls	r2, r0
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	3401      	adds	r4, #1
 800b5ac:	9304      	str	r3, [sp, #16]
 800b5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b2:	4829      	ldr	r0, [pc, #164]	@ (800b658 <_vfiprintf_r+0x220>)
 800b5b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5b8:	2206      	movs	r2, #6
 800b5ba:	f7f4 fe21 	bl	8000200 <memchr>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d03f      	beq.n	800b642 <_vfiprintf_r+0x20a>
 800b5c2:	4b26      	ldr	r3, [pc, #152]	@ (800b65c <_vfiprintf_r+0x224>)
 800b5c4:	bb1b      	cbnz	r3, 800b60e <_vfiprintf_r+0x1d6>
 800b5c6:	9b03      	ldr	r3, [sp, #12]
 800b5c8:	3307      	adds	r3, #7
 800b5ca:	f023 0307 	bic.w	r3, r3, #7
 800b5ce:	3308      	adds	r3, #8
 800b5d0:	9303      	str	r3, [sp, #12]
 800b5d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5d4:	443b      	add	r3, r7
 800b5d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5d8:	e76a      	b.n	800b4b0 <_vfiprintf_r+0x78>
 800b5da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5de:	460c      	mov	r4, r1
 800b5e0:	2001      	movs	r0, #1
 800b5e2:	e7a8      	b.n	800b536 <_vfiprintf_r+0xfe>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	3401      	adds	r4, #1
 800b5e8:	9305      	str	r3, [sp, #20]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	f04f 0c0a 	mov.w	ip, #10
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f6:	3a30      	subs	r2, #48	@ 0x30
 800b5f8:	2a09      	cmp	r2, #9
 800b5fa:	d903      	bls.n	800b604 <_vfiprintf_r+0x1cc>
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d0c6      	beq.n	800b58e <_vfiprintf_r+0x156>
 800b600:	9105      	str	r1, [sp, #20]
 800b602:	e7c4      	b.n	800b58e <_vfiprintf_r+0x156>
 800b604:	fb0c 2101 	mla	r1, ip, r1, r2
 800b608:	4604      	mov	r4, r0
 800b60a:	2301      	movs	r3, #1
 800b60c:	e7f0      	b.n	800b5f0 <_vfiprintf_r+0x1b8>
 800b60e:	ab03      	add	r3, sp, #12
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	462a      	mov	r2, r5
 800b614:	4b12      	ldr	r3, [pc, #72]	@ (800b660 <_vfiprintf_r+0x228>)
 800b616:	a904      	add	r1, sp, #16
 800b618:	4630      	mov	r0, r6
 800b61a:	f7fd fbd5 	bl	8008dc8 <_printf_float>
 800b61e:	4607      	mov	r7, r0
 800b620:	1c78      	adds	r0, r7, #1
 800b622:	d1d6      	bne.n	800b5d2 <_vfiprintf_r+0x19a>
 800b624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b626:	07d9      	lsls	r1, r3, #31
 800b628:	d405      	bmi.n	800b636 <_vfiprintf_r+0x1fe>
 800b62a:	89ab      	ldrh	r3, [r5, #12]
 800b62c:	059a      	lsls	r2, r3, #22
 800b62e:	d402      	bmi.n	800b636 <_vfiprintf_r+0x1fe>
 800b630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b632:	f7fe f925 	bl	8009880 <__retarget_lock_release_recursive>
 800b636:	89ab      	ldrh	r3, [r5, #12]
 800b638:	065b      	lsls	r3, r3, #25
 800b63a:	f53f af1f 	bmi.w	800b47c <_vfiprintf_r+0x44>
 800b63e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b640:	e71e      	b.n	800b480 <_vfiprintf_r+0x48>
 800b642:	ab03      	add	r3, sp, #12
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	462a      	mov	r2, r5
 800b648:	4b05      	ldr	r3, [pc, #20]	@ (800b660 <_vfiprintf_r+0x228>)
 800b64a:	a904      	add	r1, sp, #16
 800b64c:	4630      	mov	r0, r6
 800b64e:	f7fd fe53 	bl	80092f8 <_printf_i>
 800b652:	e7e4      	b.n	800b61e <_vfiprintf_r+0x1e6>
 800b654:	0800bc86 	.word	0x0800bc86
 800b658:	0800bc90 	.word	0x0800bc90
 800b65c:	08008dc9 	.word	0x08008dc9
 800b660:	0800b415 	.word	0x0800b415
 800b664:	0800bc8c 	.word	0x0800bc8c

0800b668 <__swbuf_r>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	460e      	mov	r6, r1
 800b66c:	4614      	mov	r4, r2
 800b66e:	4605      	mov	r5, r0
 800b670:	b118      	cbz	r0, 800b67a <__swbuf_r+0x12>
 800b672:	6a03      	ldr	r3, [r0, #32]
 800b674:	b90b      	cbnz	r3, 800b67a <__swbuf_r+0x12>
 800b676:	f7fd ffe9 	bl	800964c <__sinit>
 800b67a:	69a3      	ldr	r3, [r4, #24]
 800b67c:	60a3      	str	r3, [r4, #8]
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	071a      	lsls	r2, r3, #28
 800b682:	d501      	bpl.n	800b688 <__swbuf_r+0x20>
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	b943      	cbnz	r3, 800b69a <__swbuf_r+0x32>
 800b688:	4621      	mov	r1, r4
 800b68a:	4628      	mov	r0, r5
 800b68c:	f000 f82a 	bl	800b6e4 <__swsetup_r>
 800b690:	b118      	cbz	r0, 800b69a <__swbuf_r+0x32>
 800b692:	f04f 37ff 	mov.w	r7, #4294967295
 800b696:	4638      	mov	r0, r7
 800b698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	6922      	ldr	r2, [r4, #16]
 800b69e:	1a98      	subs	r0, r3, r2
 800b6a0:	6963      	ldr	r3, [r4, #20]
 800b6a2:	b2f6      	uxtb	r6, r6
 800b6a4:	4283      	cmp	r3, r0
 800b6a6:	4637      	mov	r7, r6
 800b6a8:	dc05      	bgt.n	800b6b6 <__swbuf_r+0x4e>
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f7ff fd99 	bl	800b1e4 <_fflush_r>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d1ed      	bne.n	800b692 <__swbuf_r+0x2a>
 800b6b6:	68a3      	ldr	r3, [r4, #8]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	60a3      	str	r3, [r4, #8]
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	1c5a      	adds	r2, r3, #1
 800b6c0:	6022      	str	r2, [r4, #0]
 800b6c2:	701e      	strb	r6, [r3, #0]
 800b6c4:	6962      	ldr	r2, [r4, #20]
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d004      	beq.n	800b6d6 <__swbuf_r+0x6e>
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	07db      	lsls	r3, r3, #31
 800b6d0:	d5e1      	bpl.n	800b696 <__swbuf_r+0x2e>
 800b6d2:	2e0a      	cmp	r6, #10
 800b6d4:	d1df      	bne.n	800b696 <__swbuf_r+0x2e>
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	4628      	mov	r0, r5
 800b6da:	f7ff fd83 	bl	800b1e4 <_fflush_r>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d0d9      	beq.n	800b696 <__swbuf_r+0x2e>
 800b6e2:	e7d6      	b.n	800b692 <__swbuf_r+0x2a>

0800b6e4 <__swsetup_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4b29      	ldr	r3, [pc, #164]	@ (800b78c <__swsetup_r+0xa8>)
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	6818      	ldr	r0, [r3, #0]
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	b118      	cbz	r0, 800b6f8 <__swsetup_r+0x14>
 800b6f0:	6a03      	ldr	r3, [r0, #32]
 800b6f2:	b90b      	cbnz	r3, 800b6f8 <__swsetup_r+0x14>
 800b6f4:	f7fd ffaa 	bl	800964c <__sinit>
 800b6f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fc:	0719      	lsls	r1, r3, #28
 800b6fe:	d422      	bmi.n	800b746 <__swsetup_r+0x62>
 800b700:	06da      	lsls	r2, r3, #27
 800b702:	d407      	bmi.n	800b714 <__swsetup_r+0x30>
 800b704:	2209      	movs	r2, #9
 800b706:	602a      	str	r2, [r5, #0]
 800b708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b70c:	81a3      	strh	r3, [r4, #12]
 800b70e:	f04f 30ff 	mov.w	r0, #4294967295
 800b712:	e033      	b.n	800b77c <__swsetup_r+0x98>
 800b714:	0758      	lsls	r0, r3, #29
 800b716:	d512      	bpl.n	800b73e <__swsetup_r+0x5a>
 800b718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b71a:	b141      	cbz	r1, 800b72e <__swsetup_r+0x4a>
 800b71c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b720:	4299      	cmp	r1, r3
 800b722:	d002      	beq.n	800b72a <__swsetup_r+0x46>
 800b724:	4628      	mov	r0, r5
 800b726:	f7fe ff07 	bl	800a538 <_free_r>
 800b72a:	2300      	movs	r3, #0
 800b72c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b72e:	89a3      	ldrh	r3, [r4, #12]
 800b730:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	2300      	movs	r3, #0
 800b738:	6063      	str	r3, [r4, #4]
 800b73a:	6923      	ldr	r3, [r4, #16]
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	f043 0308 	orr.w	r3, r3, #8
 800b744:	81a3      	strh	r3, [r4, #12]
 800b746:	6923      	ldr	r3, [r4, #16]
 800b748:	b94b      	cbnz	r3, 800b75e <__swsetup_r+0x7a>
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b754:	d003      	beq.n	800b75e <__swsetup_r+0x7a>
 800b756:	4621      	mov	r1, r4
 800b758:	4628      	mov	r0, r5
 800b75a:	f000 f883 	bl	800b864 <__smakebuf_r>
 800b75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b762:	f013 0201 	ands.w	r2, r3, #1
 800b766:	d00a      	beq.n	800b77e <__swsetup_r+0x9a>
 800b768:	2200      	movs	r2, #0
 800b76a:	60a2      	str	r2, [r4, #8]
 800b76c:	6962      	ldr	r2, [r4, #20]
 800b76e:	4252      	negs	r2, r2
 800b770:	61a2      	str	r2, [r4, #24]
 800b772:	6922      	ldr	r2, [r4, #16]
 800b774:	b942      	cbnz	r2, 800b788 <__swsetup_r+0xa4>
 800b776:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b77a:	d1c5      	bne.n	800b708 <__swsetup_r+0x24>
 800b77c:	bd38      	pop	{r3, r4, r5, pc}
 800b77e:	0799      	lsls	r1, r3, #30
 800b780:	bf58      	it	pl
 800b782:	6962      	ldrpl	r2, [r4, #20]
 800b784:	60a2      	str	r2, [r4, #8]
 800b786:	e7f4      	b.n	800b772 <__swsetup_r+0x8e>
 800b788:	2000      	movs	r0, #0
 800b78a:	e7f7      	b.n	800b77c <__swsetup_r+0x98>
 800b78c:	20040018 	.word	0x20040018

0800b790 <_raise_r>:
 800b790:	291f      	cmp	r1, #31
 800b792:	b538      	push	{r3, r4, r5, lr}
 800b794:	4605      	mov	r5, r0
 800b796:	460c      	mov	r4, r1
 800b798:	d904      	bls.n	800b7a4 <_raise_r+0x14>
 800b79a:	2316      	movs	r3, #22
 800b79c:	6003      	str	r3, [r0, #0]
 800b79e:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7a6:	b112      	cbz	r2, 800b7ae <_raise_r+0x1e>
 800b7a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7ac:	b94b      	cbnz	r3, 800b7c2 <_raise_r+0x32>
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f000 f830 	bl	800b814 <_getpid_r>
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	4601      	mov	r1, r0
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7be:	f000 b817 	b.w	800b7f0 <_kill_r>
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d00a      	beq.n	800b7dc <_raise_r+0x4c>
 800b7c6:	1c59      	adds	r1, r3, #1
 800b7c8:	d103      	bne.n	800b7d2 <_raise_r+0x42>
 800b7ca:	2316      	movs	r3, #22
 800b7cc:	6003      	str	r3, [r0, #0]
 800b7ce:	2001      	movs	r0, #1
 800b7d0:	e7e7      	b.n	800b7a2 <_raise_r+0x12>
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7d8:	4620      	mov	r0, r4
 800b7da:	4798      	blx	r3
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e7e0      	b.n	800b7a2 <_raise_r+0x12>

0800b7e0 <raise>:
 800b7e0:	4b02      	ldr	r3, [pc, #8]	@ (800b7ec <raise+0xc>)
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	6818      	ldr	r0, [r3, #0]
 800b7e6:	f7ff bfd3 	b.w	800b790 <_raise_r>
 800b7ea:	bf00      	nop
 800b7ec:	20040018 	.word	0x20040018

0800b7f0 <_kill_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	@ (800b810 <_kill_r+0x20>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	602b      	str	r3, [r5, #0]
 800b7fe:	f7f7 ff42 	bl	8003686 <_kill>
 800b802:	1c43      	adds	r3, r0, #1
 800b804:	d102      	bne.n	800b80c <_kill_r+0x1c>
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	b103      	cbz	r3, 800b80c <_kill_r+0x1c>
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	bd38      	pop	{r3, r4, r5, pc}
 800b80e:	bf00      	nop
 800b810:	2004056c 	.word	0x2004056c

0800b814 <_getpid_r>:
 800b814:	f7f7 bf2f 	b.w	8003676 <_getpid>

0800b818 <__swhatbuf_r>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	460c      	mov	r4, r1
 800b81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b820:	2900      	cmp	r1, #0
 800b822:	b096      	sub	sp, #88	@ 0x58
 800b824:	4615      	mov	r5, r2
 800b826:	461e      	mov	r6, r3
 800b828:	da0d      	bge.n	800b846 <__swhatbuf_r+0x2e>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b830:	f04f 0100 	mov.w	r1, #0
 800b834:	bf14      	ite	ne
 800b836:	2340      	movne	r3, #64	@ 0x40
 800b838:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b83c:	2000      	movs	r0, #0
 800b83e:	6031      	str	r1, [r6, #0]
 800b840:	602b      	str	r3, [r5, #0]
 800b842:	b016      	add	sp, #88	@ 0x58
 800b844:	bd70      	pop	{r4, r5, r6, pc}
 800b846:	466a      	mov	r2, sp
 800b848:	f000 f848 	bl	800b8dc <_fstat_r>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	dbec      	blt.n	800b82a <__swhatbuf_r+0x12>
 800b850:	9901      	ldr	r1, [sp, #4]
 800b852:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b856:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b85a:	4259      	negs	r1, r3
 800b85c:	4159      	adcs	r1, r3
 800b85e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b862:	e7eb      	b.n	800b83c <__swhatbuf_r+0x24>

0800b864 <__smakebuf_r>:
 800b864:	898b      	ldrh	r3, [r1, #12]
 800b866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b868:	079d      	lsls	r5, r3, #30
 800b86a:	4606      	mov	r6, r0
 800b86c:	460c      	mov	r4, r1
 800b86e:	d507      	bpl.n	800b880 <__smakebuf_r+0x1c>
 800b870:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	6123      	str	r3, [r4, #16]
 800b878:	2301      	movs	r3, #1
 800b87a:	6163      	str	r3, [r4, #20]
 800b87c:	b003      	add	sp, #12
 800b87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b880:	ab01      	add	r3, sp, #4
 800b882:	466a      	mov	r2, sp
 800b884:	f7ff ffc8 	bl	800b818 <__swhatbuf_r>
 800b888:	9f00      	ldr	r7, [sp, #0]
 800b88a:	4605      	mov	r5, r0
 800b88c:	4639      	mov	r1, r7
 800b88e:	4630      	mov	r0, r6
 800b890:	f7fe fec6 	bl	800a620 <_malloc_r>
 800b894:	b948      	cbnz	r0, 800b8aa <__smakebuf_r+0x46>
 800b896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b89a:	059a      	lsls	r2, r3, #22
 800b89c:	d4ee      	bmi.n	800b87c <__smakebuf_r+0x18>
 800b89e:	f023 0303 	bic.w	r3, r3, #3
 800b8a2:	f043 0302 	orr.w	r3, r3, #2
 800b8a6:	81a3      	strh	r3, [r4, #12]
 800b8a8:	e7e2      	b.n	800b870 <__smakebuf_r+0xc>
 800b8aa:	89a3      	ldrh	r3, [r4, #12]
 800b8ac:	6020      	str	r0, [r4, #0]
 800b8ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8b2:	81a3      	strh	r3, [r4, #12]
 800b8b4:	9b01      	ldr	r3, [sp, #4]
 800b8b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8ba:	b15b      	cbz	r3, 800b8d4 <__smakebuf_r+0x70>
 800b8bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f000 f81d 	bl	800b900 <_isatty_r>
 800b8c6:	b128      	cbz	r0, 800b8d4 <__smakebuf_r+0x70>
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	f023 0303 	bic.w	r3, r3, #3
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	81a3      	strh	r3, [r4, #12]
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	431d      	orrs	r5, r3
 800b8d8:	81a5      	strh	r5, [r4, #12]
 800b8da:	e7cf      	b.n	800b87c <__smakebuf_r+0x18>

0800b8dc <_fstat_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d07      	ldr	r5, [pc, #28]	@ (800b8fc <_fstat_r+0x20>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	602b      	str	r3, [r5, #0]
 800b8ea:	f7f7 ff2c 	bl	8003746 <_fstat>
 800b8ee:	1c43      	adds	r3, r0, #1
 800b8f0:	d102      	bne.n	800b8f8 <_fstat_r+0x1c>
 800b8f2:	682b      	ldr	r3, [r5, #0]
 800b8f4:	b103      	cbz	r3, 800b8f8 <_fstat_r+0x1c>
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	bd38      	pop	{r3, r4, r5, pc}
 800b8fa:	bf00      	nop
 800b8fc:	2004056c 	.word	0x2004056c

0800b900 <_isatty_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d06      	ldr	r5, [pc, #24]	@ (800b91c <_isatty_r+0x1c>)
 800b904:	2300      	movs	r3, #0
 800b906:	4604      	mov	r4, r0
 800b908:	4608      	mov	r0, r1
 800b90a:	602b      	str	r3, [r5, #0]
 800b90c:	f7f7 ff2b 	bl	8003766 <_isatty>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_isatty_r+0x1a>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_isatty_r+0x1a>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	2004056c 	.word	0x2004056c

0800b920 <_init>:
 800b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b922:	bf00      	nop
 800b924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b926:	bc08      	pop	{r3}
 800b928:	469e      	mov	lr, r3
 800b92a:	4770      	bx	lr

0800b92c <_fini>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	bf00      	nop
 800b930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b932:	bc08      	pop	{r3}
 800b934:	469e      	mov	lr, r3
 800b936:	4770      	bx	lr
